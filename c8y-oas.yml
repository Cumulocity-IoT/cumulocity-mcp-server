openapi: 3.0.3
info:
  version: Latest
  title: Cumulocity
  x-logo:
    url: 'https://www.cumulocity.com/docs/images/logo-platform.svg'
    backgroundColor: '#F8F8F8'
    altText: Cumulocity
    href: 'https://www.cumulocity.com/api'
  description: |
    # REST implementation

    This section describes the aspects common to all REST-based interfaces of Cumulocity. The interfaces are based on the [Hypertext Transfer Protocol 1.1](https://tools.ietf.org/html/rfc2616) using [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure).

    ## HTTP usage

    ### Application management

    Cumulocity uses a so-called "application key" to distinguish requests coming from devices and traffic from applications. If you write an application, pass the following header as part of all requests:

    ```markup
    X-Cumulocity-Application-Key: <APPLICATION_KEY>
    ```

    For example, if you registered your application in the Cumulocity Administration application with the key "myapp", your requests should contain the header:

    ```markup
    X-Cumulocity-Application-Key: myapp
    ```

    This makes your application subscribable and billable. If you implement a device, do not pass the key.

    > **&#9432; Info:** Make sure that you pass the key in **all** requests coming from an application. If you leave out the key,
    > the request will be considered as a device request, and the corresponding device will be marked as "available".

    ### Limited HTTP clients

    If you use an HTTP client that can only perform GET and POST methods in HTTP, you can emulate the other methods through an additional "X-HTTP-METHOD" header. Simply issue a POST request and add the header, specifying the actual REST method to be executed. For example, to emulate the "PUT" (modify) method, you can use:

    ```http
    POST ...
    X-HTTP-METHOD: PUT
    ```

    ### Processing mode

    Every update request (PUT, POST, DELETE) executes with a so-called *processing mode*. The processing modes are as follows:

    |Processing mode|Description|
    |---|---|
    |PERSISTENT (default)|All updates will be send both to the Cumulocity database and to real-time processing.|
    |TRANSIENT|Updates will be sent only to real-time processing. As part of real-time processing, the user can decide case by case through scripts whether updates should be stored to the database or not.|
    |QUIESCENT|The QUIESCENT processing mode behaves like the PERSISTENT processing mode with the exception that no real-time notifications will be sent. Currently, the QUIESCENT processing mode is applicable for measurements, events and managed objects.|
    |CEP| With the CEP processing mode, requests will only be processed by CEP or Apama. Currently, the CEP processing mode is applicable for measurements and events only.|

    To explicitly control the processing mode of an update request, you can use the "X-Cumulocity-Processing-Mode" header with a value of either "PERSISTENT", "TRANSIENT", "QUIESCENT" or "CEP":

    ```markup
    X-Cumulocity-Processing-Mode: PERSISTENT
    ```

    > **&#9432; Info:** Events are always delivered to CEP/Apama for all processing modes. This is independent from real-time notifications.

    ### Authorization

    All requests issued to Cumulocity are subject to authorization. To determine the required permissions, see the "Required role" entries for the individual requests. To learn more about the different permissions and the concept of ownership in Cumulocity, see [Getting started > Technical concepts > Security aspects > Access control > Managing roles and assigning permissions](https://www.cumulocity.com/docs/concepts/security/#managing-roles-and-assigning-permissions) in the Cumulocity user documentation.

    ### Media types

    Each type of data is associated with an own media type. The general format of media types is:

    ```markup
    application/vnd.com.nsn.cumulocity.<TYPE>+json;ver=<VERSION>;charset=UTF-8
    ```

    Each media type contains a parameter `ver` indicating the version of the type. At the time of writing, the latest version is "0.9". As an example, the media type for an error message in the current version is:

    ```markup
    application/vnd.com.nsn.cumulocity.error+json;ver=0.9;charset=UTF-8
    ```

    Media types are used in HTTP "Content-Type" and "Accept" headers. If you specify an "Accept" header in a POST or PUT request, the response will contain the newly created or updated object. If you do not specify the header, the response body will be empty.

    If a media type without the `ver` parameter is given, the oldest available version will be returned by the server. If the "Accept" header contains the same media type in multiple versions, the server will return a representation in the latest supported version.

    Note that media type values should be treated as case insensitive.

    ### Date format

    Data exchanged with Cumulocity in HTTP requests and responses is encoded in [JSON format](http://www.ietf.org/rfc/rfc4627.txt) and [UTF-8](http://en.wikipedia.org/wiki/UTF-8) character encoding. Timestamps and dates are accepted and emitted by Cumulocity in [ISO 8601](http://www.w3.org/TR/NOTE-datetime) format:

    ```markup
    Date: YYYY-MM-DD
    Time: hh:mm:ss±hh:mm
    Timestamp: YYYY-MM-DDThh:mm:ss±hh:mm
    ```

    To avoid ambiguity, all times and timestamps must include timezone information. Please take into account that the plus character "+" must be encoded as "%2B".

    ### Response Codes

    Cumulocity uses conventional HTTP response codes to indicate the success or failure of an API request. Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate a user error. The response provides information on why the request failed (for example, a required parameter was omitted). Codes in the `5xx` range indicate an error with Cumulocity's servers ([these are very rare](https://cumulocity.com/docs/service-terms/service-level/)).

    #### HTTP status code summary

    |Code|Message|Description|
    |:---:|:---|:---|
    |200|OK|Everything worked as expected.|
    |201|Created|A managed object was created.|
    |204|No content|An object was removed.|
    |400|Bad Request|The request was unacceptable, often due to missing a required parameter.|
    |401|Unauthorized|Authentication has failed, or credentials were required but not provided.|
    |403|Forbidden|The authenticated user doesn't have permissions to perform the request.|
    |404|Not Found|The requested resource doesn't exist.|
    |405|Method not allowed|The employed HTTP method cannot be used on this resource (for example, using PUT on a read-only resource).|
    |406|Not Acceptable|The server could not produce a response matching the list of accepted types defined in the request.|
    |409|Conflict| The data is correct but it breaks some constraints (for example, application version limit is exceeded). |
    |422|Invalid data| Invalid data was sent on the request and/or a query could not be understood.                             |
    |422|Unprocessable Entity| The requested resource cannot be updated or mandatory fields are missing on the executed operation.      |
    |500<br>503|Server Errors| Something went wrong on Cumulocity's end.                                                            |

    ## REST usage

    ### Interpretation of HTTP verbs

    The semantics described in the [HTTP specification](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9) are used:

    * POST creates a new resource. In the response "Location" header, the URI of the newly created resource is returned.
    * GET retrieves a resource.
    * PUT updates an existing resource with the contents of the request.
    * DELETE removes a resource. The response will be "204 No Content".

    If a PUT request only contains parts of a resource (also known as fragments), only those parts are updated. To remove such a part, use a PUT request with a null value for it:

    ```json
    {
      "resourcePartName": null
    }
    ```

    > **&#9432; Info:** A PUT request cannot update sub-resources that are identified by a separate URI.

    ### URI space and URI templates

    Clients should not make assumptions on the layout of URIs used in requests, but construct URIs from previously returned URIs or URI templates. The [root interface](#tag/Platform-API) provides the entry point for clients.

    URI templates contain placeholders in curly braces (for example, `{type}`), which must be filled by the client to produce a URI. As an example, see the following excerpt from the event API response:

    ```json
    {
      "events": {
          "self": "https://<TENANT_DOMAIN>/event"
      },
      "eventsForSourceAndType": "https://<TENANT_DOMAIN>/event/events?type={type}&source={source}"
    }
    ```

    The client must fill the `{type}` and `{source}` placeholders with the desired type and source devices of the events to be returned. The meaning of these placeholders is documented in the respective interface descriptions.

    ### Interface structure

    In general, Cumulocity REST resources are modeled according to the following pattern:

    * The starting point are API resources, which will provide access to the actual data through URIs and URI templates to collection resources. For example, the above event API resource provides the `events` URI and the `eventsForSourceAndType` URI to access collections of events.
    * Collection resources aggregate member resources and allow creating new member resources in the collection. For example, through the `events` collection resource, new events can be created.
    * Finally, individual resources can be edited.

    #### Query result paging

    Collection resources support paging of data to avoid passing huge data volumes in one block from client to server. GET requests to collections accept two query parameters:

    * `currentPage` defines the slice of data to be returned, starting with 1. By default, the first page is returned.
    * `pageSize` indicates how many entries of the collection should be returned. By default, 5 entries are returned. The upper limit for one page is currently 2,000 documents. Any larger requested page size is trimmed to the upper limit.
    * `withTotalElements` will yield the total number of elements in the statistics object. This is only applicable on [range queries](https://en.wikipedia.org/wiki/Range_query_(database)).
    * `withTotalPages` will yield the total number of pages in the statistics object. This is only applicable on [range queries](https://en.wikipedia.org/wiki/Range_query_(database)).

    For convenience, collection resources provide `next` and `prev` links to retrieve the next and previous pages of the results. The following is an example response for managed object collections (the contents of the array `managedObjects` have been omitted):

    ```json
    {
      "self" : "https://<TENANT_DOMAIN>/inventory/managedObjects?pageSize=5&currentPage=2",
      "managedObjects" : [...],
      "statistics" : {
        "totalPages" : 7,
        "pageSize" : 5,
        "currentPage" : 2,
        "totalElements" : 34
      },
      "prev" : "https://<TENANT_DOMAIN>/inventory/managedObjects?pageSize=5&currentPage=1",
      "next" : "https://<TENANT_DOMAIN>/inventory/managedObjects?pageSize=5&currentPage=3"
    }
    ```

    The `totalPages` and `totalElements` properties can be expensive to compute, hence they are not returned by default for [range queries](https://en.wikipedia.org/wiki/Range_query_(database)). To include any of them in the result, add the query parameters `withTotalPages=true` and/or `withTotalElements=true`.

    > **&#9432; Info:** If inventory roles are applied to a user, a query by the user may return less than `pageSize` results even if there are more results in total.

    > **&#9432; Info:** To improve performance, the `totalPages` and `totalElements` statistics are cached for 10 seconds.

    #### Query result paging for users with restricted access

    If a user does not have a global role for reading data from the API resource but rather has [inventory roles](https://www.cumulocity.com/docs/standard-tenant/managing-permissions/#inventory-roles) for reading only particular documents, there are some differences in query result paging:

    * In some circumstances the response may contain less than `pageSize` and `totalElements` elements though there is more data in the database accessible for the user.
    * In some circumstances `next` and `prev` links may appear in the response though there is no more data in the database accessible for the user.
    * The property `currentPage` of the response does not contain the page number but the offset of the next element not yet processed by the querying mechanism.
    * The query parameters `withTotalPages=true` and `withTotalElements=true` have no effect, and the value of the `totalPages` and `totalElements` properties is always null.

    The above behavior results from the fact that the querying mechanism is iterating maximally over 10 * max(pageSize, 100) documents per request, and it stops even though the full page of data accessible for the user could not be collected. When the next page is requested the querying mechanism starts the iteration where it completed the previous time.

    #### Query result by time interval

    Use the following query parameters to obtain data for a specified time interval:

    * `dateFrom` - Start date or date and time.
    * `dateTo` - End date or date and time.

    Example formats:

    ```markup
    dateTo=2019-04-20
    dateTo=2019-04-20T08:30:00.000Z
    ```

    Parameters are optional. Values provided with those parameters are closed open range ( `[ dateFrom, dateTo )` ) . `dateFrom` is inclusive and `dateTo` is exclusive.

    > **⚠️ Important:** If your servers are not running in UTC (Coordinated Universal Time), any date passed without timezone will be handled as UTC, regardless of the server local timezone. This might lead to a difference regarding the date/time range included in the results.

    ### Root interface

    To discover the URIs to the various interfaces of Cumulocity, it provides a "root" interface.
    This root interface aggregates all the underlying API resources.
    See the [Platform API](#tag/Platform-API) endpoint.
    For more information on the different API resources, consult the respective API sections.

    ## Generic media types

    ### Error

    The error type provides further information on the reason of a failed request.

    Content-Type: application/vnd.com.nsn.cumulocity.error+json

    |Name|Type|Description|
    |---|---|---|
    |error|string|Error type formatted as `<RESOURCE_TYPE>/<ERROR_NAME>`. For example, an object not found in the inventory is reported as `inventory/notFound`.|
    |info|string|URL to an error description on the Internet.|
    |message|string|Short text description of the error|

    ### Paging statistics

    Paging statistics for collection of resources.

    Content-Type: application/vnd.com.nsn.cumulocity.pagingstatistics+json

    |Name|Type|Description|
    |---|---|---|
    |currentPage|integer|The current returned page within the full result set, starting at "1".|
    |pageSize|integer|Maximum number of records contained in this query.|
    |totalElements|integer|The total number of results (elements).|
    |totalPages|integer|The total number of paginated results (pages).|

    > **&#9432; Info:** The `totalPages` and `totalElements` properties are not returned by default in the response. To include any of them, add the query parameters `withTotalPages=true` and/or `withTotalElements=true`. Be aware of [differences in query result paging for users with restricted access](#query-result-paging-for-users-with-restricted-access).

    > **&#9432; Info:** To improve performance, the `totalPages` and `totalElements` statistics are cached for 10 seconds.

    # Fragment library

    Visit the [Device management > Device integration > Fragment library](https://www.cumulocity.com/docs/device-integration/fragment-library/) in the Cumulocity user documentation.

    # Login options

    When you sign up for an account on the [Cumulocity platform](https://www.cumulocity.com/), for example, by using a free trial, you will be provided with a dedicated URL address for your tenant. All requests to the platform must be authenticated employing your tenant ID, Cumulocity user (c8yuser for short) and password. Cumulocity offers the following forms of authentication:

    * Basic authentication (Basic)
    * OAI-Secure authentication (OAI-Secure)
    * SSO with authentication code grant (SSO)
    * JWT authentication with an access token from a IAM (JWT-IAM)

    You can check your login options with a GET call to the endpoint <kbd><a href="#tag/Login-options">/tenant/loginOptions</a></kbd>.
servers:
  - description: Cumulocity tenant
    url: 'https://<TENANT_DOMAIN>'
security:
  - Basic: []
  - OAI-Secure: []
  - SSO: []
  - JWT-IAM: []
tags:
  - name: Alarm API
    description: 'The alarm API resource returns URIs and URI templates to collections of alarms, so that all alarms or alarms of a specified source device and/or status can be retrieved.'
    x-codegen-ignore: true
  - name: Alarm notification API
    description: |
      The Alarm notification API allows monitoring alarms of specific devices. The basic protocol for receiving notifications is described in [Real-time notifications](#tag/Real-time-notification-API).
      The Real-time notification API enables responsive communication by employing a POST request to:

      ```http
      notification/realtime
      ```

      To receive notifications for the alarms of all devices, the subscription channel needs to contain the managed object ID of the device or an asterisk (*) as placeholder.

      ```json
      "channel": "/alarms/{managedObjectId}"
      ```

      Additionally to the alarm object, the response will contain a `realtimeAction` flag to identify which action resulted in the given object (CREATE or UPDATE).

      **Required role**: ROLE_ALARM_READ

      **Response sample:**

      ```json
      {
        "channel": "/alarms/145075",
        "successful": true,
        "error": "",
        "data": [{
          "realtimeAction": "UPDATE",
          "data": {
            "id": "1",
            "self": "...",
            "source": {
              "145075"
            },
            "type": "c8y_UnavailabilityAlarm",
            "text": "I am an alarm",
            "severity": "MINOR",
            "status": "CLEARED",
            "firstOccurrence": true,
            "count": 1
          }
        }],
        "clientId": "Un1q31d3nt1f13r"
      }
      ```
  - name: Alarms
    description: |
      An alarm represents an event that requires manual action, for example, when the temperature of a fridge increases above a particular threshold.

      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Device control API
    description: |
      The device control API resource returns URIs and URI templates to collections of operations so that they can be retrieved.

      > **&#9432; Info:** In order to create/retrieve/update an operation for a device, the device must be in the “childDevices” hierarchy of an existing agent. To create an agent in the inventory, you should create a managed object with a fragment `com_cumulocity_model_Agent`.
    x-codegen-ignore: true
  - name: Device control notification API
    description: |
      There are two options to receive real-time notifications for the device control API.
      The basic protocol for receiving notifications is described in [Real-time notifications](#tag/Real-time-notification-API).

      ## Receive operations for an agent

      Real-time notifications permit an agent to almost immediately receive new operations targeted to it. For control-related notifications, use the URL:

      ```http
      /notification/operations
      ```

      The subscription channel needs to contain the managed object ID of the agent that wants to receive its operations:

      ```json
      "channel": "/<AGENT_ID>"
      ```

      For example, to subscribe on notifications about new operations created for the agent with the ID "5", the subscription channel should be the following string:

      ```json
      "channel": "/5"
      ```

      **Required role:** ROLE_DEVICE_CONTROL_READ

      ## Receive operations for a device

      This endpoint will not only result in returning newly created operations but also all updates (including deletion) of the operations for a device. The URL is:

      ```http
      /notification/realtime
      ```

      The subscription channel needs to contain the managed object ID of the device or a `*` as placeholder to receive notifications for all devices:

      ```json
      "channel": "/operations/<DEVICE_ID>""
      ```

      Additionally to the operation object, the response will contain a `realtimeAction` property to identify which action resulted in the given object (CREATE, UPDATE or DELETE). In case of a deletion the data will only contain the ID of the deleted operation.

      **Response sample:**

      ```json
      [
        {
          "channel": "/operations/12345",
          "successful": true,
          "error": "",
          "data": [{
            "realtimeAction": "CREATE",
            "data": {
              "id": "1",
              "deviceId": "12345",
              "self": "https://<TENANT_DOMAIN>/devicecontrol/operation/12345",
              "creationTime": "2011-09-06T12:03:27.927+02:00",
              "status": "PENDING",
              "time": "2011-09-06T12:03:27.845+02:00",
              "description": "Deactivate motion tracking",
              "c8y_MotionTracking": { }
            }
          }],
          "clientId": "Un1q31d3nt1f13r"
        }
      ]
      ```

      **Required role:** ROLE_DEVICE_CONTROL_READ
  - name: Operations
    description: |
      API methods to create, retrieve, update and delete operations in Cumulocity.

      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Bulk operations
    description: |
      The bulk operations API allows to schedule an operation on a group of devices to be executed at a specified time.
      It is required to specify the delay between the creation of subsequent operations.
      When the bulk operation is created, it has the status ACTIVE.
      When all operations are created, the bulk operation has the status COMPLETED.
      It is also possible to cancel an already created bulk operation by deleting it.

      When you create a bulk operation, you can run it in two modes:

      * If `groupId` is passed, it works the standard way, that means, it takes devices from a group and schedules operations on them.
      * If `failedParentId` is passed, it takes the already processed bulk operation by that ID, and schedules operations on devices for which the previous operations failed.

      Note that passing both `groupId` and `failedParentId` will not work, and a bulk operation works with groups of type `static` and `dynamic`.

      > **&#9432; Info:** The bulk operations API requires different roles than the rest of the device control API: `BULK_OPERATION_READ` and `BULK_OPERATION_ADMIN`.
      >
      > The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Device credentials
    description: |
      API methods to create device credentials in Cumulocity.

      Device credentials can be enquired by devices that do not have credentials for accessing a tenant yet.
      Since the device does not have credentials yet, a set of fixed credentials is used for this API.
      The credentials can be obtained by [contacting support](https://www.cumulocity.com/docs/additional-resources/contacting-support/).

      > **⚠️ Important:** Do not use your tenant credentials with this API.

      > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  - name: New device requests
    description: |
      API methods to create, retrieve, update and delete new device requests in Cumulocity.

      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Device control via SMS
    description: |
      In order to send operations via SMS, either the device managed object should contain the fragment:

      ```json
      "c8y_CommunicationMode": {
        "mode": "SMS"
      }
      ```

      or the operation should contain the property:

      ```json
      "deliveryType": "SMS"
      ```
  - name: Audit API
    description: |
      The audit API resource returns URIs and URI templates to collections of audit records, so that they can be retrieved by criteria such as “all records from a particular user”, or “all records from a particular application”.

      ### Audited information:

      * Alarm modifications
      * Operation modifications
      * Two-factor authentication login attempts
      * Smart rule modifications
      * Complex Event Processing (CEP) module modifications
      * User and group permissions modifications
      * SSO and OAuth Internal logout and login attempts
    x-codegen-ignore: true
  - name: Audits
    description: |
      An audit log stores events that are security-relevant and should be stored for auditing. For example, an audit log should be generated when a user logs into a gateway.

      An audit log extends an event through:

      * A username of the user that carried out the activity.
      * An application that was used to carry out the activity.
      * The actual activity.
      * A severity.

      > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  - name: Event API
    description: 'The event API resource returns URIs and URI templates to collections of events, so that all events or events of a specified type and/or source device can be retrieved.'
    x-codegen-ignore: true
  - name: Event notification API
    description: |
      The Event notification API allows monitoring events of specific devices. The basic protocol for receiving notifications is described in [Real-time notifications](#tag/Real-time-notification-API).
      The Real-time notification API enables responsive communication by employing a POST request to:

      ```http
      notification/realtime
      ```

      To receive notifications for the events of all devices, the subscription channel needs to contain the managed object ID of the device or an asterisk (*) as placeholder.

      ```json
      "channel": "/events/{managedObjectId}"
      ```

      Additionally to the event object, the response will contain a `realtimeAction` flag to identify which action resulted in the given object (CREATE, UPDATE or DELETE). In case of a deletion, the data will only contain the ID of the deleted event.

      **Required role**: ROLE_EVENT_READ

      **Response sample:**

      ```json
      {
        "channel": "/events/145075",
        "successful": true,
        "error": "",
        "data": [{
          "realtimeAction": "CREATE",
          "data": {
            "id": "1",
            "self": "...",
            "source": {
              "145075"
            },
            "text": "An event has been triggered",
            "creationTime": "2019-09-06T12:03:27.927+02:00",
          }
        }],
        "clientId": "Un1q31d3nt1f13r"
      }
      ```
  - name: Events
    description: |
      Events are used to pass real-time information through Cumulocity.

      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Attachments
    description: 'It is possible to store, retrieve and delete binaries for events. Each event can have only one binary attached.'
  - name: Application API
    description: The application API resource returns URIs and URI templates to collections of applications so that all applications with a particular name and all applications owned by particular tenant can be queried.
    x-codegen-ignore: true
  - name: Current application
    description: |
      API methods to retrieve and update the current application and to retrieve its subscribers.
      It is the authenticated microservice user's application.
  - name: Applications
    description: "API methods to retrieve, create, update and delete applications.\n\n###\_Application names\n\nFor each tenant, Cumulocity manages the subscribed applications and provides a number of applications of various types.\nIn case you want to subscribe a tenant to an application using an API, you must use the application name in the argument (as name).\n\nRefer to the tables in [Platform administration > Standard tenant administration > Managing the ecosystem > Managing applications](https://www.cumulocity.com/docs/standard-tenant/ecosystem/#managing-applications) in the Cumulocity user documentation for the respective application name to be used.\n\n> **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.\n"
  - name: Application versions
    description: 'API methods to retrieve, create, update and delete application versions.'
  - name: Application binaries
    description: An API method to upload an application binary. It is a deployable microservice or web application.
  - name: Bootstrap user
    description: API methods to retrieve the bootstrap user of an application.
  - name: Inventory API
    description: 'The inventory stores all master data related to devices, their configuration and their connections. It also contains all related assets (for example, vehicles, machines, buildings) and their structure. The inventory API resource returns URIs and URI templates to collections of managed objects.'
    x-codegen-ignore: true
  - name: Inventory notification API
    description: |
      The Inventory notification API allows monitoring changes in the inventory. The basic protocol for receiving notifications is described in [Real-time notifications](#tag/Real-time-notification-API).
      The Real-time notification API enables responsive communication by employing a POST request to:

      ```http
      notification/realtime
      ```

      To receive notifications for changes in the inventory, the subscription channel needs to contain the managed object ID of the device or an asterisk (*) as placeholder.

      ```json
      "channel": "/managedobjects/{managedObjectId}"
      ```

      Additionally to the managed object, the response will contain a `realtimeAction` flag to identify which action resulted in the given object (CREATE, UPDATE or DELETE). In case of a deletion, the data will only contain the ID of the deleted managed object.

      **Response sample:**

      ```json
      {
        "channel": "/managedobjects/145075",
        "successful": true,
        "error": "",
        "data": [{
          "realtimeAction": "UPDATE",
          "data": {
            "id": "145075",
            "self": "...",
            "creationTime": "2019-09-06T12:03:27.927+02:00",
            "name": "Test device",
            "c8y_IsDevice": {},
          }
        }],
        "clientId": "Un1q31d3nt1f13r"
      }
      ```
  - name: Managed objects
    description: |
      The inventory stores devices and other assets relevant to your IoT solution. We refer to them as managed objects and such can be “smart objects”, for example, smart electricity meters, home automation gateways or GPS devices.

      For further information, refer to [Getting started > Technical concepts > Cumulocity's domain model > Inventory > Managed objects](https://www.cumulocity.com/docs/concepts/domain-model/#managed-objects) in the Cumulocity user documentation.

      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Binaries
    description: |
      Managed objects can perform operations to store, retrieve and delete binaries. One binary can store only one file. Together with the binary, a managed object is created which acts as a metadata information for the binary.

      > **&#9432; Info:** Supports only HTTP 1.1 clients.
      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Child operations
    description: |
      Managed objects can contain collections of references to child devices, additions and assets.

      > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  - name: Query language
    description: |
      Query expressions are matched against all managed objects using the `query` parameter. The following are examples of query expressions:

      * Only query the database: `query=name eq 'M01'`
      * Filter by name: `query=$filter=name eq 'M01'`
      * Order by ID: `query=$orderby=id asc`
      * Filter by name and order by ID: `query=$filter=name eq 'M01' $orderby=id`

      Query expressions extend the URL. The syntax is similar to the [OData protocol 2.0](https://www.odata.org/documentation/odata-version-2-0/overview/).   
      Regex features with custom filter queries are not supported.

      ## Supported operations

      * `eq` (equal): `City eq 'Redmond'`
      * `gt` (greater than): `Price gt 20`
      * `ge` (greater than or equal): `Price ge 10`
      * `lt` (less than): `Price lt 20`
      * `le` (less than or equal): `Price le 100`
      * `and` (logical AND): `Price le 200 and Price gt 3.5f`
      * `or` (logical OR): `Price le 3.5d or Price gt 200`
      * `not` (logical NOT): `not has(c8y_IsDevice)`

      Decimal numbers have to be specified using a suffix `f` or `d`, otherwise the number is interpreted as a string.
      * Valid query: `c8y_Position.lng gt 10 and c8y_Position.lng lt 16.5d`
      * Invalid query: `c8y_Position.lng eq 6.6`

      > **&#9432; Info:** The 'eq' operator can perform comparisons on primitive data types such as string or integers as well as build filters on array properties and even array properties containing complex objects.
      >
      > An example for array properties:
      >
      > If there is the property `customerIds: ["123", "456", "789"]` in a managed object, the 'eq' operator can filter the array by defining the filter `customerIds eq '123'`. This returns all managed objects which have the ID `123` in the `customerIds` arrays.
      >
      > An example for array properties containing complex objects:
      >
      > `{"customers":[{"id":"123","name":"Customer 1"},{"id":"456","name":"Customer 2"},{"id":"789","name":"Customer 3"}]}`
      >
      > The filter query `customers.id eq '123'` filters managed objects which have the object `{"id":"123","name":"Customer 1"}` in the `customers` array.

      ### Filtering by type and name

      Note that if you query `/inventory/managedObjects?type=c8y_Firmware&query=$filter=(name+eq+'Controller 1')`, the  parameter `type` is ignored. Instead, use `query=$filter=(type+eq+'c8y_Firmware'+and+name+eq+'Controller 1')`.

      ### Grouping query operators

      Use `( )` for precedence grouping: `(p1 eq 1) and (p2 eq 5 or p2 eq 6)`.

      ## Supported sort operations

      * Ascending order: `$orderby=name` or `$orderby=name asc`
      * Descending order: `$orderby=name desc`

      ## Supported functions

      #### `has()`
      - Matches objects with the property that is passed as an argument.
      - Accepts only one argument.
      - Only supports custom fragments.
      - Standard properties are not supported, that is, none of: `id`, `type`, `name`, `self`, `lastUpdated`, `owner`, `creationTime`, `supportedMeasurements`, `childAssets`, `childDevices`, `childAdditions`, `externalIds`.
      - `has(field1)` - matches objects with property `field1`.

      #### `hasany()`
      - Matches objects with the properties that are passed as arguments.
      - Accepts one or multiple arguments.
      - Only supports custom fragments.
      - Standard properties are not supported, that is, none of: `id`, `type`, `name`, `self`, `lastUpdated`, `owner`, `creationTime`, `supportedMeasurements`, `childAssets`, `childDevices`, `childAdditions`, `externalIds`.
      - `hasany(field1,field2)` - matches objects with property `field1` or `field2`.

      #### `bygroupid()`
      - Matches objects from the group with the ID that is passed as an argument.
      - Accepts one or multiple arguments.
      - `bygroupid(12,23)` matches objects from groups with ID = `12` or ID = `23`.

      #### `isinhierarchyof()`
      - Matches objects in the hierarchy of the object whose ID is passed as an argument.
      - Accepts one or multiple arguments.

      *Example:*

      For a given hierarchy:

      * Group g1
        * Subgroup s1
          * Object o1
          * Object o2
        * Subgroup s2
          * Object o3
          * Object o4

      - `isinhierarchyof(g1)` - matches group `g1` and all of its descendants: `g1`, `s1`, `s2`, `o1`, `o2`, `o3`, `o4`
      - `isinhierarchyof(s1)` - matches subgroup `s1` and all of its descendants: `s1`, `o1`, `o2`
      - `isinhierarchyof(s2)` - matches subgroup `s2` and all of its descendants: `s2`, `o3`, `o4`
      - `isinhierarchyof(o1)` - matches only object `o1`
      - `isinhierarchyof(o3)` - matches only object `o3`
      - `isinhierarchyof(s1,s2)` - matches both subgroups and their descendants: `s1`, `s2`, `o1`, `o2`, `o3`, `o4`
      - `isinhierarchyof(o2,o4)` - matches objects `o2`, `o4`

      > **⚠️ Important:** Although using multiple `bygroupid()`/`has()` functions joined with the `or` operator is feasible (for example, `bygroupid(12) or bygroupid(23)`/`has(field1) or has(field2)`), it's not recommended due to performance issue. You should rather use `bygroupid(12,23)`/`hasany(field1,field2)`.

      ## Supported values

      * String: `name eq 'Dev002'`, `name eq 'Dev*'`, `name eq '*001'`, `name eq '*'`.
        - The string must be surrounded by single quotes.
        - The string can contain the wildcard `*` and it matches 0 to N characters.
        - Matching is case-sensitive.
      * Number values
      * Date-time: `creationTime.date gt '2015-10-24T09:00:53.351+01:00'`
        - It must be encoded.
      * Null values: `name eq null`.

      ## Supported properties

      * Simple: `name`
      * Nested: `c8y_Availability.status`
  - name: Identity API
    description: |
      Cumulocity can associate devices and assets with multiple external identities.
      For instance, devices can often be identified by the IMEI of their modem, by a micro-controller serial number or by an asset tag.
      This is useful, for example, when you have non-functional hardware and must replace the hardware without losing the data that was recorded.

      The identity API resource returns URIs and URI templates for associating external identifiers with unique identifiers.
  - name: External IDs
    description: |
      The external ID resource represents an individual external ID that can be queried and deleted.

      > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  - name: User API
    description: 'The user API resource returns URIs and URI templates to collections of users, groups, and roles, so that they can be queried.'
    x-codegen-ignore: true
  - name: Current User
    description: |
      The current user is the user that is currently authenticated with Cumulocity for the API calls.

      > **&#9432; Info:** The Accept header should be provided in all PUT requests, otherwise an empty response body will be returned.
  - name: Users
    description: |
      API methods to create, retrieve, update and delete users in Cumulocity.

      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Groups
    description: |
      API methods to create, retrieve, update and delete user groups.

      > **⚠️ Important:** In the Cumulocity user interface, user groups are referred to as "global roles". Global roles are not to be confused with user roles.

      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Roles
    description: |
      API methods to create, retrieve, update and delete user roles.

      > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  - name: Inventory Roles
    description: |
      API methods to create, retrieve, update and delete inventory roles.

      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Device Permissions
    description: |
      API methods to retrieve and update device permissions assignments.

      Device permissions enable users to access and manipulate devices.

      The device permission structure is **[API:fragment_name:permission]** where:

      * **API** is one of the following values: OPERATION, ALARM, AUDIT, EVENT, MANAGED_OBJECT, MEASUREMENT or "*"
      * **fragment_name** can be the name of any fragment, for example, "c8y_Restart" or "*"
      * **permission** is ADMIN, READ or "*"

      Required permission per HTTP method:

      + GET - READ or "*"
      + PUT - ADMIN or "*"

      The wildcard "*" enables you to access every API and stored object regardless of the fragments that are inside it.

      > **⚠️ Important:** If there is no fragment in an object, for example, to read the object, you must use the wildcard "*" for the **fragment_name** part of the device permission (see the structure above). For example: `"10200":["MEASUREMENT:*:READ"]`.
  - name: Measurement API
    description: 'The measurement API resource returns URIs and URI templates to collections of measurements, so that all measurements can be filtered and retrieved. Querying without filters can be slow, hence it is recommended to narrow the scope by using time [range queries](https://en.wikipedia.org/wiki/Range_query_(database)). Moreover, the scope can be significantly reduced by querying by source.'
    x-codegen-ignore: true
  - name: Measurement notification API
    description: |
      The Measurement notification API allows monitoring measurements of specific devices. The basic protocol for receiving notifications is described in [Real-time notifications](#tag/Real-time-notification-API).
      The Real-time notification API enables responsive communication by employing a POST request to:

      ```http
      notification/realtime
      ```

      To receive notifications for the measurements of all devices, the subscription channel needs to contain the managed object ID of the device or an asterisk (*) as placeholder.

      ```json
      "channel": "/measurements/{managedObjectId}"
      ```

      Additionally to the measurement object, the response will contain a `realtimeAction` flag to identify which action resulted in the given object (CREATE or DELETE). In case of a deletion, the data will only contain the ID of the deleted measurement.

      **Required role**: ROLE_MEASUREMENT_READ

      **Response sample:**

      ```json
      [{
        "channel": "/measurements/145075",
        "successful": true,
        "version": "1.0",
        "minimumVersion": "1.0",
        "ext": {
          "ack": true
        },
        "supportedConnectionTypes": [
          "long-polling",
          "smartrest-long-polling",
          "websocket"
        ],
        "data": [{
          "realtimeAction": "CREATE",
          "data": {
            "id": "1",
            "self": "...",
            "source": {
              "145075"
            },
            "creationTime": "2019-09-06T12:03:27.927+02:00",
            "c8y_TemperatureMeasurement": {
              "T": {
                "value": 25,
                "unit": "C"
              }
            },
            "time": "2019-09-06T12:03:17.927+02:00",
            "type": "TemperatureMeasurement"
          }
        }],
        "clientId": "Un1q31d3nt1f13r"
      }]
      ```
  - name: Measurements
    description: |
      Measurements are produced by reading sensor values. In some cases, this data is read in static intervals and sent to the platform (for example, temperature sensors or electrical meters). In other cases, the data is read on demand or at irregular intervals (for example, health devices such as weight scales). Regardless what kind of protocol the device supports, the agent is responsible for converting it into a "push" protocol by uploading data to Cumulocity.

      > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  - name: Measurements specifics
    description: |
      ## Data streaming

      The Measurements API allows to fetch data in the form of a data stream. The response format stays the same, but the data is transmitted by the server directly from the database element by element, so it can be received in the same way.

      Using stream JSON parsers like [Java JsonParser](http://docs.oracle.com/javaee/7/api/javax/json/stream/JsonParser.html) allows transmitting high data volumes in a single request. To activate streaming you must set the `Accept` header as `application/json-stream`.

      ```http
      GET /measurement/measurements
      Host: https://<TENANT_DOMAIN>
      Authorization: <AUTHORIZATION>
      Accept: application/json-stream
      ```

      ## Other response formats

      In order to get measurements in other formats, you can use one of the other supported Accept headers: `text/csv`, `application/vnd.ms-excel` or `application/xlsx`.

      **Sample CSV response**:

      ```text
      time,source,device_name,fragment.series,value,unit
      2020-03-15T17:03:14.000+02:00,424,testAgent,c8y_TemperatureMeasurement.T,37,C
      ```

      ## System of units

      All GET requests support the `X-Cumulocity-System-Of-Units` header which allows setting the system of units used in the response, that is, “imperial” or “metric”. Every measurement fragment which contains the `unit` property will be converted to the specified system of units.

      ```json
      "c8y_Temperature": {
        "T": {
          "unit": "ºC",
          "value": 2.0791169082
        }
      }
      ```

      The following table shows the most common conversions between both systems.

      |Metric|Imperial|
      |:-------|:-----|
      |m (meter)|ft (foot)|
      |km (kilometer)|mi (mile)|
      |cm (centimeter)|in (inch)|
      |°C (degree Celsius)|°F (degree Fahrenheit)|
      |K (Kelvin)|°R (degree Rankine)|
      |g (gram)|oz (ounce)|
      |kg (kilogram)|lb (pound)|
  - name: Real-time notification API
    description: |
      # Real-time operations

      Real-time notification services of Cumulocity have their own subscription channel name format and URL. The real-time notifications are available for [Alarms](#tag/Alarm-notification-API), [Device control](#tag/Device-control-notification-API), [Events](#tag/Event-notification-API), [Inventory](#tag/Inventory-notification-API) and [Measurements](#tag/Measurement-notification-API).

      Note that when using long-polling, all POST requests must contain the Accept header, otherwise an empty response body will be returned.
      All requests are sent to the <kbd>/notification/realtime</kbd> endpoint.

      > **&#9432; Info:** The long-polling interface is designed as a mechanism for custom applications to poll infrequent events from Cumulocity. The long-polling interface is not designed as a mechanism to stream large data volumes (>100kB/sec) or frequent data (>50 events/sec) out of Cumulocity. The usage of long-polling is not supported for such use cases.

      ## Handshake

      A real-time notifications client initiates the connection negotiation by sending a message to the `/meta/handshake` channel. In response, the client receives a `clientId` which identifies a conversation and must be passed in every non-handshake request.

      > **&#9432; Info:** The number of parallel connections that can be opened at the same time by a single user is limited. After exceeding this limit when a new connection is created, the oldest one will be closed and the newly created one will be added in its place. This limit is configurable and managed per installation. Its default value is 10 connections per user, subscription channel and server node.

      When using WebSockets, a property `ext` containing an authentication object must be sent. In case of basic authentication, the token is used with Base64 encoded credentials. In case of OAuth authentication, the request must have the cookie with the authorization name, holding the access token. Moreover, the XSRF token must be forwarded as part of the handshake message.

      ### Request example

      ```http
      POST /notification/realtime
      Authorization: <AUTHORIZATION>
      Content-Type: application/json

      [
        {
          "channel": "/meta/handshake",
          "version": "1.0"
        }
      ]
      ```

      ### Response example

      A successful response looks like:

      ```json
      [
        {
          "channel": "/meta/handshake",
          "clientId": "69wzith4teyensmz6zyk516um4yum0mvp",
          "minimumVersion": "1.0",
          "successful": true,
          "supportedConnectionTypes": [
            "long-polling",
            "smartrest-long-polling",
            "websocket"
          ],
          "version": "1.0"
        }
      ]
      ```

      When an error occurs, the response looks like:

      ```json
      [
        {
          "channel": "/meta/handshake",
          "error": "403::Handshake denied",
          "successful": false
        }
      ]
      ```

      ## Subscribe

      A notification client can send subscribe messages and specify the desired channel to receive output messages from the Cumulocity server. The client will receive the messages in succeeding connect requests.

      Each REST API that uses the real-time notification service has its own format for channel names. See [Device control](#tag/Device-control-notification-API) for more details.

      ### Request example

      ```http
      POST /notification/realtime
      Authorization: <AUTHORIZATION>
      Content-Type: application/json

      [
        {
          "channel": "/meta/subscribe",
          "clientId": "69wzith4teyensmz6zyk516um4yum0mvp",
          "subscription": "/alarms/<DEVICE_ID>"
        }
      ]
      ```

      ### Response example

      ```json
      [
        {
          "channel": "/meta/subscribe",
          "clientId": "69wzith4teyensmz6zyk516um4yum0mvp",
          "subscription": "/alarms/<DEVICE_ID>",
          "successful": true
        }
      ]
      ```

      ## Unsubscribe

      To stop receiving notifications from a channel, send a message to the channel `/meta/unsubscribe` in the same format as used during subscription.

      ### Request example

      Example Request:

      ```http
      POST /notification/realtime
      Authorization: <AUTHORIZATION>
      Content-Type: application/json

      [
        {
          "channel": "/meta/unsubscribe",
          "clientId": "69wzith4teyensmz6zyk516um4yum0mvp",
          "subscription": "/alarms/<DEVICE_ID>"
        }
      ]
      ```

      ### Response example

      ```json
      [
        {
          "channel": "/meta/unsubscribe",
          "subscription": "/alarms/<DEVICE_ID>",
          "successful": true
        }
      ]
      ```

      ## Connect

      After a Bayeux client has discovered the server's capabilities with a handshake exchange and subscribed to the desired channels, a connection is established by sending a message to the `/meta/connect` channel. This message may be transported over any of the transports returned by the server in the handshake response. Requests to the connect channel must be immediately repeated after every response to receive the next batch of notifications.

      ### Request example

      ```http
      POST /notification/realtime
      Authorization: <AUTHORIZATION>
      Content-Type: application/json

      [
        {
          "channel": "/meta/connect",
          "clientId": "69wzith4teyensmz6zyk516um4yum0mvp",
          "connectionType": "long-polling",
          "advice": {
            "timeout": 5400000,
            "interval": 3000
          }
        }
      ]
      ```

      ### Response example

      ```json
      [
        {
          "channel": "/meta/connect",
          "data": null,
          "advice": {
            "interval": 3000,
            "timeout": 5400000
          },
          "successful": true
        }
      ]
      ```

      ## Disconnect

      To stop receiving notifications from all channels and close the conversation, send a message to the `/meta/disconnect` channel.

      ### Request example

      ```http
      POST /notification/realtime
      Authorization: <AUTHORIZATION>
      Content-Type: application/json

      [
        {
          "channel": "/meta/disconnect",
          "clientId": "69wzith4teyensmz6zyk516um4yum0mvp"
        }
      ]
      ```

      ### Response example

      ```json
      [
        {
          "channel": "/meta/disconnect",
          "successful": true
        }
      ]
      ```

      ## Long-running connections

      To keep a long-running connection alive when there are no new notifications to deliver, the server will periodically send an empty `/meta/connect` response to the client.
      The client should send a new `/meta/connect` request immediately after receiving such a response, to ensure that the connection remains active and future notifications are delivered.
  - name: About notifications 2.0
    description: |
      # Overview

      > **⚠️ Important:** **Notice of reduced storage limits for Notifications 2.0 and microservice-based data broker**
      >
      > **Effective Date:** July 1st, 2024
      >
      > Please be aware that the storage limits for Notifications 2.0 will be significantly reduced. For detailed information about these changes and how they may impact your usage, please refer to [this announcement](https://www.cumulocity.com/docs/change-logs/?component=.component-messaging-service#cumulocity-undefined-advance-notice-of-reduced-storage-limits-for-notifications-2.0-and-microservice-based-data-broker).
      >
      > If you have any questions or concerns, please contact [product support](https://www.cumulocity.com/docs/additional-resources/contacting-support/).

      The Notifications 2.0 API allows applications or microservices to receive and process notifications generated by the use of the Cumulocity REST or MQTT APIs (device management, measurements, alarms, events and other platform APIs) in a reliable manner.

      The Cumulocity Messaging Service is an optional component of the Cumulocity platform that may need to be enabled before Notifications 2.0 can be used.
      Changes to the configuration of the load balancer or ingress controller may also be required to allow access to the Websocket endpoint used by Notifications 2.0.

      For the shared public cloud instances of the Cumulocity platform, the Messaging Service is enabled by default on release 10.13 and above.
      For dedicated and self-hosted instances, the Messaging Service and Notifications 2.0 are available for release 10.11 and above, but will need to be explicitly enabled.

      Please contact [product support](https://www.cumulocity.com/docs/additional-resources/contacting-support/) to inquire about using the Messaging Service and Notifications 2.0 capabilities in your Cumulocity environment.
      See the *Messaging Service - Installation & operations guide* for further technical details of the configuration required, but note that these tasks can only be performed by a Cumulocity platform operator, not by a normal user.

      Notifications 2.0 improves upon the [Real-time notification API](#tag/Real-time-notification-API) by providing stronger delivery semantics and ordering guarantees.
      It is also intended to be simpler to use than the "Bayeaux" protocol used in the Real-time notification API.
      New capabilities are added to Notifications 2.0 in each release of Cumulocity.
      However, it does not yet support all of the notifications available from the Real-time notification API so it is not yet a complete replacement for the older API.
      See the rest of this section and the detailed API documentation for full details of the notifications supported by this release of the Notifications 2.0 API.

      > **⚠️ Caution:** If you assign Notification 2.0 roles or permissions to users, they can create Notification 2.0 subscriptions and receive notifications for any device, including those to which assigned inventory roles do not grant access, bypassing the inventory role RBAC.

      ## Topics and subscriptions

      Internally, Notifications 2.0 uses a [publish-subscribe](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern)
      pattern, allowing use-cases to organize their desired selections of measurement, event, alarm, operation and/or inventory messages
      into topics according to functional interest.
      Creating a Notification 2.0 [subscription](#tag/Subscriptions)
      in Cumulocity creates a publisher (internally), that forwards Cumulocity messages that it matches (based
      on message qualities such as its source, type or even content, for example) to a specific topic.
      Each subscription can only forward messages to one topic, but multiple subscriptions can forward messages to the same topic.

      > **⚠️ Important:** The term 'subscription' is overloaded and can be confusing here.
      > It is called a subscription because internally the topic subscribes to a selection of Cumulocity messages - it does not relate to a Notification 2.0 end consumer.
      > This may be revised in a future release to avoid potential confusion.

      The diagram 'Notification 2.0 topics and subscriptions' below shows
      three subscriptions that have been created in Cumulocity and are forwarding notification messages into two topics in the Messaging Service.

      The 'temperature' topic is receiving measurements from the leftmost and centrally depicted subscriptions.
      Both of these have a "mo" (managed object) context and they both include messages from the measurement API only.
      A subscription with a managed object context can only forward messages from a specific managed object (such as a device).
      The leftmost subscription is forwarding measurements from a device with source ID '12345' and
      the centrally depicted subscription does the same but from device '67890'.

      The 'alarms' topic is receiving alarms from the rightmost subscription. It has a tenant context and includes messages from
      the alarm API. It forwards all alarms within the tenant that creates the subscription, regardless of how they are generated
      (you can create finer grained topics by using filters).
      The forwarded alarms include those raised by Cumulocity itself, and those published via REST or MQTT from other components in, or attached to,
      the platform, including any alarms raised by the depicted devices.

      ![Notification 2.0 topics and subscriptions diagram](images/notification2-subscriptions.svg)

      ## Consumers and tokens

      A topic's notification messages can be received by WebSocket based consumers that present a valid authorizing
      token for that specific topic when connecting to the Notification 2.0 WebSocket endpoint.
      This token is in the form of a string conforming to the JWT (JSON Web Token) standard. Tokens can be obtained from the
      Cumulocity [token](#tag/Tokens) REST API by authenticated users.

      Consumers receive the topic messages reliably, with at-least-once semantics, in order and must acknowledge each message in turn.
      Notification order is preserved from the point of view of any given device sending in REST and MQTT API requests.
      The protocol is text-based and described in detail in the [Consumer protocol](#section/Consumer-protocol) section.
      In typical usage, multiple consumers of a given topic operate independently in parallel, each receiving and acknowledging
      separate copies of those messages.

      > **⚠️ Important:** It is important to manage consumers carefully as they can place significant storage resource demands on a system.
      > Only create (connect) consumers if they are to be active, and unsubscribe them if they are no longer needed or not needed for long periods.
      > Unsubscribing is an explicit action - disconnecting a consumer client does not unsubscribe it.
      > See the [Consumer lifecycle](#section/Overview/Consumer-lifecycle) section for more details.


      The diagram below shows three consumers that have been created in the Messaging Service by four consumer clients.

      The rightmost client identifies its consumer as "alarmmonitor" and that consumer receives messages from the "alarms" subscription topic.

      The second to right client identifies its consumer as "tempaudit" and that consumer receives messages from the "temperature" subscription topic.

      The leftmost two consumer clients are two shares of a (logically single) [shared consumer](#section/Overview/Shared-consumer-tokens),
      and so share the same copy of topic messages. They both identify the same "tempmonitor" consumer; each receives a non-overlapping subset
      of the messages in the "temperature" topic.
      Collectively, they receive all of the messages in the topic.

      ![Notification 2.0 consumers and consumer clients diagram](images/notification2-consumers.svg)

      ## Consumer lifecycle

      When a subscription is created, Cumulocity starts to create and forward notifications within the subscription's scope
      to the Messaging Service subsystem. The Message Service does not necessarily retain these messages; it only retains a
      subscription topic's messages if the topic is persistent, and it has at least one consumer for the topic that is or has been connected.


      > **&#9432; Info:** The set of retained topic messages that have not been received and acknowledged by a given consumer are known as the consumer's *backlog*.
      >
      > Only consumers of persistent subscription topics have backlogs that are maintained across client reconnections.
      >
      > Consumers of non-persistent subscription topics get a new backlog pointing only to the next (latest) topic message when they connect/reconnect and any previous backlog is discarded, removing any message references. They can only cause backlog size problems if they remain connected but continually consume at a rate lower than the rate at which new messages arrive.

      Persistent subscription topic messages are only stored once in the Messaging Service, but all associated consumers' backlogs,
      whether the consumer is connected or not, reference each message until they have received and acknowledged it.
      Therefore, all consumer backlogs should be considered to have a storage cost from when they first connect until
      they explicitly express no further interest in the topic by unsubscribing.
      The Messaging Service discards a given message only when there are no backlogs that reference it anymore.

      The following diagram shows the lifecycle of a consumer backlog in relation to its associated client connection(s).
      The backlog is created when the consumer first connects to the Messaging Service and is only destroyed when it is explicitly unsubscribed.
      The consumer's backlog is maintained, even if its client connection is interrupted. This is needed for reliable messaging,
      allowing the consumer to not miss messages during connection outages, but comes at the cost of explicit lifecycle management.

      ![Notification 2.0 consumer backlog lifecycle](images/notifications2-backlog-lifecycle.svg)

      To unsubscribe its consumer, pass its token as the **token** parameter to the [/notification2/unsubscribe](#operation/postNotificationTokenUnsubscribeResource) REST endpoint.


      ## Creating subscriptions

      The JSON fields sent in a [create subscription request](#operation/postNotificationSubscriptionResource)
      determine which Cumulocity messages are forwarded to a topic, and the forwarded message content.
      This request must be made by an authenticated Cumulocity user with the `ROLE_NOTIFICATION_2_ADMIN` role.

      The **context** field broadly determines the type of Cumulocity message a subscription might match and forward.
      There are two valid **context** values: "mo" (managed object) and "tenant". Some subscription fields have
      constraints that vary according to the value of the **context** field. Where this is the case, it is pointed out in that field's
      documentation in the [create subscription](#operation/postNotificationSubscriptionResource) documentation.

      The **source** field can only be used if the **context** is "mo". It must have a nested **id** field containing the
      value of a managed object's global identifier (sometimes referred to as a "device ID" or "source ID").
      This is used to target inclusion of messages from the given managed object.

      **subscription** is the first of two fields that identify which topic this subscription will forward messages to.
      Multiple subscriptions contribute to a single topic if they have the same values for both the **subscription** and **nonPersistent** fields.

      The **nonPersistent** field determines if the topic is [persistent or non-persistent](#section/Overview/Persistent-and-non-persistent-subscriptions).
      Subscriptions with the same **subscription** field value, but different **nonPersistent** values forward to two different topics.
      It is, therefore, the second of the two fields that identifies the subscription topic.

      The **filter** field can provide a [subscription filter](#section/Overview/Subscription-filters), allowing more finely
      grained selection of the included messages, based on the message **type** and API (is it a measurement or alarm, for example).

      The **fragmentsToCopy** field allows the forwarded messages to be transformed so that they contain only a specific subset
      of the fragments present in the original Cumulocity messages they are generated from. This can be useful, for example,
      for security, bandwidth saving or functionality scoping reasons.

      The following summarizes the subscription fields.
      <table>
      <thead>
      <tr>
      <th nowrap="nowrap">Field Name&nbsp;</th>
      <th>Value</th>
      <th>Required/Default</th>
      <th>Description</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td nowrap="nowrap">context</td>
      <td>"mo" or "tenant"</td>
      <td>Required</td>
      <td>Only values "mo" and "tenant" are supported</td>
      </tr>
      <tr>
      <td nowrap="nowrap">source</td>
      <td>A managed object global identifier</td>
      <td>Required if context is "mo"</td>
      <td>Has a mandatory child <b>id</b> field</td>
      </tr>
      <tr>
      <td nowrap="nowrap">subscription</td>
      <td>String</td>
      <td>Required</td>
      <td>Determines messaging-service topic used</td>
      </tr>
      <tr>
      <td nowrap="nowrap">nonPersistent</td>
      <td>Boolean</td>
      <td>false</td>
      <td>Determines if a persistent or non-persistent topic is used</td>
      </tr>
      <tr>
      <td nowrap="nowrap">filter</td>
      <td>JSON object</td>
      <td>All messages</td>
      <td>Includes messages based on message values</td>
      </tr>
      <tr>
      <td nowrap="nowrap">fragmentsToCopy</td>
      <td>JSON list of strings</td>
      <td>All fragments</td>
      <td>Determines which fragments are included in forwarded messages</td>
      </tr>
      </tbody>
      </table>

      Notifications for new managed objects creations can never be forwarded by subscriptions with an "mo" **context** as the
      managed object is only given an ID when it is created and that ID is needed as a field to create the subscription.
      Therefore, to receive notifications informing of new managed object creations, create a subscription with "tenant" **context**
      to listen for them.
      An application can use this to discover new managed objects.
      It can then choose to create subscriptions with "mo" **context** for those managed objects.

      Subscriptions with "tenant" **context** can also use the alarms API, the events API, and/or the operations API to forward all
      alarms, events, and/or operations, respectively, which occur within the tenant, applying filters as desired.

      The following summarizes the context and API support.

      | Context  | ManagedObject Create | ManagedObject Update & Delete   | Alarms    | Events    | Measurements  | Operations   |
      |----------|----------------------|---------------------------------|-----------|-----------|---------------|--------------|
      | mo       | &cross;              | &check;                         | &check;   | &check;   | &check;       | &check;      |
      | tenant   | &check;              | &cross;                         | &check;   | &check;   | &cross;       | &check;      |

      ## Subscription filters

      Subscription filters provide fine-grained selection of the Cumulocity messages a subscription will forward.
      Filters can be provided as the **subscriptionFilter** field in a subscription's JSON object at creation time.
      It is a JSON object with **apis** and **typeFilter** fields.
      Filters can provide either or both filter fields.

      The **apis** field is a JSON array that specifies which Cumulocity API messages to include.
      Use an array containing just the wildcard value, "*", to include messages from all APIs.
      To include messages from a subset of the APIs, use an array containing any single or multiple selection from
      "alarms", "alarmsWithChildren", "events", "eventsWithChildren", "measurements", "managedobjects" and "operations".

      For example, to include messages from all APIs:

      ```json
      {
        "context": "mo",
        "subscription": "subscription01",
        "source": {
          "id": 2468
        },
        "filter": {
          "apis": ["*"]
        }
      }
      ```

      To include only messages from the measurements and alarms APIs:

      ```json
      {
        "context": "mo",
        "subscription": "subscription02",
        "source": {
          "id": 2468
        },
        "filter": {
          "apis": ["measurements", "alarms"]
        }
      }
      ```

      The "alarmsWithChildren" and "eventsWithChildren" **apis** values allow subscriptions with managed object **context**
      to filter in, respectively, alarms or events for all recursively descendant child managed objects of the **source.id**
      managed object in addition to those from the **source.id** managed object itself.

      The **typeFilter** string field is matched against the original message's **type** field. It can be a single value, or a
      limited (supporting only `or`) [OData](https://en.wikipedia.org/wiki/Open_Data_Protocol) expression.

      For example, to include messages with **type** "temperature" and messages with **type** "pressure":

      ```json
      {
        "context": "mo",
        "subscription": "subscription03",
        "source": {
          "id": 2468
        },
        "filter": {
          "type": "'temperature' or 'pressure'"
        }
      }
      ```

      To include messages of **type** "temperature" only:

      ```json
      {
        "context": "mo",
        "subscription": "subscription04",
        "source": {
          "id": 2468
        },
        "filter": {
          "type": "'temperature'"
        }
      }
      ```

      ## Persistent and non-persistent subscriptions

      A subscription can be persistent or non-persistent, implying that the Messaging Service topic for it is either persistent
      or non-persistent, respectively.
      These have different qualities which can be useful to satisfy the varying needs of differing use-cases.


      Persistent subscriptions are the default. They are used for reliable messaging, ensuring that consumers never miss a
      message if their connection is interrupted.
      They use replicated secondary storage to maintain backlogs (within the constraints of any configured storage limits)
      and to maintain the consumers' positions in their topics.
      When a consumer of a persistent subscription topic has their connection interrupted,
      whether that is due to network issues or deliberate actions by the consumer,
      upon reconnection they will continue to receive notifications from the topic position they were at before the outage
      (specifically, from the message after the last one they acknowledged successfully before the outage).

      Non-persistent subscriptions are only buffered in memory. A client consumer's position is not persisted across
      interruptions of the client connection.
      When a consumer of a non-persistent subscription has their connection interrupted,
      upon reconnection they will start receiving notifications from the most recent message of the subscription,
      missing all other notifications that occurred during the connection outage.
      This is the case for all such temporarily disconnected consumers,
      even if other consumers of the same non-persistent subscription
      are still receiving older messages that occurred while it was not connected.

      > **&#9432; Info:** If you create both a persistent and a non-persistent subscription with the same **subscription** field, they are separate, independent subscriptions, backed by separate topics.
      >
      > When creating a token for a non-persistent subscription topic, to access notifications from the correct topic, the token's **nonPersistent** field must be set to `true`.
      > As is the case for the subscription, this field defaults to `false`, meaning the token will be for a persistent subscription topic by default.

      ## Deleting subscriptions

      Deleting a subscription prevents it from adding further notification messages to its associated topic. Many subscriptions
      can contribute notifications to a given topic so this does not control the topic lifecycle.
      Deleting all the subscriptions associated with a topic ensures no more notifications are added to it. This does not
      delete the topic either.

      Even though the topic no longer accumulates new messages, there may still be consumers draining
      the last of the messages from it. When all messages are consumed by all consumers, the topic is empty and consumes
      negligible space in the Messaging Service.

      Subscriptions can be deleted by sending a [delete subscription request](#operation/deleteNotificationSubscriptionResource), using the subscription's **id** as the URL filename. For example, to delete the subscription with ID 8765:

      ```text
       DELETE /notification2/subscriptions/8765 HTTP/1.1
       Host: <HOST>
       Authentication: Basic: <AUTHENTICATION>
      ```

      When a tenant is deleted from Cumulocity, all its subscriptions are deleted. However, topics and consumers may
      still be active in the Messaging Service until all messages are consumed.

      ## Creating Tokens

      The JSON fields sent in a [create token request](#operation/postNotificationTokenResource)
      determine which subscription topic a consumer can receive messages from, the token's duration,
      the [shared](#section/Overview/Shared-consumer-tokens) nature of the consumer, and an identifier for the consumer.
      This request must be made by an authenticated Cumulocity user with the `ROLE_NOTIFICATION_2_ADMIN` role.

      The **subscription** field aligns with the same field in the subscription object, so broadly specifies the subscription
      topic the consumer will receive notifications from. The **nonPersistent** field is also a factor in identifying the topic.

      The **nonPersistent** field aligns with the same field in the subscription object so identifies whether the subscription topic
      is [persistent or non-persistent](#section/Overview/Persistent-and-non-persistent-subscriptions) and therefore is a factor in identifying the topic only.
      There is no such thing as a peristent or non-peristent consumer
      and tokens cannot affect the nature they experience of topics using this field.

      The **subscriber** field provides a unique (within the scope of this topic) identity for the consumer, allowing
      it to be recognized across connection interruptions, so allowing message delivery to be resumed after such interruptions
      and thus be reliable.

      The **shared** field determines if multiple clients can connect in parallel as the consumer identified in the
      **subscriber** field, acting collectively to share the notification message processing load.

      The **expiresInMinutes** field is the period that this token remains valid for, defaulting to 1440 minutes (1 day).

      The following summarizes the token fields.
      <table>
      <thead>
      <tr>
      <th nowrap="nowrap">Field Name&nbsp;</th>
      <th>Value</th>
      <th>Required/Default</th>
      <th>Description</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <td nowrap="nowrap">subscription</td>
      <td>string</td>
      <td>Required</td>
      <td>Identifies topic</td>
      </tr>
      <tr>
      <td nowrap="nowrap">nonPersistent</td>
      <td>Boolean</td>
      <td>false</td>
      <td>Must be true to identify a non-persistent topic</td>
      </tr>
      <tr>
      <td nowrap="nowrap">subscriber</td>
      <td>String</td>
      <td>Required</td>
      <td>Identifies the consumer bearing this token</td>
      </tr>
      <tr>
      <td nowrap="nowrap">shared</td>
      <td>Boolean</td>
      <td>false</td>
      <td>True if multiple clients can act collectively as this consumer</td>
      </tr>
      <tr>
      <td nowrap="nowrap">expiresInMinutes</td>
      <td>Integer</td>
      <td>1440</td>
      <td>The token duration</td>
      </tr>
      </tbody>
      </table>

      ## Token expiration

      The period a token remains valid for (its lifetime) is determined at creation time by the optional **expiresInMinutes** field, which defaults to 1440 minutes (one day).
      This can be used to limit exposure to potential security issues related to them being leaked to parties that are not authorized to access the system.
      Consequently, tokens may need to be re-created or refreshed periodically.

      > **&#9432; Info:** Tokens only allow a consumer to connect to the Messaging Service. If a token expires while its consumer is connected, the consumer is not automatically logged out or disconnected.
      >
      > If a consumer disconnects, and their token has expired, the token must be recreated or refreshed in order that the consumer can reconnect.

      Tokens can be refreshed by calling the token create request with the same parameters as originally (a different **expiresInMinutes** value can be given if a different duration is desired).
      The token string is a JWT (JSON Web Token) token so if the parameters used are not easily kept available, they can be extracted from the token string as outlined in the Java code below:

      ```java
      // The token string's sections are delimited by dots
      String[] tokenParts = token.split("\\.");
      // Base64 decode the second section
      byte[] decoded = Base64.getDecoder().decode(tokenParts[1]);
      // Create a string from the decoded bytes to get a JSON string of the token fields
      String tokenJson = new String(decoded);
      // ... optionally create an Object from the string or bytes using a JSON  parser
      ```

      If you are using the Cumulocity Java SDK [TokenApi](https://github.com/Cumulocity-IoT/cumulocity-clients-java/blob/develop/java-client/src/main/java/com/cumulocity/sdk/client/messaging/notifications/TokenApi.java) class, it has a public refresh method which does the above for you, internally on the client side.

      ## Shared consumer tokens

      Shared consumer tokens allow parallelization of the consumer client workload.
      This is useful if the notifications would otherwise arrive at a higher rate than a single consuming client application can process them.
      It has no impact on the rate of notification throughput within, and thus their egress from, Cumulocity core.

      When you create a token, you can add the optional Boolean body parameter `shared` to the request.
      If it is set to `true`, the created token is shared.
      If it is not present or `false`, the token is exclusive (not shared).

      If a consumer's token is not shared, the consumer is an *exclusive* consumer.
      Only one consumer client can connect using an exclusive token. An attempt to connect further consumers with the same exclusive token results in an error.
      An exclusive consumer receives a copy of all notifications from the subscription topic its token is for.

      If a consumer's token is shared, the consumer is a *shared consumer*. Additional consumer clients can connect using the same token.
      If only one shared consumer client is connected, it receives a copy of all notifications from the subscription topic.
      As additional consumer clients connect using the same token, the consumer notification load is rebalanced so that
      each consumer client receives a non-overlapping subset (share) of the notifications from the subscription topic.
      The set of consumer clients sharing a token can be thought of as a single logical consumer.
      Collectively, the set receives all notifications for the subscription topic.

      The notification load is spread across the shared consumer clients according to the **id** of the source that generated the notification, typically a device **id**.
      All notifications for a given **id** are delivered to the same consumer. Each consumer may receive notifications for many different **id**s.
      This means that there is no benefit using shared tokens unless the notifications feeding the subscription topic are coming from multiple sources.
      Note that the load spreading algorithm may result in an asymmetric balance of notification load across the shares when there are few source **id**s in the subscription topic.
      The load should generally become more evenly distributed as the number of sources increases.

      To keep the messages from a given set of source **id**s 'sticky' to a specific consumer client in the share in the face of connection interruptions,
      the consumer clients can provide an optional `consumer` parameter in their connection URL string, in addition to their usual `token` parameter.

      For example: two consumers identifying themselves as *instance1* and *instance2* connect using URL paths
      `notification2/consumer?token=xyz&consumer=instance1` and `notification2/consumer?token=xyz&consumer=instance2`.

      Subscriptions are always unaware of the nature and number of their consumers: any number of shared and exclusive tokens
      can be created for the same subscription topic and they all operate independently,
      each receiving their own copy of the notifications.
      This means you can have multiple shared tokens for the same subscription topic and their load is only divided within the scope of each shared token.

      ## Building consuming applications and microservices

      A consumer client requires only a valid URL and JWT string to connect.
      It can be implemented using any WebSocket library or programming language as the protocol is text-based and relatively simple.
      The implementation can be a microservice running internally to, or an application running externally from, Cumulocity.

      Java developers do not need to code to the protocol specification directly.
      The API and the protocol have been implemented in the [Cumulocity Clients Java API](https://github.com/Cumulocity-IoT/cumulocity-clients-java/tree/develop/java-client/src/main/java/com/cumulocity/sdk/client/messaging/notifications)
      . Examples using that can be found
      in the [cumulocity-examples repository](https://github.com/Cumulocity-IoT/cumulocity-examples/tree/develop/notification2-examples).


      # Consumer protocol

      The Cumulocity Notifications 2.0 API uses a secure [WebSocket](https://en.wikipedia.org/wiki/WebSocket) to consume notifications generated by the Cumulocity API.

      The new endpoint is accessible using the external Cumulocity fully qualified domain name of your Cumulocity environment and the standard SSL port 443 using a secure WebSocket connection. It is also available on the unsecured port 80 and to microservices using "cumulocity:8111" but in most cases a secure connection is preferred.

      The [URI scheme](https://en.wikipedia.org/wiki/List_of_URI_schemes) therefore is "wss" and consumers use URLs starting with "wss://" followed by the fully qualified domain name of the Cumulocity environment or tenant, followed by a fixed URL path and a query string.

      The fixed URL path is <kbd>/notification2/consumer/</kbd> and there are only two query string arguments:

      * `token` (required). Its value must be a valid token in the form of a JWT token string as returned by a create token request to the [Tokens methods](#tag/Tokens) of the Notifications 2.0 API. Including the token as a query string parameter avoids having to set an HTTP header which can be an issue for some WebSocket clients or proxies.

      * `consumer` (optional). Its value is a non blank unique name for the consumer.

      In summary, the URLs used by consumers follow the following patterns:

      ```
      wss://your.cumulocity.environment.fullqualifieddomainname/notification2/consumer/?token=yourJwtTokenRequestedFromNotification2TokenService
      ```

      or

      ```
      wss://your.cumulocity.environment.fullqualifieddomainname/notification2/consumer/?token=yourJwtTokenRequestedFromNotification2TokenService&consumer=aUniqueNameForThisConsumer
      ```

      ## WebSocket timeouts

      There is a timeout of 5 minutes set on idle WebSocket connections after which the connection will be closed by the server side. Therefore the consumer must be prepared to handle closed connections which is required for fault-tolerant operation in any case. All consuming microservices or applications should handle the WebSocket being closed and re-connect as necessary. Alternatively, if you would like to keep the connection from being closed due to idle timeout, implement a ping-pong handler in the WebSocket consumer. For example, you can implement this mechanism in Jetty by following [Jetty Programming Guide > Client Libraries > WebSocket Client > WebSocket Session > Sending Ping/Pong](https://eclipse.dev/jetty/documentation/jetty-11/programming-guide/index.html#pg-websocket-session-ping). A few libraries also provide built-in support for keeping the connection open. [Java-WebSocket](https://github.com/TooTallNate/Java-WebSocket), for example, does this by sending the ping requests to the server every minute by default.


      ## Notification acknowledgements

      The WebSocket service sends a sequence of UTF-8 encoded textual notification messages to the consumer.
      Each notification message includes headers and a data payload.
      Headers occur first in the message and are separated by new line characters. The data payload is last in the message,
      separated from the last header by 2 new line characters, showing one blank line occurs between the last header and the payload.
      The first header in the message is always the acknowledgement header.

      When the client has finished processing a notification message,
      it must send that message's acknowledgement header back to the server on the same connection the message was received on.
      Sending the acknowledgement tells the server that the consumer has successfully received and processed that message,
      allowing the server to forget the message.
      Each acknowledgement is unique to a particular notification and consumer. Note that batch and cumulative acknowledgements are not supported.

      If too many of a consumer's notifications (1000 by default) remain unacknowledged,
      the flow of notification messages to that consumer will stop until some of its unacknowledged messages are acknowledged.
      It is therefore best practise to process and acknowledge them quickly, to minimise the potential for a connection interruption causing a need to redeliver them.
      An acknowledgement should not be sent until its notification has been successfully processed.
      Otherwise, for example, if the client crashed during or before such processing,
      the message may be lost as acknowledged messages are not (usually) resent by the server.

      The hello-world-notification-microservice example in the [cumulocity-examples repository](https://github.com/Cumulocity-IoT/cumulocity-examples/tree/develop/hello-world-notification-microservice)
      shows an example of how to send the acknowledgement back to the server in a self-contained WebSocket text message.
      It should be sent without quotation marks, as it is not a JSON message, and without any trailing new-line characters.

      ## Notification message header and content

      A notification (transmitted service to client) consists of a header and a body (similar to an HTTP request).
      The header is one or more (in practice at least 3) lines of text, separated by a `\n` (newline) character.
      The end of the header is demarcated by a double new line `\n\n`.

      The notification body follows the header.
      This also consists of UTF text - for example a JSON document.
      If the notification is binary data or includes binary data then it will be [Base64 encoded](https://en.wikipedia.org/wiki/Base64).

      The header lines for a notification are as follows (separated by `\n` newlines):

      * Required message identifier for message acknowledgement. This opaque value is an encoded binary 64 bit value. After the consumer has finished processing a notification, it must send this header back to the server to [acknowledge the notification](#section/Consumer-protocol/Notification-acknowledgements).

      * The [Notification description header](#notification-description-header) on the second header line. This is a string describing what type of notification this is and its source. Measurements ("measurements"), events ("events") and alarms ("alarms") are examples of notifications, as are inventory creates, updates and deletes ("managedObjects"). There is a direct correspondence with realtime notifications which features similar notification descriptions. These are not enumerated here and are expected to increase in number in the future. For REST API notifications, they follow a three-part format, separated by "/". For more details on notification descriptions see [Notification description header](#notification-description-header).

      * An action string is the third header. Examples are CREATE, UPDATE and DELETE. More actions may be added in the future. Together with the notification type they describe the logical event that generated the notification, such as a CREATE of an alarm or measurement.

      Depending on the second header there may be further headers to follow but currently notifications only use the above three.
      In order to be future proof and forward compatible, we encourage consumer code to cope with more headers by parsing them out but ignoring them.

      See the *hello-world-notification-microservice* example in the [cumulocity-examples repository](https://github.com/Cumulocity-IoT/cumulocity-examples/tree/develop/hello-world-notification-microservice) on how to do this.

      After the headers, the notification body follows as UTF-8 text. This is typically a JSON document.

      ### Notification description header

      The second header line is the notification description string in the form of a `/`-separated path. For API notifications descriptions have three parts: tenantId, type and sourceId.

      * tenantId - this the identifier for the tenant under which the notification was generated.

      * type - the platform type of notification generated. For example, event, measurement, alarm or managed object.

      * sourceId - the identifier of the "source" object that generated or is the subject of the notification. Source is a very loose term here, much as in "event sourcing" but generally indicates which managed object the notification is about.

      Some examples are provided in [Traces](#section/Traces) and backwards compatibility to real-time notifications is provided for.

      ## Dealing with notification duplication

      When a WebSocket connection is lost, whether that is due to deliberate connection closure or connection failure,
      messages that were received but not successfully acknowledged before the connection loss are sent to the consumer again when it reconnects.
      This can result in duplicate messages being received by the consumer.
      Those duplicates can sometimes include acknowledged messages as these may be on-the-wire from the consumer to the server when the connection is lost.

      Notification messages do not contain any specific unique identifiers to aid in de-duplication.
      Therefore, any de-duplication of messages must be done by the consumer based upon the [Notification description header](#notification-description-header) and payload.
      Note that the acknowledgement header is not guaranteed to be unique across consumer reconnections, which is when duplicates are most likely.

      Some events are easy to de-duplicate, such as inventory events where a unique source object is first created and then deleted.
      It will often be possible to use the notification message headers to determine these cases.
      However, inventory updates or logically sequenced events such as alarms and measurements will typically require application-specific understanding of the payload fields.
      Ideally the payload would include a field specifically for that purpose. If it is not possible to include such a field in the payload,
      then other existing fields will have to be used, maybe on a best effort basis.

      A specific field in the payload would typically be a [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) or increasing sequence number.
      The latter may aid the efficiency of de-duplication by using ordering,
      though the sequence numbers will be unrelated across publishers, typically IoT devices, when the messages are originated from more than one publisher.
      Any messages received from the same publisher with a lower sequence number than the last one processed from that publisher can be quickly discarded,
      assuming the sequence has not rolled over. It is also easier for a human to understand that the ordering is correct and all messages are present.

      # Traces

      The following is a sample of a trace of messages. The dashed lines are not a part of the message, they are a visual aid to separate the messages in the trace.
      ```
      ------------------------
      CJ1eEAAgADAB
      /tenant-a170/managedobjects/111
      CREATE

      {"additionParents":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/additionParents"},"owner":"admin","childDevices":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/childDevices"},"childAssets":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/childAssets"},"creationTime":"2021-09-03T12:28:58.692Z","lastUpdated":"2021-09-03T12:28:58.692Z","childAdditions":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/childAdditions"},"name":"a switch","assetParents":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/assetParents"},"deviceParents":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/deviceParents"},"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111","id":"111","com_cumulocity_model_BinarySwitch":{"state":"ON"}}
      ------------------------
      CKReEAAgADAB
      /tenant-a170/measurements/111
      CREATE

      {"self":"http://cumulocity.default.svc.cluster.local/measurement/measurements/117","time":"2021-09-03T12:29:01.664Z","id":"117","source":{"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111","id":"111"},"type":"c8y_TenantUsageStatisticsMeasurement","resourcesUsage":{"memory":0,"cpu":0,"usedBy":[]}}
      ------------------------
      CI9eEAAgADAB
      /tenant-a170/events/111
      CREATE

      {"creationTime":"2021-09-03T12:29:01.932Z","source":{"name":"a switch","self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111","id":"111"},"type":"com_cumulocity_model_DoorSensorEvent","self":"http://cumulocity.default.svc.cluster.local/event/events/118","time":"2021-09-03T12:29:01.664Z","id":"118","text":"Door sensor was triggered"}
      ------------------------
      CAAQACAAMAE=
      /tenant-a170/eventsWithChildren/111
      CREATE

      {"creationTime":"2021-09-03T12:29:01.932Z","source":{"name":"a switch","self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111","id":"111"},"type":"com_cumulocity_model_DoorSensorEvent","self":"http://cumulocity.default.svc.cluster.local/event/events/118","time":"2021-09-03T12:29:01.664Z","id":"118","text":"Door sensor was triggered"}
      ------------------------
      CLJeEAAgADAB
      /tenant-a170/managedobjects/111
      UPDATE

      {"additionParents":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/additionParents"},"owner":"admin","childDevices":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/childDevices"},"childAssets":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/childAssets"},"creationTime":"2021-09-03T12:28:58.692Z","lastUpdated":"2021-09-03T12:28:58.692Z","childAdditions":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/childAdditions"},"name":"a switch","assetParents":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/assetParents"},"deviceParents":{"references":[],"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111/deviceParents"},"self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111","id":"111","c8y_ActiveAlarmsStatus":{"major":1},"com_cumulocity_model_BinarySwitch":{"state":"ON"}}
      ------------------------
      CMFeEAAgADAB
      /tenant-a170/alarms/111
      CREATE

      {"severity":"MAJOR","creationTime":"2021-09-03T12:29:02.092Z","count":1,"history":{"auditRecords":[],"self":"http://cumulocity.default.svc.cluster.local/audit/auditRecords"},"source":{"name":"a switch","self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111","id":"111"},"type":"com_cumulocity_events_TamperEvent","self":"http://cumulocity.default.svc.cluster.local/alarm/alarms/119","time":"2021-09-03T12:29:01.664Z","id":"119","text":"Tamper sensor triggered","status":"ACTIVE","com_mycorp_MyProp":{"key1":"value1"}}
      ------------------------
      CLxdEBQgADAB
      /tenant-a170/alarms/111
      CREATE

      {"severity":"MAJOR","creationTime":"2021-09-03T12:29:02.092Z","count":1,"history":{"auditRecords":[],"self":"http://cumulocity.default.svc.cluster.local/audit/auditRecords"},"source":{"name":"a switch","self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111","id":"111"},"type":"com_cumulocity_events_TamperEvent","self":"http://cumulocity.default.svc.cluster.local/alarm/alarms/119","time":"2021-09-03T12:29:01.664Z","id":"119","text":"Tamper sensor triggered","status":"ACTIVE","com_mycorp_MyProp":{"key1":"value1"}}
      ------------------------
      CMJdEAAgADAB
      /tenant-a170/alarmsWithChildren/111
      CREATE

      {"severity":"MAJOR","creationTime":"2021-09-03T12:29:02.092Z","count":1,"history":{"auditRecords":[],"self":"http://cumulocity.default.svc.cluster.local/audit/auditRecords"},"source":{"name":"a switch","self":"http://cumulocity.default.svc.cluster.local/inventory/managedObjects/111","id":"111"},"type":"com_cumulocity_events_TamperEvent","self":"http://cumulocity.default.svc.cluster.local/alarm/alarms/119","time":"2021-09-03T12:29:01.664Z","id":"119","text":"Tamper sensor triggered","status":"ACTIVE","com_mycorp_MyProp":{"key1":"value1"}}
      ```
  - name: Notification 2.0 API
    description: 'The notification 2.0 API resource returns URIs and URI templates to collections of notifications, so that all notifications or notifications of a specified context and/or source device can be retrieved.'
    x-codegen-ignore: true
  - name: Tokens
    description: 'In order to receive subscribed notifications, a consumer application or microservice must obtain an authorization token that provides proof that the holder is allowed to receive subscribed notifications.'
  - name: Subscriptions
    description: 'Methods to create, retrieve and delete notification subscriptions.'
  - name: Retention rules
    description: |
      It is possible to define rules that make the platform remove certain data. A retention rule shows which data will be deleted. For example, a retention rule with `dataType=EVENT` and `maximumAge=30` removes from the system all events older than 30 days.

      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Tenant API
    description: 'The tenant API resource returns URIs and URI templates to collections of tenants, so that all tenants can be filtered and retrieved.'
    x-codegen-ignore: true
  - name: Tenants
    description: |
      Tenants are physically separated data spaces with a separate URL, with own users, a separate application management and no sharing of data by default. Users in a single tenant by default share the same URL and the same data space.

      ### Tenant ID and tenant domain

      The **tenant ID** is a unique identifier across all tenants in Cumulocity and it follows the format t&lt;number>, for example, t07007007. It is possible to specify the tenant ID while creating a subtenant, but the ID cannot be changed after creation. If the ID is not specified (recommended), it gets auto-generated for all tenant types.

      The location where a tenant can be accessed is called **tenant domain**, for example, _mytenant.cumulocity.com_. It needs to be unique across all tenants and it can be changed after tenant creation.
      The tenant domain may contain only lowercase letters, digits and hyphens. It must start with a lowercase letter, hyphens are only allowed in the middle, and the minimum length is 2 characters. Note that the usage of underscore characters is deprecated but still possible for backward compatibility reasons.

      In general, the tenant domain should be used for communication if it is known.

      > **⚠️ Important:** For support user access, the tenant ID must be used and not the tenant domain.

      See [Tenant > Current tenant](#operation/getCurrentTenantResource) for information on how to retrieve the tenant ID and domain of the current tenant via the API.

      In the UI, the tenant ID is displayed in the user dropdown menu, see [Getting started > Get familiar with the UI > User options and settings](https://www.cumulocity.com/docs/get-familiar-with-the-ui/user-settings/) in the Cumulocity user documentation.

      ### Access rights and permissions

      There are two types of roles in Cumulocity – global and inventory. Global roles are applied at the tenant level. In a Role Based Access Control (RBAC) approach you must use the inventory roles in order to have the correct level of separation. Apart from some global permissions (like "own user management") customer users will not be assigned any roles. Inventory roles must be created, or the default roles used, and then assigned to the user in combination with the assets the roles apply to. This needs to be done at least once for each customer.

      In a multi-tenancy approach, as the tenant is completely separated from all other customers you do not necessarily need to be involved in setting up the access rights of the customer. If customers are given administration rights for their tenants, they can set up permissions on their own. It is not possible for customers to have any sight or knowledge of other customers.

      In the RBAC approach, managing access is the most complicated part because a misconfiguration can potentially give customers access to data that they must not see, like other customers' data. The inventory roles allow you to granularly define access for only certain parts of data, but they don't protect you from accidental misconfigurations. A limitation here is that customers won't be able to create their own roles.

      For more details, see [RBAC versus multi-tenancy approach](https://www.cumulocity.com/docs/concepts/tenant-hierarchy/#comparison-of-various-use-cases).

      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Tenant applications
    description: |
      References to the tenant subscribed applications.
      > **&#9432; Info:** The Accept header should be provided in all POST requests, otherwise an empty response body will be returned.
  - name: Trusted certificates
    description: |
      API methods for managing trusted certificates used to establish device connections via MQTT.

      More detailed information about trusted certificates and their role can be found in [Device management > Device management application > Managing device data](https://www.cumulocity.com/docs/device-management-application/managing-device-data/) in the Cumulocity user documentation.

      > **&#9432; Info:** The Accept header must be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Device statistics
    description: |
      Device statistics are collected for each inventory object with at least one measurement, event or alarm. There are no additional checks if the inventory object is marked as device using the `c8y_IsDevice` fragment. When the first measurement, event or alarm is created for a specific inventory object, Cumulocity is always considering this as a device and starts counting.

      Device statistics are counted with daily and monthy rate. All requests are considered when counting device statistics, no matter which processing mode is used.

      The following requests are counted:

      * Alarm creation and update
      * Event creation and update
      * Measurement creation
      * Bulk measurement creation is counted as multiple requests
      * Bulk alarm status update is counted as multiple requests
      * MQTT and SmartREST requests with multiple rows are counted as multiple requests

      ### Frequently asked questions

      #### Are operations on device firmware counted?

      **No**, device configuration and firmware update operate on inventory objects, hence they are not counted.

      #### Are requests done by the UI applications, for example, when browsing device details, counted?

      **No**, viewing device details performs only GET requests which are not counted.

      #### Is the clear alarm operation done from the UI counted?

      **Yes**, a clear alarm operation in fact performs an alarm update operation and it will be counted as device request.

      #### Is there any operation performed on the device which is counted?

      **Yes**, retrieving device logs requires from the device to create an event and attach a binary with logs to it. Those are two separate requests and both are counted.

      #### When I have a device with children are the requests counted always to the root device or separately for each child?

      Separately for each child.

      #### Why do device statistics show significantly smaller request numbers than the total number of created and updated request from usage statistics?

      The important aspect here is the moment of recording values for the counters. For inbound data usage statistics we count every request that passed authorization, including invalid requests, as stated in usage statistics description.

      For device statistics it is different. We count requests after data is successfully stored in the database (or transient), which means the request was valid and there was no problem with persistence. 

      In summary, if you observe that your usage statistics counters are significantly larger than your device statistics counters, there is a good chance that some devices or microservices in your tenant are constantly sending invalid requests. In such a situation, the client should check the state of theirs tenant.
  - name: Usage statistics
    description: |
      Days are counted according to server timezone, so be aware that the tenant usage statistics displaying/filtering may not work correctly when the client is not in the same timezone as the server. However, it is possible to send a request with a time range (using the query parameters `dateFrom` and `dateTo`) in zoned format (for example, `2020-10-26T03:00:00%2B01:00`). Statistics from past days are stored with daily aggregations, which means that for a specific day you get either the statistics for the whole day or none at all.

      ### Request counting in SmartREST and MQTT

      * SmartREST: Each row in a SmartREST request is transformed into a separate HTTP request. For example, if one SmartREST request contains 10 rows, then 10 separate calls are executed, meaning that request count is increased by 10.
      * MQTT: Each row/line counts as a separate request. Creating custom template counts as a single request.

      ### REST specific counting details

      * All counters increase also when the request is invalid, for example, wrong payload or missing permissions.
      * Bulk measurements creation and bulk alarm status update are counted as a single "requestCount"/"deviceRequestCount" and multiple inbound data transfer count.

      ### SmartREST 1.0 specific counting details

      * Invalid SmartREST requests are not counted, for example, when the template doesn't exist.
      * A new template registration is treated as two separate requests. Create a new inventory object which increases "requestCount", "deviceRequestCount" and "inventoriesCreatedCount". There is also a second request which binds the template with X-ID, this increases "requestCount" and "deviceRequestCount".
      * Each row in a SmartREST request is transformed into a separate HTTP request. For example, if one SmartREST request contains 10 rows, then 10 separate calls are executed, meaning that both "requestCount" and "deviceRequestCount" are increased by 10.

      ### MQTT specific counting details

      * Invalid requests are counted, for example, when sending a message with a wrong template ID.
      * Device creation request and automatic device creation are counted.
      * Each row/line counts as a separate request.
      * Creating a custom template counts as a single request, no matter how many rows are sent in the request.
      * There is one special SmartREST 2.0 template (402 Create location update event with device update) which is doing two things in one call, that is, create a new location event and update the location of the device. It is counted as two separate requests.

      ### JSON via MQTT specific counting details

      * Invalid requests are counted, for example, when the message payload is invalid.
      * Bulk creation requests are counted as a single "requestCount"/"deviceRequestCount" and multiple inbound data transfer count.
      * Bulk creation requests with a wrong payload are not counted for inbound data transfer count.

      ### Total inbound data transfer

      Inbound data transfer refers to the total number of inbound requests performed to transfer data into the Cumulocity platform. This includes sensor readings, alarms, events, commands and alike that are transferred between devices and the Cumulocity platform using the REST and/or MQTT interfaces. Such an inbound request could also originate from a custom microservice, website or any other client.

      See the table below for more information on how the counters are increased. Additionally, it shows how inbound data transfers are handled for both MQTT and REST:

      | Type of transfer                                                                               | MQTT counter information                                                                                                                                                           | REST counter information                                                                                                                                                                                                                                                                                                                                                                           |
      |:-----------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
      | Creation of an **alarm** in one request                                                        | One alarm creation is counted.                                                                                                                                                     | One alarm creation is counted via REST.                                                                                                                                                                                                                                                                                                                                                            |
      | Update of an **alarm** (for example, status change)                                            | One alarm update is counted.                                                                                                                                                       | One alarm update is counted via REST.                                                                                                                                                                                                                                                                                                                                                              |
      | Creation of **multiple alarms** in one request                                                 | Each alarm creation in a single MQTT request will be counted.                                                                                                                      | Not supported by C8Y (REST does not support creating multiple alarms in one call).                                                                                                                                                                                                                                                                                                                 |
      | Update of **multiple alarms** (for example, status change) in one request                      | Each alarm update in a single MQTT request will be counted.                                                                                                                        | Each alarm that matches the filter is counted as an alarm update (causing multiple updates).                                                                                                                                                                                                                                                                                                       |
      | Creation of an **event** in one request                                                        | One event creation is counted.                                                                                                                                                     | One event creation is counted.                                                                                                                                                                                                                                                                                                                                                                     |
      | Update of an **event** (for example, text change)                                              | One event update is counted.                                                                                                                                                       | One event update is counted.                                                                                                                                                                                                                                                                                                                                                                       |
      | Creation of **multiple events** in one request                                                 | Each event creation in a single MQTT request will be counted.                                                                                                                      | Not supported by C8Y (REST does not support creating multiple events in one call).                                                                                                                                                                                                                                                                                                                 |
      | Update of **multiple events** (for example, text change) in one request                        | Each event update in a single MQTT request will be counted.                                                                                                                        | Not supported by C8Y (REST does not support updating multiple events in one call).                                                                                                                                                                                                                                                                                                                 |
      | Creation of a **measurement** in one request                                                   | One measurement creation is counted.                                                                                                                                               | One measurement creation is counted.                                                                                                                                                                                                                                                                                                                                                               |
      | Creation of **multiple measurements** in one request                                           | Each measurement creation in a single MQTT request will be counted. Example: If MQTT is used to report 5 measurements, the measurementCreated counter will be incremented by five. | REST allows multiple measurements to be created by sending multiple measurements in one call. In this case, each measurement sent via REST is counted individually. The call itself is not counted. For example, if somebody sends 5 measurements via REST in one call, the corresponding counter will be increased by 5. Measurements with multiple series are counted as a singular measurement. |
      | Creation of a **managed object** in one request                                                | One managed object creation is counted.                                                                                                                                            | One managed object creation is counted.                                                                                                                                                                                                                                                                                                                                                            |
      | Update of one **managed object** (for example, status change)                                  | One managed object update is counted.                                                                                                                                              | One managed object update is counted.                                                                                                                                                                                                                                                                                                                                                              |
      | Update of **multiple managed objects** in one request                                          | Each managed object update in a single MQTT request will be counted.                                                                                                               | Not supported by C8Y (REST does not support updating multiple managed objects in one call).                                                                                                                                                                                                                                                                                                        |
      | Creation/update of **multiple alarms/measurements/events/inventories** mixed in a single call. | Each MQTT line is processed separately. If it is a creation/update of an event/alarm/measurement/inventory, the corresponding counter is increased by one.                         | Not supported by the REST API.                                                                                                                                                                                                                                                                                                                                                                     |
      | Assign/unassign of **child devices and child assets** in one request                           | One managed object update is counted.                                                                                                                                              | One managed object update is counted.                                                                                                                                                                                                                                                                                                                                                              |
      | Creation of an **operation** in one request                                                    | One operation creation is counted.                                                                                                                                                 | One operation creation is counted.                                                                                                                                                                                                                                                                                                                                                                 |
      | Update of an **operation** (for example, status change)                                        | One operation update is counted.                                                                                                                                                   | One operation update is counted.                                                                                                                                                                                                                                                                                                                                                                   |

      ### Microservice usage statistics

      The microservice usage statistics gathers information on the resource usage for tenants for each subscribed application which are collected on a daily base.

      The microservice usage's information is stored in the `resources` object.

      ### Frequently asked questions

      #### Which requests are counted as general "requestCount"?

      All requests which the platform receives are counted, including,for example, UI requests, microservices requests, device requests and agents requests. Only a few internal endpoints are not counted:
      * `/health` (and all endpoints including this URI fragment, like `/tenant/health`)
      * `/application/currentApplication` (and all subresources, like `/application/currentApplication/subscriptions`)
      * `/tenant/limit`
      * `/devicecontrol/deviceCredentials`
      * `/inventory/templates` (and all subresources)

      #### My devices are not sending any data, but "requestCount" is increasing, and the total number is really big. Why is this happening?

      Not only device requests are counted. Every user interaction with UI applications generates some requests to the backend API. Additionally you may have subscribed standard or custom microservices, which also regularly send requests to the platform.

      Example: If you have four microservices and each microservice sends five requests per minute, this setup creates `4 * 5 * 60 * 24 = 28800` requests per day. Similar numbers arise if there are multiple users working with the given tenant UI concurrently. 

      #### Which requests are counted as "deviceRequestCount"?

      All requests from "requestCount" except the following:

      * Tenant API requests
      * Application API requests
      * User API requests
      * Requests with the proper HTTP header `X-Cumulocity-Application-Key`, matching the application key of one of the applications used by a particular tenant 

      The exclusion of the APIs in the list above means that requests to endpoints which start with the mentioned API prefixes are not counted. For example, for the Tenant API the following endpoints are not counted (the list is incomplete):
      * `/tenant/tenants`
      * `/tenant/currentTenant`
      * `/tenant/statistics`
      * `/tenant/options`

      > **&#9432; Info:** Each microservice and web application must include the `X-Cumulocity-Application-Key` header in all requests.
      > Otherwise such requests are counted as device requests which incorrectly affects the "deviceRequestCount" usage metric.
  - name: Options
    description: |
      API methods to retrieve the options configured in the tenant.

      > **&#9432; Info:** The Accept header should be provided in all POST/PUT requests, otherwise an empty response body will be returned.
  - name: Login options
    description: |
      API methods to retrieve the login options configured in the tenant.

      More detailed information about the parameters and their meaning can be found in [Platform administration > Standard tenant administration > Changing settings](https://www.cumulocity.com/docs/standard-tenant/changing-settings/) in the Cumulocity user documentation.

      > **&#9432; Info:** If OAuth external is the only login option shown in the response, the user will be automatically redirected to the SSO login screen.
  - name: Login tokens
    description: API methods to obtain access tokens to the Cumulocity platform in case of OAI-Secure or SSO authentication.
  - name: System options
    description: |
      API methods to retrieve the read-only properties predefined in the platform's configuration.

      For security reasons, a few system options are considered secured, which means the user must have the required role **ROLE_OPTION_MANAGEMENT_ADMIN** to read their values.

      List of options:

      |         Category          | Key                           | Considered as secured |
      |:-------------------------:|:------------------------------|:----------------------|
      |         password          | green.min-length              | yes                   |
      | two-factor-authentication | pin.validity                  | yes                   |
      | two-factor-authentication | token.length                  | yes                   |
      | two-factor-authentication | token.validity                | yes                   |
      |      authentication       | badRequestCounter             | yes                   |
      |           files           | microservice.zipped.max.size  | yes                   |
      |           files           | microservice.unzipped.max.size| yes                   |
      |           files           | webapp.zipped.max.size        | yes                   |
      |           files           | webapp.unzipped.max.size      | yes                   |
      | two-factor-authentication | enforced                      | no                    |
      |       reportMailer        | available                     | no                    |
      |          system           | version                       | no                    |
      |          plugin           | eventprocessing.enabled       | no                    |
      |         password          | limit.validity                | no                    |
      |         password          | enforce.strength              | no                    |
      | two-factor-authentication | strategy                      | no                    |
      | two-factor-authentication | pin.length                    | no                    |
      | two-factor-authentication | enabled                       | no                    |
      | two-factor-authentication | enforced.group                | no                    |
      | two-factor-authentication | tenant-scope-settings.enabled | no                    |
      | two-factor-authentication | logout-on-browser-termination | no                    |
      |       connectivity        | microservice.url              | no                    |
      |       support-user        | enabled                       | no                    |
      |          support          | url                           | no                    |
      |         trackers          | supported.models              | no                    |
      |         encoding          | test                          | no                    |
      |        data-broker        | bootstrap.period              | no                    |
      |           files           | max.size                      | no                    |
      |      device-control       | bulkoperation.creationramp    | no                    |
      |         gainsight         | api.key                       | no                    |
      |            cep            | deprecation.alarm             | no                    |
      |       remoteaccess        | pass-through.enabled          | no                    |
      |    device-registration    | security-token.policy         | no                    |
  - name: Platform API
    description: 'To discover the URIs of the various interfaces of Cumulocity, a platform interface is provided. This interface aggregates all the underlying API resources.'
    x-codegen-ignore: true
  - name: Feature toggles API
  - name: Certificate authority
    description: API to create a new CA certificate for tenant in Cumulocity.
  - name: Device enrollment
    description: |
      Device enroll API to be used by a device to get a fresh new certificate. The device has to authenticate itself using its identifier and security token as the BasicAuth realm, user and password respectively. The tenant, identifier and security token must be shared with Cumulocity using the [New-device-requests](#tag/New-device-requests) onboarding endpoint to set the security token for a device.
      Device re-enroll API to be used by a device to renew its certificate or replace its certificate with its current credentials (being a password or a JWT token).
x-tagGroups:
  - name: Platform
    tags:
      - Platform API
  - name: Alarms
    tags:
      - Alarm API
      - Alarm notification API
      - Alarms
  - name: Applications
    tags:
      - Application API
      - Applications
      - Application versions
      - Application binaries
      - Bootstrap user
      - Current application
  - name: Audits
    tags:
      - Audit API
      - Audits
  - name: Device control
    tags:
      - Device control API
      - Device control notification API
      - Operations
      - Bulk operations
      - Device credentials
      - New device requests
      - Device control via SMS
  - name: Events
    tags:
      - Event API
      - Event notification API
      - Events
      - Attachments
  - name: Feature toggles
    tags:
      - Feature toggles API
  - name: Identity
    tags:
      - Identity API
      - External IDs
  - name: Inventory
    tags:
      - Inventory API
      - Inventory notification API
      - Managed objects
      - Binaries
      - Child operations
      - Query language
  - name: Measurements
    tags:
      - Measurement API
      - Measurement notification API
      - Measurements
      - Measurements specifics
  - name: Notifications 2.0
    tags:
      - About notifications 2.0
      - Notification 2.0 API
      - Subscriptions
      - Tokens
  - name: Real-time notifications
    tags:
      - Real-time notification API
  - name: Retentions
    tags:
      - Retention rules
  - name: Tenants
    tags:
      - Tenant API
      - Tenants
      - Tenant applications
      - Trusted certificates
      - Device statistics
      - Usage statistics
      - Options
      - Login options
      - Login tokens
      - System options
  - name: Users
    tags:
      - User API
      - Current User
      - Users
      - Groups
      - Roles
      - Inventory Roles
      - Device Permissions
  - name: Certificate
    tags:
      - Certificate authority
      - Device enrollment
paths:
  /platform:
    get:
      operationId: getPlatformApiResource
      tags:
        - Platform API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve URIs to collection platform objects
      description: Retrieve URIs and URI templates to collections of platform objects.
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/platform" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/platform");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/platform")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/platform")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/platform"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.platformapi+json:
              schema:
                $ref: '#/components/schemas/PlatformApiResource'
  /alarm:
    get:
      operationId: getAlarmsApiResource
      tags:
        - Alarm API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve URIs to collections of alarms
      description: |
        Retrieve URIs and URI templates to collections of alarms.

        <section><h5>Required roles</h5>
        ROLE_ALARM_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/alarm" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/alarm");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/alarm")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/alarm")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/alarm"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.alarmapi+json:
              schema:
                $ref: '#/components/schemas/alarmsApiResource'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /alarm/alarms:
    post:
      operationId: postAlarmCollectionResource
      x-codegen-resource-name: createAlarm
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Alarms
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Create an alarm
      description: |
        An alarm must be associated with a source (managed object) identified by ID.<br>
        In general, each alarm may consist of:

        *   A status showing whether the alarm is ACTIVE, ACKNOWLEDGED or CLEARED.
        *   A time stamp to indicate when the alarm was last updated.
        *   The severity of the alarm: CRITICAL, MAJOR, MINOR or WARNING.
        *   A history of changes to the event in form of audit logs.

        ### Alarm suppression

        If the source device is in maintenance mode, the alarm is not created and not reported to the Cumulocity event processing engine. When sending a POST request to create a new alarm and if the source device is in maintenance mode, the self link of the alarm will be:

        ```json
        "self": "https://<TENANT_DOMAIN>/alarm/alarms/null"
        ```

        ### Alarm de-duplication

        If an ACTIVE or ACKNOWLEDGED alarm with the same source and type exists, no new alarm is created.
        Instead, the existing alarm is updated by incrementing the `count` property; the `time` property is also updated.
        Any other changes are ignored, and the alarm history is not updated. Alarms with status CLEARED are not de-duplicated.
        The first occurrence of the alarm is recorded in the `firstOccurrenceTime` property.

        <section><h5>Required roles</h5>
        ROLE_ALARM_ADMIN <b>OR</b> owner of the source <b>OR</b> ALARM_ADMIN permission on the source
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.alarm+json:
            example:
              source:
                id: '251982'
              type: c8y_UnavailabilityAlarm
              text: No data received from the device within the required interval.
              severity: MAJOR
              status: ACTIVE
              time: '2020-03-19T12:03:27.845Z'
            schema:
              allOf:
                - $ref: '#/components/schemas/alarm'
                - required:
                    - source
                    - type
                    - text
                    - severity
                    - time
                  properties:
                    source:
                      required:
                        - id
                      properties:
                        name:
                          readOnly: true
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/alarm/alarms" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/alarm/alarms")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/alarm/alarms")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/alarm/alarms"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: An alarm was created.
          content:
            application/vnd.com.nsn.cumulocity.alarm+json:
              schema:
                $ref: '#/components/schemas/alarm'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getAlarmCollectionResource
      x-codegen-resource-name: getAlarms
      parameters:
        - $ref: '#/components/parameters/queryParam_alarm_createdFrom'
        - $ref: '#/components/parameters/queryParam_alarm_createdTo'
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_alarm_dateFrom'
        - $ref: '#/components/parameters/queryParam_alarm_dateTo'
        - $ref: '#/components/parameters/queryParam_lastUpdatedFrom'
        - $ref: '#/components/parameters/queryParam_lastUpdatedTo'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_alarm_resolved'
        - $ref: '#/components/parameters/queryParam_alarm_severity'
        - $ref: '#/components/parameters/queryParam_alarm_source'
        - $ref: '#/components/parameters/queryParam_alarm_status'
        - $ref: '#/components/parameters/queryParam_alarm_type'
        - $ref: '#/components/parameters/queryParam_alarm_withSourceAssets'
        - $ref: '#/components/parameters/queryParam_alarm_withSourceDevices'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Alarms
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve all alarms
      description: |
        Retrieve all alarms on your tenant, or a specific subset based on queries. The results are sorted by the newest alarms first.

        #### Query parameters

        The query parameter `withTotalPages` only works when the user has the ROLE_ALARM_READ role, otherwise it is ignored.

        <section><h5>Required roles</h5>
        The role ROLE_ALARM_READ is not required, but if a user has this role, all the alarms on the tenant are returned. If a user has access to alarms through inventory roles, only those alarms are returned.
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/alarm/alarms" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/alarm/alarms")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/alarm/alarms")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/alarm/alarms"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/alarmCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
    put:
      operationId: putAlarmCollectionResource
      x-codegen-resource-name: updateAlarms
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
        - $ref: '#/components/parameters/queryParam_alarm_createdFrom'
        - $ref: '#/components/parameters/queryParam_alarm_createdTo'
        - $ref: '#/components/parameters/queryParam_alarm_dateFrom'
        - $ref: '#/components/parameters/queryParam_alarm_dateTo'
        - $ref: '#/components/parameters/queryParam_alarm_resolved'
        - $ref: '#/components/parameters/queryParam_alarm_severity'
        - $ref: '#/components/parameters/queryParam_alarm_source'
        - $ref: '#/components/parameters/queryParam_alarm_status'
        - $ref: '#/components/parameters/queryParam_alarm_withSourceAssets'
        - $ref: '#/components/parameters/queryParam_alarm_withSourceDevices'
      tags:
        - Alarms
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Update alarm collections
      description: |
        Update alarm collections specified by query parameters. At least one query parameter is required to avoid accidentally updating all existing alarms.<br>
        Currently, only the status of alarms can be modified.

        > **&#9432; Info:** Since this operation can take considerable time, the request returns after maximum 0.5 seconds of processing, and the update operation continues as a background process in the platform.

        <section><h5>Required roles</h5>
        ROLE_ALARM_ADMIN
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.alarm+json:
            example:
              status: CLEARED
            schema:
              allOf:
                - $ref: '#/components/schemas/alarm'
                - properties:
                    severity:
                      readOnly: true
                    source:
                      readOnly: true
                    text:
                      readOnly: true
                    time:
                      readOnly: true
                    type:
                      readOnly: true
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/alarm/alarms?resolved=false&source=<managedObjectId>" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms?resolved=false&source=<managedObjectId>");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/alarm/alarms?resolved=false&source=<managedObjectId>")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/alarm/alarms?resolved=false&source=<managedObjectId>")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/alarm/alarms?resolved=false&source=<managedObjectId>"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: An alarm collection was updated.
        '202':
          description: An alarm collection is being updated in background.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '422':
          $ref: '#/components/responses/invalidPayload'
    delete:
      operationId: deleteAlarmCollectionResource
      x-codegen-resource-name: deleteAlarms
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
        - $ref: '#/components/parameters/queryParam_alarm_createdFrom'
        - $ref: '#/components/parameters/queryParam_alarm_createdTo'
        - $ref: '#/components/parameters/queryParam_alarm_dateFrom'
        - $ref: '#/components/parameters/queryParam_alarm_dateTo'
        - $ref: '#/components/parameters/queryParam_alarm_resolved'
        - $ref: '#/components/parameters/queryParam_alarm_severity'
        - $ref: '#/components/parameters/queryParam_alarm_source'
        - $ref: '#/components/parameters/queryParam_alarm_status'
        - $ref: '#/components/parameters/queryParam_alarm_type'
        - $ref: '#/components/parameters/queryParam_alarm_withSourceAssets'
        - $ref: '#/components/parameters/queryParam_alarm_withSourceDevices'
      tags:
        - Alarms
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Remove alarm collections
      description: |
        Remove alarm collections specified by query parameters.

        > **⚠️ Important:** DELETE requires at least one of the following parameters: `source`, `dateFrom`, `dateTo`, `createdFrom`, `createdTo`.
        > Also note that DELETE requests are not synchronous. The response could be returned before the delete request has been completed.

        <section><h5>Required roles</h5>
        ROLE_ALARM_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/alarm/alarms?resolved=true&source=<managedObjectId>" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms?resolved=true&source=<managedObjectId>");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/alarm/alarms?resolved=true&source=<managedObjectId>")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/alarm/alarms?resolved=true&source=<managedObjectId>")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/alarm/alarms?resolved=true&source=<managedObjectId>"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A collection of alarms was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
  '/alarm/alarms/{id}':
    parameters:
      - $ref: '#/components/parameters/alarmId'
    get:
      operationId: getAlarmResource
      x-codegen-resource-name: getAlarm
      tags:
        - Alarms
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve a specific alarm
      description: |
        Retrieve a specific alarm by a given ID.

        <section><h5>Required roles</h5>
        ROLE_ALARM_READ <b>OR</b> owner of the source <b>OR</b> ALARM_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/alarm/alarms/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/alarm/alarms/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/alarm/alarms/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/alarm/alarms/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/alarmFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/alarmNotFound'
    put:
      operationId: putAlarmResource
      x-codegen-resource-name: updateAlarm
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Alarms
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Update a specific alarm
      description: |
        Update a specific alarm by a given ID.
        Only text, status, severity and custom properties can be modified. A request will be rejected when non-modifiable properties are provided in the request body.

        > **&#9432; Info:** Changes to alarms will generate a new audit record. The audit record will include the username and application that triggered the update, if applicable. If the update operation doesn’t change anything (that is, the request body contains data that is identical to the already present in the database), there will be no audit record added and no notifications will be sent.

        <section><h5>Required roles</h5>
        ROLE_ALARM_ADMIN <b>OR</b> owner of the source <b>OR</b> ALARM_ADMIN permission on the source
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.alarm+json:
            example:
              severity: MAJOR
              status: ACTIVE
              text: No data received from the device within the required interval.
            schema:
              allOf:
                - $ref: '#/components/schemas/alarm'
                - properties:
                    source:
                      readOnly: true
                    time:
                      readOnly: true
                    type:
                      readOnly: true
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/alarm/alarms/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/alarm/alarms/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/alarm/alarms/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/alarm/alarms/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: An alarm was updated.
          content:
            application/vnd.com.nsn.cumulocity.alarm+json:
              schema:
                $ref: '#/components/schemas/alarm'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/alarmNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
  /alarm/alarms/count:
    get:
      operationId: getAlarmCollectionCountResource
      x-codegen-resource-name: getNumberOfAlarms
      parameters:
        - $ref: '#/components/parameters/queryParam_alarm_dateFrom'
        - $ref: '#/components/parameters/queryParam_alarm_dateTo'
        - $ref: '#/components/parameters/queryParam_alarm_resolved'
        - $ref: '#/components/parameters/queryParam_alarm_severity'
        - $ref: '#/components/parameters/queryParam_alarm_source'
        - $ref: '#/components/parameters/queryParam_alarm_status'
        - $ref: '#/components/parameters/queryParam_alarm_type'
        - $ref: '#/components/parameters/queryParam_alarm_withSourceAssets'
        - $ref: '#/components/parameters/queryParam_alarm_withSourceDevices'
      tags:
        - Alarms
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve the total number of alarms
      description: |
        Count the total number of active alarms on your tenant.

        <section><h5>Required roles</h5>
        The role ROLE_ALARM_READ is not required, but if a user has this role, all the alarms on the tenant are counted. Otherwise, inventory role permissions are used to count the alarms and the limit is 100.
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/alarm/alarms/count" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/alarm/alarms/count");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/alarm/alarms/count")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/alarm/alarms/count")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/alarm/alarms/count"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the number of active alarms is sent in the response.
          content:
            'text/plain, application/json':
              schema:
                type: integer
                minimum: 0
                example: 38
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /devicecontrol:
    get:
      operationId: getDeviceControlApiResource
      tags:
        - Device control API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve URIs to collections of operations
      description: |
        Retrieve URIs to collections of operations.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/devicecontrol"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.devicecontrolapi+json:
              schema:
                $ref: '#/components/schemas/deviceControlApiResource'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /devicecontrol/operations:
    post:
      operationId: postOperationCollectionResource
      x-codegen-resource-name: createOperation
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Create an operation
      description: |
        Create an operation.

        It is possible to add custom fragments to operations, for example `com_cumulocity_model_WebCamDevice` is a custom object of the webcam operation.

        There are some custom fragments which are used by web applications (like Device management) to provide additional context to operations, for example:
        * `description` - this fragment can be used to provide a brief user-friendly description of the operation which is later displayed in the operations list views within web applications.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN <b>OR</b> owner of the device <b>OR</b> ADMIN permissions on the device
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/devicecontrol/operations" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
            --data-raw '<Payload>',
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/operations");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/devicecontrol/operations")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/devicecontrol/operations")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/devicecontrol/operations"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers = headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.operation+json:
            example:
              deviceId: '1234'
              com_cumulocity_model_WebCamDevice:
                name: Take a picture
                parameters:
                  duration: 5s
                  quality: HD
            schema:
              allOf:
                - $ref: '#/components/schemas/operation'
                - required:
                    - deviceId
                  properties:
                    status:
                      readOnly: true
                    failureReason:
                      readOnly: true
      responses:
        '201':
          description: An operation was created.
          content:
            application/vnd.com.nsn.cumulocity.operation+json:
              schema:
                $ref: '#/components/schemas/operation'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getOperationCollectionResource
      x-codegen-resource-name: getOperations
      parameters:
        - $ref: '#/components/parameters/queryParam_operation_agentId'
        - $ref: '#/components/parameters/queryParam_operation_bulkOperationId'
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_operation_dateFrom'
        - $ref: '#/components/parameters/queryParam_operation_dateTo'
        - $ref: '#/components/parameters/queryParam_operation_deviceId'
        - $ref: '#/components/parameters/queryParam_operation_fragmentType'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_operation_revert'
        - $ref: '#/components/parameters/queryParam_operation_status'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve a list of operations
      description: |
        Retrieve a list of operations.

        Notes about operation collections:

        * The embedded operation object contains `deviceExternalIDs` only when queried with an `agentId` parameter.
        * The embedded operation object is filled with `deviceName`, but only when requesting resource: Get a collection of operations.
        * Operations are returned in the order of their ascending IDs.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/operations" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/operations");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/operations")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/operations")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/devicecontrol/operations"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the list of operations is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.operationcollection+json:
              schema:
                $ref: '#/components/schemas/OperationCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
    delete:
      operationId: deleteOperationCollectionResource
      x-codegen-resource-name: deleteOperations
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
        - $ref: '#/components/parameters/queryParam_operation_agentId_delete'
        - $ref: '#/components/parameters/queryParam_operation_dateFrom'
        - $ref: '#/components/parameters/queryParam_operation_dateTo'
        - $ref: '#/components/parameters/queryParam_operation_deviceId'
        - $ref: '#/components/parameters/queryParam_operation_status'
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Delete a list of operations
      description: |
        Delete a list of operations.

        The DELETE method allows for deletion of operation collections.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/devicecontrol/operations?status=PENDING" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/operations?status=PENDING");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/devicecontrol/operations?status=PENDING")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/devicecontrol/operations?status=PENDING")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/devicecontrol/operations?status=PENDING"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A list of operations was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
  '/devicecontrol/operations/{id}':
    parameters:
      - $ref: '#/components/parameters/operationId'
    get:
      operationId: getOperationResource
      x-codegen-resource-name: getOperation
      tags:
        - Operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve a specific operation
      description: |
        Retrieve a specific operation (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_READ <b>OR</b> owner of the resource <b>OR</b> ADMIN permission on the device
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/operations/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/operations/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the operation is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.operation+json:
              schema:
                $ref: '#/components/schemas/operation'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/operationNotFound'
    put:
      operationId: putOperationResource
      x-codegen-resource-name: updateOperation
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Update a specific operation status
      description: |
        Update a specific operation (by a given ID).
        You can only update its status.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN <b>OR</b> owner of the resource <b>OR</b> ADMIN permission on the device
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/operations/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/devicecontrol/operations/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/devicecontrol/operations/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.operation+json:
            example:
              status: FAILED
              failureReason: Description of your failure
            schema:
              allOf:
                - $ref: '#/components/schemas/operation'
                - required:
                    - status
                  properties:
                    deviceId:
                      readOnly: true
      responses:
        '200':
          description: An operation was updated.
          content:
            application/vnd.com.nsn.cumulocity.operation+json:
              schema:
                $ref: '#/components/schemas/operation'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/operationNotFound'
        '422':
          $ref: '#/components/responses/operationValidationError'
  /devicecontrol/newDeviceRequests:
    post:
      operationId: postNewDeviceRequestCollectionResource
      x-codegen-resource-name: createNewDeviceRequest
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - New device requests
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Create a new device request
      description: |
        Create a new device request.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/vnd.com.nsn.cumulocity.newdevicerequest+json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/vnd.com.nsn.cumulocity.newdevicerequest+json");
            request.AddParameter("application/json", "<Payload>", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Accept", "application/json")
                .header("Content-Type", "application/vnd.com.nsn.cumulocity.newdevicerequest+json")
                .body("<Payload>")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/vnd.com.nsn.cumulocity.newdevicerequest+json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/vnd.com.nsn.cumulocity.newdevicerequest+json"
            }
            response = requests.request("POST", url, headers=headers, json = <Payload>)
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.newdevicerequest+json:
            example:
              id: '54545454'
              groupId: '123'
            schema:
              allOf:
                - $ref: '#/components/schemas/newDeviceRequest'
                - required:
                    - id
                  properties:
                    groupId:
                      readOnly: false
                    type:
                      readOnly: false
                    status:
                      readOnly: true
                    securityToken:
                      readOnly: true
      responses:
        '201':
          description: A new device request was created.
          content:
            application/vnd.com.nsn.cumulocity.newdevicerequest+json:
              schema:
                $ref: '#/components/schemas/newDeviceRequest'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getNewDeviceRequestCollectionResource
      x-codegen-resource-name: getNewDeviceRequests
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - New device requests
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve a list of new device requests
      description: |
        Retrieve a list of new device requests.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the list of new device requests sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.newdevicerequestcollection+json:
              schema:
                $ref: '#/components/schemas/NewDeviceRequestCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/devicecontrol/newDeviceRequests/{requestId}':
    parameters:
      - $ref: '#/components/parameters/newDeviceRequestId'
    get:
      operationId: getNewDeviceRequestResource
      x-codegen-resource-name: getNewDeviceRequest
      tags:
        - New device requests
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve a specific new device request
      description: |
        Retrieve a specific new device request (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the new device request is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.newdevicerequest+json:
              schema:
                $ref: '#/components/schemas/newDeviceRequest'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/newDeviceRequestNotFound'
    put:
      operationId: putNewDeviceRequestResource
      x-codegen-resource-name: updateNewDeviceRequest
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - New device requests
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Update a specific new device request status
      description: |
        Update a specific new device request (by a given ID).
        You can only update its status.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.newdevicerequest+json:
            examples:
              default:
                value:
                  status: WAITING_FOR_CONNECTION
                description: |
                  Example of payload for `WAITING_FOR_CONNECTION`, `PENDING_ACCEPTANCE`, `ACCEPTED` statuses.
              with_security_token:
                value:
                  status: ACCEPTED
                  securityToken: SecureDeviceToken
                description: |
                  Example of payload for `ACCEPTED` status when security token is used during device registration.
            schema:
              allOf:
                - $ref: '#/components/schemas/newDeviceRequest'
                - required:
                    - status
                  properties:
                    id:
                      readOnly: true
                    groupId:
                      readOnly: true
                    type:
                      readOnly: true
      responses:
        '200':
          description: A new device request was updated.
          content:
            application/vnd.com.nsn.cumulocity.newdevicerequest+json:
              schema:
                $ref: '#/components/schemas/newDeviceRequest'
              examples:
                default:
                  value:
                    id: '54545454'
                    self: 'https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/54545454'
                    status: WAITING_FOR_CONNECTION
                  description: |
                    Example of response for `WAITING_FOR_CONNECTION`, `PENDING_ACCEPTANCE`, `ACCEPTED` statuses.
                with_security_token:
                  value:
                    id: '54545454'
                    self: 'https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/54545454'
                    status: ACCEPTED
                  description: Example of response for `ACCEPTED` status when security token is used during device registration.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/newDeviceRequestNotFound'
    delete:
      operationId: deleteNewDeviceRequestResource
      x-codegen-resource-name: deleteNewDeviceRequest
      tags:
        - New device requests
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Delete a specific new device request
      description: |
        Delete a specific new device request (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/{requestId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A new device request was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/newDeviceRequestNotFound'
  /devicecontrol/deviceCredentials:
    post:
      operationId: postDeviceCredentialsCollectionResource
      x-codegen-resource-name: createDeviceCredentials
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Device credentials
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Create device credentials
      description: |
        Create device credentials.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_BOOTSTRAP
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
            --data-raw '<Payload>',
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers = headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.devicecredentials+json:
            examples:
              default:
                value:
                  id: '129129'
              with_security_token:
                value:
                  id: '129129'
                  securityToken: SecureDeviceToken
            schema:
              allOf:
                - $ref: '#/components/schemas/deviceCredentials'
                - required:
                    - id
      responses:
        '200':
          description: Device credentials were created.
          content:
            application/vnd.com.nsn.cumulocity.devicecredentials+json:
              schema:
                $ref: '#/components/schemas/deviceCredentials'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /devicecontrol/bulkNewDeviceRequests:
    post:
      operationId: postBulkNewDeviceRequestCollectionResource
      x-codegen-resource-name: createBulkDeviceCredentials
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Device credentials
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Create a bulk device credentials request
      description: |
        Create a bulk device credentials request.

        Device credentials and basic device representation can be provided within a CSV file which must be UTF-8 or ANSI encoded. The CSV file must have two sections.

        The first section is the first line of the CSV file. This line contains column names (headers):

        |Name|Mandatory|Description|
        |--- |--- |--- |
        |ID|Yes|The external ID of a device.|
        |CREDENTIALS|Yes*|Password for the device's user. Mandatory, unless AUTH_TYPE is "CERTIFICATES", then CREDENTIALS can be skipped.|
        |AUTH_TYPE|No|Required authentication type for the device's user. If the device uses credentials, this can be skipped or filled with "BASIC". Devices that use certificates must set "CERTIFICATES".|
        |TENANT|No|The ID of the tenant for which the registration is executed (only allowed for the management tenant).|
        |TYPE|No|The type of the device representation.|
        |NAME|No|The name of the device representation.|
        |ICCID|No|The ICCID of the device (SIM card number). If the ICCID appears in file, the import adds a fragment `c8y_Mobile.iccid`. The ICCID value is not mandatory for each row, see the example for an HTTP request below.|
        |IDTYPE|No|The type of the external ID. If IDTYPE doesn't appear in the file, the default value is used. The default value is `c8y_Serial`. The IDTYPE value is not mandatory for each row, see the example for an HTTP request below.|
        |PATH|No|The path in the groups hierarchy where the device is added. PATH contains the name of each group separated by `/`, that is: `main_group/sub_group/.../last_sub_group`. If a group does not exist, the import creates the group.|
        |SHELL|No|If this column contains a value of 1, the import adds the SHELL feature to the device (specifically the `c8y_SupportedOperations` fragment). The SHELL value is not mandatory for each row, see the example for an HTTP request below.|

        Section two is the rest of the CSV file. Section two contains the device information. The order and quantity of the values must be the same as of the headers.

        A separator is automatically obtained from the CSV file. Valid separator values are: `\t` (tabulation mark), `;` (semicolon) and `,` (comma).

        > **⚠️ Important:** The CSV file needs the "com_cumulocity_model_Agent.active" header with a value of "true" to be added to the request.

        > **&#9432; Info:** A bulk registration creates an elementary representation of the device. Then, the device needs to update it to a full representation with its own status. The device is ready to use only after it is updated to the full representation. Also see [Device management > Device management application > Registering devices > Single device registration > Security token policy](https://www.cumulocity.com/docs/device-management-application/registering-devices/#security-token-policy) and [Device management > Device integration > Device integration using REST > Integration life cycle](https://www.cumulocity.com/docs/device-integration/rest/#integration-life-cycle).

        A CSV file can appear in many forms (with regard to the optional tenant column and the occurrence of device information):

        * If a user is logged in as the management tenant, then the columns ID, CREDENTIALS and TENANT are mandatory, and the device credentials will be created for the tenant mentioned in the TENANT column.
        * If a user is logged in as a different tenant, for example, as `sample_tenant`, then the columns ID and CREDENTIALS are mandatory (if the file contains the TENANT column, it is ignored and the device credentials will be created for the tenant that is logged in).
        * If a user wants to add information about the device, the columns TYPE and NAME must appear in the CSV file.
        * If a user wants to add information about a SIM card number, the columns TYPE, NAME and ICCID must appear in the CSV file.
        * If a user wants to change the type of external ID, the columns TYPE, NAME and IDTYPE must appear in the CSV file.
        * If a user wants to add a device to a group, the columns TYPE, NAME and PATH must appear in the CSV file.
        * If a user wants to add the SHELL feature, the columns TYPE, NAME and SHELL must appear in the CSV file and the column SHELL must contain a value of 1.

        It is possible to define a custom [external ID](#tag/External-IDs) mapping and some custom device properties which are added to newly created devices during registration:

        * To add a custom external ID mapping, enter the external ID type as the header of the last column with the prefix "external-", for example, to add an external ID mapping of type `c8y_Imei`, enter `external-c8y_Imei` in the last column header. The value of this external ID type should be set in the corresponding column of the data rows.
        * To add a custom property to a registered device, enter the custom property name as a header, for example, "myCustomProperty", and the value would be in the rows below.

        The custom device properties mapping has the following limitations:

        * Braces '{}' used in data rows will be interpreted as strings of "{}". The system will interpret the value as an object when some custom property is added, for example, put `com_cumulocity_model_Agent.active` into the headers row and `true` into the data row to create an object `"com_cumulocity_model_Agent": {"active": "true"}"`.
        * It is not possible to add array values via bulk registration.

        Example file:

        ```csv
        ID;CREDENTIALS;TYPE;NAME;ICCID;IDTYPE;PATH;SHELL
        id_101;AbcD1234!1234AbcD;type_of_device;Device 101;111111111;;csv device/subgroup0;1
        id_102;AbcD1234!1234AbcD;type_of_device;Device 102;222222222;;csv device/subgroup0;0
        id_111;AbcD1234!1234AbcD;type_of_device;Device 111;333333333;c8y_Imei;csv device1/subgroup1;0
        id_112;AbcD1234!1234AbcD;type_of_device;Device 112;444444444;;csv device1/subgroup1;1
        id_121;AbcD1234!1234AbcD;type_of_device;Device 121;555555555;;csv device1/subgroup2;1
        id_122;AbcD1234!1234AbcD;type_of_device;Device 122;;;csv device1/subgroup2;
        id_131;AbcD1234!1234AbcD;type_of_device;Device 131;;;csv device1/subgroup3;
        ```

        There is also a simple registration method that creates all registration requests at once, then each one needs to go through regular acceptance.
        This simple registration only makes use of the ID and PATH fields from the list above.

        <section><h5>Required roles</h5>
        ROLE_DEVICE_CONTROL_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/devicecontrol/bulkNewDeviceRequests" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --form "file=@bulk_credential_request.csv"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkNewDeviceRequests");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Accept", "application/json");
            request.AddFile("file", "bulk_credential_request.csv");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/devicecontrol/bulkNewDeviceRequests")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Accept", "application/json")
                .field("file", new File("bulk_credential_request.csv"))
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/devicecontrol/bulkNewDeviceRequests")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json"
                })
                .attach("file", "bulk_credential_request.csv")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/devicecontrol/bulkNewDeviceRequests"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json"
            }
            files = [("file", open("bulk_credential_request.csv", "rb"))]

            response = requests.request("POST", url, headers = headers, files = files)
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  description: The CSV file to be uploaded.
                  type: string
                  format: binary
            encoding:
              file:
                contentType: text/csv
      responses:
        '201':
          description: A bulk of new device requests was created.
          content:
            application/vnd.com.nsn.cumulocity.bulknewdevicerequest+json:
              schema:
                $ref: '#/components/schemas/bulkNewDeviceRequest'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /devicecontrol/bulkoperations:
    post:
      operationId: postBulkOperationCollectionResource
      x-codegen-resource-name: createBulkOperation
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Bulk operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Create a bulk operation
      description: |
        Create a bulk operation.

        <section><h5>Required roles</h5>
        ROLE_BULK_OPERATION_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
            --data-raw '<Payload>',
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers = headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.bulkoperation+json:
            example:
              creationRamp: 15
              groupId: '12359'
              operationPrototype:
                description: Restart device
                c8y_Restart: {}
              startDate: '2022-05-01T22:21:22'
            schema:
              $ref: '#/components/schemas/bulkOperation'
      responses:
        '201':
          description: A bulk operation was created.
          content:
            application/vnd.com.nsn.cumulocity.bulkoperation+json:
              schema:
                $ref: '#/components/schemas/bulkOperation'
        '401':
          $ref: '#/components/responses/unauthorizedError'
    get:
      operationId: getBulkOperationCollectionResource
      x-codegen-resource-name: getBulkOperations
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
      tags:
        - Bulk operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve a list of bulk operations
      description: |
        Retrieve a list of bulk operations.

        <section><h5>Required roles</h5>
        ROLE_BULK_OPERATION_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the list of bulk operations sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.bulkoperationcollection+json:
              schema:
                $ref: '#/components/schemas/BulkOperationCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/devicecontrol/bulkoperations/{id}':
    parameters:
      - $ref: '#/components/parameters/bulkOperationId'
    get:
      operationId: getBulkOperationResource
      x-codegen-resource-name: getBulkOperation
      tags:
        - Bulk operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve a specific bulk operation
      description: |
        Retrieve a specific bulk operation (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_BULK_OPERATION_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the bulk operation is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.bulkoperation+json:
              schema:
                $ref: '#/components/schemas/bulkOperation'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/bulkOperationNotFound'
    put:
      operationId: putBulkOperationResource
      x-codegen-resource-name: updateBulkOperation
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Bulk operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Update a specific bulk operation
      description: |
        Update a specific bulk operation (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_BULK_OPERATION_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.bulkoperation+json:
            example:
              creationRamp: 15
            schema:
              $ref: '#/components/schemas/bulkOperation'
      responses:
        '200':
          description: A bulk operation was updated.
          content:
            application/vnd.com.nsn.cumulocity.bulkoperation+json:
              schema:
                $ref: '#/components/schemas/bulkOperation'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/bulkOperationNotFound'
    delete:
      operationId: deleteBulkOperationResource
      x-codegen-resource-name: deleteBulkOperation
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Bulk operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Delete a specific bulk operation
      description: |
        Delete a specific bulk operation (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_BULK_OPERATION_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A bulk operation was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/bulkOperationNotFound'
  /application:
    get:
      operationId: getApplicationManagementApiResource
      tags:
        - Application API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve URIs to collections of applications
      description: |
        Retrieve URIs and URI templates to collections of applications.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.applicationapi+json:
              schema:
                $ref: '#/components/schemas/ApplicationApiResource'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /application/applications:
    post:
      operationId: postApplicationCollectionResource
      x-codegen-resource-name: createApplication
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Create an application
      description: |
        Create an application on your tenant.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/application/applications" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/application/applications")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/application/applications")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.application+json:
            example:
              contextPath: myapplication
              key: my-application-key
              name: my-application
              type: HOSTED
            schema:
              allOf:
                - required:
                    - key
                    - name
                    - type
                - $ref: '#/components/schemas/application'
      responses:
        '201':
          description: An application was created.
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '409':
          $ref: '#/components/responses/applicationDuplicatedKeyName'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getAbstractApplicationCollectionResource
      x-codegen-resource-name: getApplications
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_application_name'
        - $ref: '#/components/parameters/queryParam_application_owner'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_application_providedFor'
        - $ref: '#/components/parameters/queryParam_application_subscriber'
        - $ref: '#/components/parameters/queryParam_application_tenant'
        - $ref: '#/components/parameters/queryParam_application_type'
        - $ref: '#/components/parameters/queryParam_application_user'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
        - $ref: '#/components/parameters/queryParam_hasVersions'
      tags:
        - Applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve all applications
      description: |
        Retrieve all applications on your tenant.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/applications" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the list of applications is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.applicationcollection+json:
              schema:
                $ref: '#/components/schemas/ApplicationCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/application/applications/{id}':
    parameters:
      - $ref: '#/components/parameters/applicationId'
    get:
      operationId: getApplicationResource
      x-codegen-resource-name: getApplication
      tags:
        - Applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve a specific application
      description: |
        Retrieve a specific application (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ <b>OR</b> current user has explicit access to the application
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the application is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/applicationNotFound'
    put:
      operationId: putApplicationResource
      x-codegen-resource-name: updateApplication
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Update a specific application
      description: |
        Update a specific application (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/application/applications/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/application/applications/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/application/applications/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.application+json:
            example:
              name: my-application
              availability: PRIVATE
            schema:
              allOf:
                - $ref: '#/components/schemas/application'
                - properties:
                    type:
                      readOnly: true
      responses:
        '200':
          description: An application was updated.
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/applicationNotFound'
    delete:
      operationId: deleteApplicationResource
      x-codegen-resource-name: deleteApplication
      parameters:
        - $ref: '#/components/parameters/queryParam_application_force'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Delete an application
      description: |
        Delete an application (by a given ID).
        This method is not supported by microservice applications.

        > **&#9432; Info:** With regards to a hosted application, there is a caching mechanism in place that keeps the information about the placement of application files (html, javascript, css, fonts, etc.). Removing a hosted application, in normal circumstances, will cause the subsequent requests for application files to fail with an HTTP 404 error because the application is removed synchronously, its files are immediately removed on the node serving the request and at the same time the information is propagated to other nodes – but in rare cases there might be a delay with this propagation. In such situations, the files of the removed application can be served from those nodes up until the aforementioned cache expires. For the same reason, the cache can also cause HTTP 404 errors when the application is updated as it will keep the path to the files of the old version of the application. The cache is filled on demand, so there should not be issues if application files were not accessed prior to the delete request. The expiration delay of the cache can differ, but should not take more than one minute.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN <b>AND</b> tenant is the owner of the application
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/application/applications/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/application/applications/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/application/applications/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: An application was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/applicationNotFound'
  '/application/applications/{id}/binaries':
    parameters:
      - $ref: '#/components/parameters/applicationId'
    post:
      operationId: postBinaryApplicationContentResource
      x-codegen-resource-name: uploadApplicationAttachment
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Application binaries
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Upload an application attachment
      description: |
        Upload an application attachment (by a given application ID).

        For the applications of type “microservice” and “web application” to be available for Cumulocity platform users, an attachment ZIP file must be uploaded.

        For a microservice application, the ZIP file must consist of:

        * cumulocity.json - file describing the deployment
        * image.tar - executable Docker image

        For a web application, the ZIP file must include an index.html file in the root directory.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN <b>AND</b> tenant is the owner of the application
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/application/applications/{id}/binaries" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --form "file=@app-binary.zip"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/binaries");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Accept", "application/json");
            request.AddFile("file", "app-binary.zip");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/application/applications/{id}/binaries")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Accept", "application/json")
                .field("file", new File("app-binary.zip"))
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/application/applications/{id}/binaries")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json"
                })
                .attach("file", "app-binary.zip")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}/binaries"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json"
            }
            files = [("file", open("app-binary.zip", "rb"))]
            response = requests.request("POST", url, headers=headers, files = files)
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  description: The ZIP file to be uploaded.
                  type: string
                  format: binary
            encoding:
              file:
                contentType: application/zip
      responses:
        '201':
          description: The application attachments have been uploaded.
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
        '401':
          $ref: '#/components/responses/unauthorizedError'
    get:
      operationId: getBinaryApplicationContentResource
      x-codegen-resource-name: getApplicationAttachments
      tags:
        - Application binaries
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve all application attachments
      description: |
        Retrieve all application attachments.
        This method is not supported by microservice applications.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}/binaries" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/binaries");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/binaries")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}/binaries")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}/binaries"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the application attachments are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.applicationbinaries+json:
              schema:
                $ref: '#/components/schemas/ApplicationBinaries'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/applicationNotFound'
  '/application/applications/{id}/versions?version=1.0':
    get:
      operationId: getApplicationVersionResource
      x-codegen-resource-name: getApplicationVersion
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/applicationVersionAcceptHeader'
        - $ref: '#/components/parameters/queryParam_application_version_version'
        - $ref: '#/components/parameters/queryParam_application_version_tag'
      tags:
        - Application versions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve a specific version of an application
      description: |-
        Retrieve the selected version of an application in your tenant. To select the version, use only the version or only the tag query parameter.
        <section><h5>Required roles</h5> ROLE_APPLICATION_MANAGEMENT_READ </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0" \
            --header "Authorization: Basic <AUTHORIZATION>"
            --header 'Accept: application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9");
            request.AlwaysMultipartFormData = true;

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the application version is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.applicationVersion+json:
              schema:
                $ref: '#/components/schemas/ApplicationVersion'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/applicationNotFound'
        '422':
          description: both parameters (version and tag) are present.
  '/application/applications/{id}/versions':
    parameters:
      - $ref: '#/components/parameters/applicationId'
    get:
      operationId: getApplicationVersionCollectionResource
      x-codegen-resource-name: getApplicationVersions
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Application versions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve all versions of an application
      description: |
        Retrieve all versions of an application in your tenant.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}/versions" \
            --header "Authorization: Basic <AUTHORIZATION>"
            --header "Accept: application/vnd.com.nsn.cumulocity.applicationVersionCollection+json;charset=UTF-8;ver=0.9"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/versions");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Accept", "application/vnd.com.nsn.cumulocity.applicationVersionCollection+json;charset=UTF-8;ver=0.9");
            request.AlwaysMultipartFormData = true;

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/versions")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Accept", "application/vnd.com.nsn.cumulocity.applicationVersionCollection+json;charset=UTF-8;ver=0.9")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}/versions")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/vnd.com.nsn.cumulocity.applicationVersionCollection+json;charset=UTF-8;ver=0.9"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}/versions"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/vnd.com.nsn.cumulocity.applicationVersionCollection+json;charset=UTF-8;ver=0.9"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the list of application versions is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.applicationVersionCollection+json:
              schema:
                $ref: '#/components/schemas/ApplicationVersionCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/applicationVersionNotFound'
        '422':
          description: This application doesn't support versioning.
    post:
      operationId: postApplicationVersionResource
      x-codegen-resource-name: createApplicationVersion
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Application versions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Create an application version
      description: |
        Create an application version in your tenant.

        Uploaded version and tags can only contain upper and lower case letters, integers and `.`,` + `,` -`. Other characters are prohibited.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/application/applications/{id}/versions" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9" \
            --form 'applicationVersion="{
            \"version\": \"1.3\",
            \"tags\": [
                \"tag4\"
            ]
            }"' \
            --form 'applicationBinary=@"{{path_to_file}}/app.zip"'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/versions");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9");
            request.AddParameter("applicationVersion", "{
            \"version\": \"1.3\",
            \"tags\": [
                \"tag4\"
            ]
            }");
            request.AddFile("applicationBinary", "{{path_to_file}}/app.zip");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("cumulocity.default.svc.cluster.local/application/applications/{id}/versions")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9")
              .field("applicationVersion", "{
                \"version\": \"1.3\",
                \"tags\": [
                    \"tag4\"
                ]
            }")
              .field("file", new File("{{path_to_file}}/app.zip"))
              .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/application/applications/{id}/versions")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
                })
                .field('applicationVersion', '{\n    "version": "1.3",\n    "tags": [\n        "tag4"\n    ]\n}')
                .attach('file', '{{path_to_file}}/app.zip')
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}/versions"
            payload={'applicationVersion': '{
            "version": "1.3",
            "tags": [
                "tag4"
            ]
            }'}
            files=[
              ('applicationBinary',('app.zip',open('{{path_to_file}}','rb'),'application/zip'))
            ]
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
            }
            response = requests.request("POST", url, headers=headers, data=payload, files=files)
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - applicationBinary
                - applicationVersion
              properties:
                applicationBinary:
                  description: The ZIP file to be uploaded.
                  type: string
                  format: binary
                applicationVersion:
                  description: The JSON file with version information.
                  type: string
            encoding:
              applicationBinary:
                contentType: application/zip
      responses:
        '201':
          description: An application version was created.
          content:
            application/vnd.com.nsn.cumulocity.applicationVersion+json:
              schema:
                $ref: '#/components/schemas/ApplicationVersion'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/applicationVersionNotFound'
        '409':
          $ref: '#/components/responses/applicationVersionInvalid'
        '422':
          description: tag or version contains unacceptable characters.
    delete:
      operationId: deleteApplicationVersionResource
      x-codegen-resource-name: deleteApplicationVersion
      parameters:
        - $ref: '#/components/parameters/queryParam_application_version_version'
        - $ref: '#/components/parameters/queryParam_application_version_tag'
      tags:
        - Application versions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Delete a specific version of an application
      description: |
        Delete a specific version of an application in your tenant, by a given tag or version.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AlwaysMultipartFormData = true;

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}/versions?version=3.0"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A version was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/applicationVersionNotFound'
        '409':
          description: Version with tag latest cannot be removed.
        '422':
          description: both parameters (version and tag) are present.
  '/application/applications/{id}/versions/{version}':
    put:
      operationId: putApplicationVersionResource
      x-codegen-resource-name: updateApplicationVersion
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/applicationVersion'
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Application versions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Replace an application version's tags
      description: |
        Replaces the tags of a given application version in your tenant.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/application/applications/{id}/versions/{version}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9" \
            --data-raw '{"tags":["tag1"]}'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/versions/{version}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9");
            request.AddParameter("application/json", "{"tags":["tag1"]}",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("cumulocity.default.svc.cluster.local/application/applications/{id}/versions/{version}")
              .header("Authorization", "Basic <AUTHORIZATION>")
              .header("Accept", "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9")
              .body("{"tags":["tag1"]}")
              .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/application/applications/{id}/versions/{version}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
                })
                .send(JSON.stringify({"tags":["tag1"]}))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}/versions/{version}"
            payload = {"tags":["tag1"]}
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9"
            }
            response = requests.request("PUT", url, headers=headers, data=payload)
            print(response.text)
      requestBody:
        required: true
        content:
          application/json:
            example:
              tags:
                - tag-1
                - latest
            schema:
              $ref: '#/components/schemas/ApplicationVersionTag'
      responses:
        '201':
          description: An application version was updated.
          content:
            application/vnd.com.nsn.cumulocity.applicationVersion+json:
              schema:
                $ref: '#/components/schemas/ApplicationVersion'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/applicationVersionNotFound'
        '409':
          $ref: '#/components/responses/applicationVersionInvalid'
        '422':
          description: tag contains unacceptable characters.
  '/application/applications/{id}/binaries/{binaryId}':
    parameters:
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/binaryId'
    get:
      operationId: getBinaryApplicationContentResourceById
      x-codegen-resource-name: getApplicationAttachment
      tags:
        - Application binaries
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve a specific application attachment
      description: |
        Retrieve a specific application attachment (by a given application ID and a given binary ID).
        This method is not supported by microservice applications.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the application attachment is sent as a ZIP file in the response.
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/unauthorizedError'
    delete:
      operationId: deleteBinaryApplicationContentResourceById
      x-codegen-resource-name: deleteApplicationAttachment
      tags:
        - Application binaries
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Delete a specific application attachment
      description: |
        Delete  a specific application attachment (by a given application ID and a given binary ID).
        This method is not supported by microservice applications.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN <b>AND</b> tenant is the owner of the application
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}/binaries/{binaryId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: An application binary was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
  '/application/applications/{id}/bootstrapUser':
    parameters:
      - $ref: '#/components/parameters/applicationId'
    get:
      operationId: getApplicationUserRepresentation
      x-codegen-resource-name: getBootstrapUser
      tags:
        - Bootstrap user
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve the bootstrap user for a specific application
      description: |
        Retrieve the bootstrap user for a specific application (by a given ID).

        This only works for microservice applications.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/applications/{id}/bootstrapUser" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/bootstrapUser");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applications/{id}/bootstrapUser")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applications/{id}/bootstrapUser")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}/bootstrapUser"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the bootstrap user of the application is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.user+json:
              schema:
                $ref: '#/components/schemas/BootstrapUser'
        '400':
          $ref: '#/components/responses/applicationBootstrapUserBadRequest'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/application/applications/{id}/clone':
    parameters:
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/queryParam_application_version_version'
      - $ref: '#/components/parameters/queryParam_application_version_tag'
    post:
      operationId: postApplicationResource
      x-codegen-resource-name: copyApplication
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Copy an application
      description: |
        Copy an application (by a given ID).

        This method is not supported by microservice applications.

        A request to the "clone" resource creates a new application based on an already existing one.

        The properties are copied to the newly created application and the prefix "clone" is added to the properties `name`, `key` and `contextPath` in order to be unique.

        If the target application is hosted and has an active version, the new application will have the active version with the same content.

        If the original application is hosted with versions, then only one binary version is cloned. By default it is a version with the "latest" tag. You can also specify a target version directly by using exactly one of the query parameters `version` or `tag`.
        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/application/applications/{id}/clone" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applications/{id}/clone");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/application/applications/{id}/clone")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/application/applications/{id}/clone")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applications/{id}/clone"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = {})
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: An application was copied.
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
              example:
                availability: PRIVATE
                contextPath: clonemyapplication
                id: '20200369'
                key: clonemy-application-key
                name: clonemy-application
                owner:
                  self: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007'
                  tenant:
                    id: t07007007
                self: 'https://<TENANT_DOMAIN>/application/applications/20200369'
                type: HOSTED
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '422':
          description: Unprocessable Entity – method not supported
  '/application/applicationsByName/{name}':
    parameters:
      - $ref: '#/components/parameters/applicationName'
    get:
      operationId: getApplicationsByNameCollectionResource
      x-codegen-resource-name: getApplicationsByName
      tags:
        - Applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve applications by name
      description: |
        Retrieve applications by name.

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/applicationsByName/{name}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applicationsByName/{name}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applicationsByName/{name}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applicationsByName/{name}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applicationsByName/{name}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the applications are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.applicationcollection+json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApplicationCollection'
                  - properties:
                      self:
                        allOf:
                          - $ref: '#/components/schemas/desc_self'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByName?pageSize=5&currentPage=2'
                      prev:
                        allOf:
                          - $ref: '#/components/schemas/desc_prevPage'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByName/{name}?pageSize=5&currentPage=1'
                      next:
                        allOf:
                          - $ref: '#/components/schemas/desc_nextPage'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByName/{name}?pageSize=5&currentPage=3'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/application/applicationsByTenant/{tenantId}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
    get:
      operationId: getApplicationsByTenantCollectionResource
      x-codegen-resource-name: getApplicationsByTenant
      tags:
        - Applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve applications by tenant
      description: |
        Retrieve applications subscribed or owned by a particular tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the applications are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.applicationcollection+json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApplicationCollection'
                  - properties:
                      self:
                        allOf:
                          - $ref: '#/components/schemas/desc_self'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByTenant?pageSize=5&currentPage=2'
                      prev:
                        allOf:
                          - $ref: '#/components/schemas/desc_prevPage'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}?pageSize=5&currentPage=1'
                      next:
                        allOf:
                          - $ref: '#/components/schemas/desc_nextPage'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}?pageSize=5&currentPage=3'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/application/applicationsByOwner/{tenantId}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
    get:
      operationId: getApplicationsByOwnerCollectionResource
      x-codegen-resource-name: getApplicationsByOwner
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve applications by owner
      description: |
        Retrieve all applications owned by a particular tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_APPLICATION_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the applications are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.applicationcollection+json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApplicationCollection'
                  - properties:
                      self:
                        allOf:
                          - $ref: '#/components/schemas/desc_self'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByOwner?pageSize=5&currentPage=2'
                      prev:
                        allOf:
                          - $ref: '#/components/schemas/desc_prevPage'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}?pageSize=5&currentPage=1'
                      next:
                        allOf:
                          - $ref: '#/components/schemas/desc_nextPage'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}?pageSize=5&currentPage=3'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/application/applicationsByUser/{username}':
    parameters:
      - $ref: '#/components/parameters/username'
    get:
      operationId: getApplicationsByUserCollectionResource
      x-codegen-resource-name: getApplicationsByUser
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve applications by user
      description: |
        Retrieve all applications for a particular user (by a given username).

        <section><h5>Required roles</h5>
        (ROLE_USER_MANAGEMENT_OWN_READ <b>AND</b> is the current user) <b>OR</b> (ROLE_USER_MANAGEMENT_READ <b>AND</b> ROLE_APPLICATION_MANAGEMENT_READ)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/applicationsByUser/{username}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/applicationsByUser/{username}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/applicationsByUser/{username}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/applicationsByUser/{username}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/applicationsByUser/{username}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the applications are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.applicationcollection+json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApplicationCollection'
                  - properties:
                      self:
                        allOf:
                          - $ref: '#/components/schemas/desc_self'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByUser?pageSize=5&currentPage=2'
                      prev:
                        allOf:
                          - $ref: '#/components/schemas/desc_prevPage'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByUser/{username}?pageSize=5&currentPage=1'
                      next:
                        allOf:
                          - $ref: '#/components/schemas/desc_nextPage'
                          - example: 'https://<TENANT_DOMAIN>/application/applicationsByUser/{username}?pageSize=5&currentPage=3'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /application/currentApplication:
    get:
      operationId: getCurrentApplicationResource
      x-codegen-resource-name: getCurrentApplication
      tags:
        - Current application
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve the current application
      description: |
        Retrieve the current application.
        This only works inside an application, for example, a microservice.

        <section><h5>Required roles</h5>
        Microservice bootstrap user required.
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/currentApplication" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/currentApplication");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/currentApplication")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/currentApplication")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/currentApplication"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the current application sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
    put:
      deprecated: true
      operationId: putCurrentApplicationResource
      x-codegen-resource-name: updateCurrentApplication
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Current application
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Update the current application
      description: |
        Update the current application.
        This only works inside an application, for example, a microservice. This method is deprecated as it is only used by legacy microservices that are not running on Kubernetes.

        <section><h5>Required roles</h5>
        Microservice bootstrap user required.
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/application/currentApplication" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/currentApplication");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/application/currentApplication")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/application/currentApplication")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/currentApplication"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.application+json:
            example:
              name: my-application
            schema:
              $ref: '#/components/schemas/application'
      responses:
        '200':
          description: The current application was updated.
          content:
            application/vnd.com.nsn.cumulocity.application+json:
              schema:
                $ref: '#/components/schemas/application'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
  /application/currentApplication/settings:
    get:
      operationId: getCurrentApplicationResourceSettings
      x-codegen-resource-name: getCurrentApplicationSettings
      tags:
        - Current application
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve the current application settings
      description: |
        Retrieve the current application settings.
        This only works inside an application, for example, a microservice.

        <section><h5>Required roles</h5>
        Microservice bootstrap user <b>OR</b> microservice service user required.
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/currentApplication/settings" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/currentApplication/settings");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/currentApplication/settings")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/currentApplication/settings")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/currentApplication/settings"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the current application settings are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.applicationsettings+json:
              schema:
                $ref: '#/components/schemas/application_settings'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
  /application/currentApplication/subscriptions:
    get:
      operationId: getApplicationUserCollectionRepresentation
      x-codegen-resource-name: getSubscribedUsers
      tags:
        - Current application
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve the subscribed users of the current application
      description: |
        Retrieve the subscribed users of the current application.

        <section><h5>Required roles</h5>
        Microservice bootstrap user required.
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/application/currentApplication/subscriptions" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/application/currentApplication/subscriptions");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/application/currentApplication/subscriptions")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/application/currentApplication/subscriptions")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/application/currentApplication/subscriptions"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the list of subscribed users for the current application is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.applicationusercollection+json:
              schema:
                $ref: '#/components/schemas/ApplicationUserCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /audit:
    get:
      operationId: getAuditApiResource
      tags:
        - Audit API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Retrieve URIs to collections of audits
      description: |
        Retrieve URIs and URI templates to collections of audit records.

        <section><h5>Required roles</h5>
        ROLE_AUDIT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/audit" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/audit");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/audit")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/audit")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/audit"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.auditapi+json:
              schema:
                $ref: '#/components/schemas/auditApiResource'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /audit/auditRecords:
    post:
      operationId: postAuditRecordCollectionResource
      x-codegen-resource-name: createAuditRecord
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Audits
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Create an audit record
      description: |
        Create an audit record.

        <section><h5>Required roles</h5>
        ROLE_AUDIT_ADMIN <b>OR</b> ROLE_SYSTEM <b>OR</b> AUDIT_ADMIN permission on the resource
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.auditrecord+json:
            example:
              activity: Operation created
              source:
                id: '251982'
              text: 'Operation created: status=''PENDING'''
              time: '2020-03-19T12:03:27.845Z'
              type: Operation
              user: rina
            schema:
              $ref: '#/components/schemas/auditRecord'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/audit/auditRecords" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/audit/auditRecords");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/audit/auditRecords")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/audit/auditRecords")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/audit/auditRecords"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: An audit record was created.
          content:
            application/vnd.com.nsn.cumulocity.auditrecord+json:
              schema:
                $ref: '#/components/schemas/auditRecord'
        '401':
          $ref: '#/components/responses/unauthorizedError'
    get:
      operationId: getAuditRecordCollectionResource
      x-codegen-resource-name: getAuditRecords
      parameters:
        - $ref: '#/components/parameters/queryParam_audit_application'
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_audit_dateFrom'
        - $ref: '#/components/parameters/queryParam_audit_dateTo'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_audit_source'
        - $ref: '#/components/parameters/queryParam_audit_type'
        - $ref: '#/components/parameters/queryParam_audit_user'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Audits
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all audit records
      description: |
        Retrieve all audit records registered on your tenant, or a specific subset based on queries.
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/audit/auditRecords" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/audit/auditRecords");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/audit/auditRecords")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/audit/auditRecords")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/audit/auditRecords"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/auditRecordCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/audit/auditRecords/{id}':
    parameters:
      - $ref: '#/components/parameters/auditId'
    get:
      operationId: getAuditRecordResource
      x-codegen-resource-name: getAuditRecord
      tags:
        - Audits
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific audit record
      description: |
        Retrieve a specific audit record by a given ID.

        <section><h5>Required roles</h5>
        ROLE_AUDIT_READ <b>OR</b> AUDIT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/audit/auditRecords/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/audit/auditRecords/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/audit/auditRecords/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/audit/auditRecords/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/audit/auditRecords/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/auditFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /event:
    get:
      operationId: getEventsApiResource
      tags:
        - Event API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve URIs to collections of events
      description: |
        Retrieve URIs and URI templates to collections of events.

        <section><h5>Required roles</h5>
        ROLE_EVENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/event" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/event");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/event")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/event")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/event"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.eventapi+json:
              schema:
                $ref: '#/components/schemas/eventsApiResource'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /event/events:
    post:
      operationId: postEventCollectionResource
      x-codegen-resource-name: createEvent
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Events
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create an event
      description: |
        An event must be associated with a source (managed object) identified by an ID.<br>
        In general, each event consists of:

        *  A type to identify the nature of the event.
        *  A time stamp to indicate when the event was last updated.
        *  A description of the event.
        *  The managed object which originated the event.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.event+json:
            example:
              source:
                id: '251982'
              text: 'Sms sent: Alarm occurred'
              time: '2020-03-19T12:03:27.845Z'
              type: c8y_OutgoingSmsLog
            schema:
              allOf:
                - $ref: '#/components/schemas/event'
                - required:
                    - source
                    - type
                    - text
                    - time
                  properties:
                    source:
                      required:
                        - id
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/event/events" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/event/events");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/event/events")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/event/events")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/event/events"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: An event was created.
          content:
            application/vnd.com.nsn.cumulocity.event+json:
              schema:
                $ref: '#/components/schemas/event'
              example:
                source:
                  id: '251982'
                  self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/251982'
                text: 'Sms sent: Alarm occurred'
                time: '2020-03-19T12:03:27.845Z'
                type: c8y_OutgoingSmsLog
                creationTime: '2020-03-19T22:09:06.881+01:00'
                lastUpdated: '2020-03-19T22:09:06.881+01:00'
                id: '51994'
                self: 'https://<TENANT_DOMAIN>/event/events/51994'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getEventCollectionResource
      x-codegen-resource-name: getEvents
      parameters:
        - $ref: '#/components/parameters/queryParam_event_createdFrom'
        - $ref: '#/components/parameters/queryParam_event_createdTo'
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_event_dateFrom'
        - $ref: '#/components/parameters/queryParam_event_dateTo'
        - $ref: '#/components/parameters/queryParam_fragmentType'
        - $ref: '#/components/parameters/queryParam_fragmentValue'
        - $ref: '#/components/parameters/queryParam_lastUpdatedFrom'
        - $ref: '#/components/parameters/queryParam_lastUpdatedTo'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_event_revert'
        - $ref: '#/components/parameters/queryParam_event_source'
        - $ref: '#/components/parameters/queryParam_event_type'
        - $ref: '#/components/parameters/queryParam_event_withSourceAssets'
        - $ref: '#/components/parameters/queryParam_event_withSourceDevices'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Events
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all events
      description: |
        Retrieve all events on your tenant.

        In case of executing [range queries](https://en.wikipedia.org/wiki/Range_query_(database)) between an upper and lower boundary, for example, querying using `dateFrom`–`dateTo` or `createdFrom`–`createdTo`, the newest registered events are returned first. It is possible to change the order using the query parameter `revert=true`.

        <section><h5>Required roles</h5>
        ROLE_EVENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/event/events" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/event/events");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/event/events")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/event/events")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/event/events"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/eventCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
    delete:
      operationId: deleteEventCollectionResource
      x-codegen-resource-name: deleteEvents
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
        - $ref: '#/components/parameters/queryParam_event_createdFrom'
        - $ref: '#/components/parameters/queryParam_event_createdTo'
        - $ref: '#/components/parameters/queryParam_event_dateFrom'
        - $ref: '#/components/parameters/queryParam_event_dateTo'
        - $ref: '#/components/parameters/queryParam_fragmentType'
        - $ref: '#/components/parameters/queryParam_event_source'
        - $ref: '#/components/parameters/queryParam_event_type'
      tags:
        - Events
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove event collections
      description: |
        Remove event collections specified by query parameters.

        DELETE requests are not synchronous. The response could be returned before the delete request has been completed. This may happen especially when the deleted event has a lot of associated data. After sending the request, the platform starts deleting the associated data in an asynchronous way. Finally, the requested event is deleted after all associated data has been deleted.

        > **⚠️ Important:** DELETE requires at least one of the following parameters: `source`, `dateFrom`, `dateTo`, `createdFrom`, `createdTo`.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/event/events?source=<managedObjectId>" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/event/events?source=<managedObjectId>");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/event/events?source=<managedObjectId>")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/event/events?source=<managedObjectId>")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/event/events?source=<managedObjectId>"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A collection of events was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
  '/event/events/{id}':
    parameters:
      - $ref: '#/components/parameters/eventId'
    get:
      operationId: getEventResource
      x-codegen-resource-name: getEvent
      tags:
        - Events
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific event
      description: |
        Retrieve a specific event by a given ID.

        <section><h5>Required roles</h5>
        ROLE_EVENT_READ <b>OR</b> owner of the source <b>OR</b> EVENT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/event/events/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/event/events/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/event/events/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/event/events/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/eventFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/eventNotFound'
    put:
      operationId: putEventResource
      x-codegen-resource-name: updateEvent
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Events
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a specific event
      description: |
        Update a specific event by a given ID. Only its text description and custom fragments can be updated.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.event+json:
            example:
              text: Location update.
            schema:
              allOf:
                - $ref: '#/components/schemas/event'
                - properties:
                    source:
                      readOnly: true
                    time:
                      readOnly: true
                    type:
                      readOnly: true
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/event/events/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/event/events/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/event/events/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/event/events/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: An event was updated.
          content:
            application/vnd.com.nsn.cumulocity.event+json:
              schema:
                $ref: '#/components/schemas/event'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/eventNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
    delete:
      operationId: deleteEventResource
      x-codegen-resource-name: deleteEvent
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Events
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific event
      description: |
        Remove a specific event by a given ID.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/event/events/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/event/events/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/event/events/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/event/events/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: An event was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/eventNotFound'
  '/event/events/{id}/binaries':
    parameters:
      - $ref: '#/components/parameters/eventId'
    post:
      operationId: postEventBinaryResource
      x-codegen-resource-name: uploadEventAttachment
      tags:
        - Attachments
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Attach a file to a specific event
      description: |
        Upload a file (binary) as an attachment of a specific event by a given ID.
        The size of the attachment is configurable, and the default size is 50 MiB. The default chunk size is 5MiB.

        > **&#9432; Info:** If there is a binary already attached to the event, the POST request results in a 409 error.

        When the file has been uploaded, the corresponding event contains the fragment `c8y_IsBinary` similar to:

        ```json
        "c8y_IsBinary": {
            "name": "hello.txt",
            "length": 365,
            "type": "text/plain"
        }
        ```

        There are two request body schemas you can use for your POST requests.
        `text/plain` is preselected (see below).
        If you set it to `multipart/form-data` each value is sent as a block of data (body part), with a user agent-defined delimiter (`boundary`) separating each part.
        The keys are given in the `Content-Disposition` header of each part.

        ```http
        POST /event/events/{id}/binaries
        Host: https://<TENANT_DOMAIN>
        Authorization: <AUTHORIZATION>
        Accept: application/json
        Content-Type: multipart/form-data;boundary="boundary"

        --boundary
        Content-Disposition: form-data; name="object"

        { "name": "hello.txt", "type": "text/plain" }
        --boundary
        Content-Disposition: form-data; name="file"; filename="hello.txt"
        Content-Type: text/plain

        <FILE_CONTENTS>
        --boundary--
        ```

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              description: The Content-Type must correspond to the file type.
              type: string
              format: binary
          multipart/form-data:
            schema:
              type: object
              required:
                - object
                - file
              properties:
                object:
                  $ref: '#/components/schemas/binaryInfo'
                file:
                  description: Path of the file to be uploaded.
                  type: string
                  format: binary
                  example: hello.txt
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/event/events/{id}/binaries" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: text/plain" \
            --data-binary "@/attachment/file.txt"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}/binaries");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("text/plain", "<file contents here>", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/event/events/{id}/binaries")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Accept", "application/json")
                .body("<file contents here>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/event/events/{id}/binaries")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "text/plain"
                })
                .send("<file contents here>")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/event/events/{id}/binaries"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "text/plain"
            }
            response = requests.request("POST", url, headers=headers, data = "<file contents here>")
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A file was uploaded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventBinary'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/eventNotFound'
        '409':
          $ref: '#/components/responses/attachmentDuplicated'
    get:
      operationId: getEventBinaryResource
      x-codegen-resource-name: getEventAttachment
      tags:
        - Attachments
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve the attached file of a specific event
      description: |
        Retrieve the attached file (binary) of a specific event by a given ID.

        <section><h5>Required roles</h5>
        ROLE_EVENT_READ <b>OR</b> EVENT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/event/events/{id}/binaries" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}/binaries");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/event/events/{id}/binaries")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/event/events/{id}/binaries")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/event/events/{id}/binaries"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the file is sent in the response.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/attachmentNotFound'
    put:
      operationId: putEventBinaryResource
      x-codegen-resource-name: replaceEventAttachment
      tags:
        - Attachments
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Replace the attached file of a specific event
      description: |
        Upload and replace the attached file (binary) of a specific event by a given ID.<br>
        The size of the attachment is configurable, and the default size is 50 MiB. The default chunk size is 5MiB.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              format: binary
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/event/events/{id}/binaries" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: text/plain" \
            --data-binary "@/attachment/file.txt"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}/binaries");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("text/plain", "<file contents here>", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/event/events/{id}/binaries")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Accept", "application/json")
                .body("<file contents here>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/event/events/{id}/binaries")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "text/plain"
                })
                .send("<file contents here>")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/event/events/{id}/binaries"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "text/plain"
            }
            response = requests.request("PUT", url, headers=headers, data = "<file contents here>")
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A file was uploaded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventBinary'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/eventNotFound'
    delete:
      operationId: deleteEventBinaryResource
      x-codegen-resource-name: deleteEventAttachment
      tags:
        - Attachments
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove the attached file from a specific event
      description: |
        Remove the attached file (binary) from a specific event by a given ID.

        <section><h5>Required roles</h5>
        ROLE_EVENT_ADMIN <b>OR</b> owner of the source <b>OR</b> EVENT_ADMIN permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/event/events/{id}/binaries" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/event/events/{id}/binaries");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/event/events/{id}/binaries")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/event/events/{id}/binaries")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/event/events/{id}/binaries"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A file was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/eventNotFound'
  /features:
    get:
      operationId: listCurrentTenantFeatures
      tags:
        - Feature toggles API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve list of feature toggles with values for current tenant.
      description: |
        Retrieve a list of all defined feature toggles with values calculated for a tenant of authenticated user.

        <section><h5>Required roles</h5>
        none, any authenticated user can call this endpoint
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/features" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/features");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/features")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/features")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/features"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the feature toggles are sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureTogglesList'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/features/{featureKey}':
    parameters:
      - $ref: '#/components/parameters/featureKey'
    get:
      operationId: getCurrentTenantFeature
      tags:
        - Feature toggles API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific feature toggle with value for current tenant.
      description: |
        Retrieve a specific feature toggles defined under given key, with value calculated for a tenant of authenticated user.

        <section><h5>Required roles</h5>
        none, any authenticated user can call this endpoint
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the feature toggle is sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureToggle'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
  '/features/{featureKey}/by-tenant':
    parameters:
      - $ref: '#/components/parameters/featureKey'
    get:
      operationId: listTenantFeatureToggleValues
      tags:
        - Feature toggles API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve list of feature toggles values overrides of all tenants.
      description: |
        Retrieve a list of all existing feature toggle value overrides for all tenants.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN <b>AND</b> current tenant is management
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/features/{feature-key}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/features/{feature-key}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/features/{feature-key}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/features/{feature-key}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/features/{feature-key}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the feature toggles are sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantFeatureToggleValuesList'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
    put:
      operationId: setCurrentTenantFeatureToggleValue
      tags:
        - Feature toggles API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Sets the value of feature toggle override for the current tenant.
      description: |
        Sets the value of feature toggle override for a tenant of authenticated user.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN <b>AND</b> (current tenant is management <b>OR</b> the feature toggle phase is PUBLIC_PREVIEW or GENERALLY_AVAILABLE)
        </section>
      requestBody:
        required: true
        content:
          application/json:
            example:
              active: true
            schema:
              $ref: '#/components/schemas/featureToggleValue'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the feature toggle value override was set.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
    delete:
      operationId: unsetCurrentTenantFeatureToggleValue
      tags:
        - Feature toggles API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Removes the feature toggle override for the current tenant.
      description: |
        Removes the feature toggle override for a tenant of authenticated user.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN <b>AND</b> (current tenant is management <b>OR</b> the feature toggle phase is PUBLIC_PREVIEW or GENERALLY_AVAILABLE)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the feature toggle value override was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
  '/features/{featureKey}/by-tenant/{tenantId}':
    parameters:
      - $ref: '#/components/parameters/featureKey'
      - $ref: '#/components/parameters/tenantId'
    put:
      operationId: setGivenTenantFeatureToggleValue
      tags:
        - Feature toggles API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Sets the value of feature toggle override for a given tenant.
      description: |
        Sets the value of feature toggle override for a given tenant.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN <b>AND</b> current tenant is management.
        </section>
      requestBody:
        required: true
        content:
          application/json:
            example:
              active: true
            schema:
              $ref: '#/components/schemas/featureToggleValue'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant/{tenant-id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant/{tenant-id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant/{tenant-id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant/{tenant-id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant/{tenant-id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the feature toggle value override was set.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
    delete:
      operationId: unsetGivenTenantFeatureToggleValue
      tags:
        - Feature toggles API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Removes the feature toggle override for a given tenant.
      description: |
        Removes the feature toggle override for a given tenant.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN <b>AND</b> current tenant is management.
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant/{tenant-id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant/{tenant-id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant/{tenant-id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant/{tenant-id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/features/{feature-key}/by-tenant/{tenant-id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the feature toggle value override was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
  /inventory:
    get:
      operationId: getInventoryApiResource
      tags:
        - Inventory API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve URIs to collections of managed objects
      description: |
        Retrieve URIs and URI templates to collections of managed objects.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.inventoryapi+json:
              schema:
                $ref: '#/components/schemas/inventoryApiResource'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
  /inventory/binaries:
    post:
      operationId: postBinariesCollectionResource
      x-codegen-resource-name: uploadBinary
      tags:
        - Binaries
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Upload a file
      description: |
        Uploading a file (binary) requires providing the following properties:

        * `object` – In JSON format, it contains information about the file.
        * `file` – Contains the file to be uploaded.

        After the file has been uploaded, the corresponding managed object will contain the fragment `c8y_IsBinary`.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_INVENTORY_CREATE <b>OR</b> ROLE_BINARY_ADMIN <b>OR</b> ROLE_BINARY_CREATE
        </section>
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - object
                - file
              properties:
                object:
                  $ref: '#/components/schemas/binaryInfo'
                file:
                  description: Path of the file to be uploaded.
                  type: string
                  format: binary
                  example: hello.txt
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/inventory/binaries" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --form 'object={ "name" : "HelloWorld", "type" : "text/plain" }' \
            --form "file=@hello.txt"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/binaries");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("object", "{ \"name\" : \"HelloWorld\", \"type\" : \"text/plain\" }");
            request.AddFile("file", "hello.txt");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/inventory/binaries")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Accept", "application/json")
                .field("object", "{ \"name\" : \"HelloWorld\", \"type\" : \"text/plain\" }")
                .field("file", new File("hello.txt"))
                .asString();

                System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/inventory/binaries")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json"
                })
                .field("object", '{ "name" : "HelloWorld", "type" : "text/plain" }')
                .attach("file", "hello.txt")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/binaries"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json"
            }
            payload = { 'object' : '{ "name" : "HelloWorld", "type" : "text/plain" }'}
            files = [("file", open("hello.txt", "rb"))]

            response = requests.request("POST", url, headers= headers, data= payload, files= files)
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A file was uploaded.
          content:
            application/vnd.com.nsn.cumulocity.managedobject+json:
              schema:
                $ref: '#/components/schemas/binary'
        '400':
          $ref: '#/components/responses/invalidPayload'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
    get:
      operationId: getBinariesCollectionResource
      x-codegen-resource-name: getBinaries
      parameters:
        - $ref: '#/components/parameters/queryParam_inventory_childAdditionId'
        - $ref: '#/components/parameters/queryParam_inventory_childAssetId'
        - $ref: '#/components/parameters/queryParam_inventory_childDeviceId'
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_inventory_ids'
        - $ref: '#/components/parameters/queryParam_inventory_owner'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_inventory_textPrefix'
        - $ref: '#/components/parameters/queryParam_inventory_type'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Binaries
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Search for stored files
      description: |
        Retrieve metadata information about stored files. Search for files by query parameters. This will not download the files.
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/binaries" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/binaries");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/binaries")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/binaries")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/binaries"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/inventoryBinariesCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/inventory/binaries/{id}':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
    get:
      operationId: getBinariesResource
      x-codegen-resource-name: getBinary
      tags:
        - Binaries
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a stored file
      description: |
        Retrieve a stored file (managed object) by a given ID.
        Supports chunk download and resuming an interrupted download using the [`Range` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_BINARY_READ <b>OR</b> owner of the resource <b>OR</b> MANAGE_OBJECT_READ permission on the resource
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/binaries/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/binaries/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/binaries/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/binaries/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/binaries/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the file is sent in the response.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/unauthorizedError'
    put:
      operationId: putBinariesResource
      x-codegen-resource-name: replaceBinary
      tags:
        - Binaries
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Replace a file
      description: |
        Upload and replace the attached file (binary) of a specific managed object by a given ID.<br>

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_BINARY_ADMIN <b>OR</b> owner of the resource <b>OR</b> MANAGE_OBJECT_ADMIN permission on the resource
        </section>
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: The file to be uploaded.
              format: binary
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/inventory/binaries/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: text/plain" \
            --data-binary "@new_hello.txt"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/binaries/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "text/plain");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("text/plain", "<file contents here>", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/inventory/binaries/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "text/plain")
                .header("Accept", "application/json")
                .body("<file contents here>")
                .asString();

                System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/inventory/binaries/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "text/plain"
                })
                .send("<file contents here>")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/binaries/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "text/plain"
            }
            files = "<file contents here>"

            response = requests.request("PUT", url, headers= headers, files= files)
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A file was uploaded.
          content:
            application/vnd.com.nsn.cumulocity.managedobject+json:
              schema:
                $ref: '#/components/schemas/binary'
        '401':
          $ref: '#/components/responses/unauthorizedError'
    delete:
      operationId: deleteBinariesResource
      x-codegen-resource-name: removeBinary
      tags:
        - Binaries
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a stored file
      description: |
        Remove a managed object and its stored file by a given ID.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_BINARY_ADMIN <b>OR</b> owner of the resource <b>OR</b> MANAGE_OBJECT_ADMIN permission on the resource
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/binaries/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/binaries/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/binaries/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/binaries/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/binaries/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A managed object and its stored file was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /inventory/managedObjects:
    post:
      operationId: postManagedObjectCollectionResource
      x-codegen-resource-name: createManagedObject
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Managed objects
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create a managed object
      description: |
        Create a managed object, for example, a device with temperature measurements support or a binary switch.<br>
        In general, each managed object may consist of:

        *  A unique identifier that references the object.
        *  The name of the object.
        *  The most specific type of the managed object.
        *  A time stamp showing the last update.
        *  Fragments with specific meanings, for example, `c8y_IsDevice`, `c8y_SupportedOperations`.
        *  Any additional custom fragments.

        Imagine, for example, that you want to describe electric meters from different vendors. Depending on the make of the meter, one may have a relay and one may be capable to measure a single phase or three phases (for example, a three-phase electricity sensor). A fragment `c8y_ThreePhaseElectricitySensor` would identify such an electric meter. Devices' characteristics are identified by storing fragments for each of them.

        > **&#9432; Info:** For more details about fragments with specific meanings, refer to [Device management & connectivity > Device integration > Fragment library](https://www.cumulocity.com/docs/device-integration/fragment-library/) in the Cumulocity user documentation.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_INVENTORY_CREATE <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_CREATE
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.managedobject+json:
            example:
              name: My tracking device
              c8y_IsDevice: {}
              c8y_DeviceTypes:
                - deviceSubsetType
              c8y_SupportedOperations:
                - c8y_Restart
            schema:
              allOf:
                - $ref: '#/components/schemas/managedObject'
                - type: object
                  properties:
                    owner:
                      readOnly: true
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/inventory/managedObjects" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/inventory/managedObjects")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/inventory/managedObjects")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A managed object was created.
          content:
            application/vnd.com.nsn.cumulocity.managedobject+json:
              schema:
                $ref: '#/components/schemas/managedObject'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getManagedObjectCollectionResource
      x-codegen-resource-name: getManagedObjects
      parameters:
        - $ref: '#/components/parameters/queryParam_inventory_childAdditionId'
        - $ref: '#/components/parameters/queryParam_inventory_childAssetId'
        - $ref: '#/components/parameters/queryParam_inventory_childDeviceId'
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_fragmentType'
        - $ref: '#/components/parameters/queryParam_inventory_ids'
        - $ref: '#/components/parameters/queryParam_inventory_onlyRoots'
        - $ref: '#/components/parameters/queryParam_inventory_owner'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_inventory_deviceQuery'
        - $ref: '#/components/parameters/queryParam_query'
        - $ref: '#/components/parameters/queryParam_skipChildrenNames'
        - $ref: '#/components/parameters/queryParam_inventory_textPrefix'
        - $ref: '#/components/parameters/queryParam_inventory_type'
        - $ref: '#/components/parameters/queryParam_inventory_withChildren'
        - $ref: '#/components/parameters/queryParam_inventory_withChildrenCount'
        - $ref: '#/components/parameters/queryParam_inventory_withGroups'
        - $ref: '#/components/parameters/queryParam_withParents'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
        - $ref: '#/components/parameters/queryParam_withLatestValues'
      tags:
        - Managed objects
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all managed objects
      description: |
        Retrieve all managed objects (for example, devices, assets, etc.) registered in your tenant, or a subset based on queries.
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/inventoryObjectCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '422':
          $ref: '#/components/responses/invalidData'
  '/inventory/managedObjects/{id}':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
    get:
      operationId: getManagedObjectResource
      x-codegen-resource-name: getManagedObject
      parameters:
        - $ref: '#/components/parameters/queryParam_skipChildrenNames'
        - $ref: '#/components/parameters/queryParam_inventory_withChildren'
        - $ref: '#/components/parameters/queryParam_inventory_withChildrenCount'
        - $ref: '#/components/parameters/queryParam_withParents'
        - $ref: '#/components/parameters/queryParam_withLatestValues'
      tags:
        - Managed objects
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific managed object
      description: |
        Retrieve a specific managed object (for example, device, group, template) by a given ID.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/inventoryObjectFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
    put:
      operationId: putManagedObjectResource
      x-codegen-resource-name: updateManagedObject
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Managed objects
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a specific managed object
      description: |
        Update a specific managed object (for example, device) by a given ID.

        For example, if you want to specify that your managed object is a device, you must add the fragment `c8y_IsDevice`.


        The endpoint can also be used as a device availability heartbeat.
        If you only specifiy the `id`, it updates the date when the last message was received and no other property.
        The response then only contains the `id` instead of the full managed object.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.managedobject+json:
            example:
              c8y_IsDevice: {}
              name: My tracking device
            schema:
              $ref: '#/components/schemas/managedObject'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: A managed object was updated.
          content:
            application/vnd.com.nsn.cumulocity.managedobject+json:
              schema:
                $ref: '#/components/schemas/managedObject'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
    delete:
      operationId: deleteManagedObjectResource
      x-codegen-resource-name: deleteManagedObject
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
        - $ref: '#/components/parameters/queryParam_inventory_cascade'
        - $ref: '#/components/parameters/queryParam_inventory_forceCascade'
        - $ref: '#/components/parameters/queryParam_inventory_withDeviceUser'
      tags:
        - Managed objects
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific managed object
      description: |
        Remove a specific managed object (for example, device) by a given ID.

        > **&#9432; Info:** Inventory DELETE requests are not synchronous. The response could be returned before the delete request has been completed. This may happen especially when the deleted managed object has a lot of associated data. After sending the request, the platform starts deleting the associated data in an asynchronous way. Finally, the requested managed object is deleted after all associated data has been deleted.

        > **&#9432; Info:** By default, the delete operation is propagated to subgroups, but only if the object being deleted is a group. Deleting a parent group will also delete its subgroups. The cascade parameter controls whether the devices assigned to the groups are also deleted. When set to false, the devices remain intact even as the groups and subgroups are deleted. When set to true, all groups, subgroups, and their assigned devices are deleted.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A managed object was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '409':
          $ref: '#/components/responses/inventoryObjectDeleteConflict'
  '/inventory/managedObjects/{id}/availability':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
    get:
      operationId: getLastAvailabilityManagedObjectResource
      x-codegen-resource-name: getLatestAvailability
      tags:
        - Managed objects
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve the latest availability date of a specific managed object
      description: |
        Retrieve the date when a specific managed object (by a given ID) sent the last message to Cumulocity.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/availability" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/availability");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/availability")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/availability")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/availability"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the date is sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/managedObjectAvailability'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          description: A device with provided ID is not monitored.
  '/inventory/managedObjects/{id}/childAdditions':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
    post:
      operationId: postManagedObjectChildAdditionsResource
      x-codegen-resource-name: assignAsChildAddition
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Assign a managed object as child addition
      description: |
        The possible ways to assign child objects are:

        *  Assign an existing managed object (by a given child ID) as child addition of another managed object (by a given ID) by setting the Content-Type to application/vnd.com.nsn.cumulocity.managedobjectreference+json.
        *  Assign multiple existing managed objects (by given child IDs) as child additions of another managed object (by a given ID) by setting the Content-Type to application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json.
        *  Create a new managed object in the inventory and assign it as a child addition to another managed object (by a given ID) by setting the Content-Type to application/vnd.com.nsn.cumulocity.managedobject+json

        For sample requests and schema details for each method, simply select the appropriate header from either the "REQUEST BODY SCHEMA" dropdown menu or the "Content-Type" dropdown menu.


        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> ((owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source) <b>AND</b> (owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the child))
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreference+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddOne'
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
          application/vnd.com.nsn.cumulocity.managedobject+json:
            schema:
              $ref: '#/components/schemas/managedObject'
            example:
              name: New child object
              owner: manga
              c8y_IsDevice: {}
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A managed object was assigned as child addition.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
    get:
      operationId: getManagedObjectChildAdditionsResource
      x-codegen-resource-name: getChildAdditions
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_query'
        - $ref: '#/components/parameters/queryParam_inventory_withChildren'
        - $ref: '#/components/parameters/queryParam_inventory_withChildrenCount'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all child additions of a specific managed object
      description: |
        Retrieve all child additions of a specific managed object by a given ID, or a subset based on queries.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and all child additions are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
              schema:
                $ref: '#/components/schemas/ManagedObjectReferenceCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidData'
    delete:
      operationId: deleteManagedObjectChildAdditionResourceMultiple
      x-codegen-resource-name: unassignChildAdditions
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove specific child additions from its parent
      description: |
        Remove specific child additions (by given child IDs) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions" \
            --header "Authorization: Basic <AUTHORIZATION>"
            --header 'Content-Type: application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json' \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json");
            request.AddParameter("application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
            }
            response = requests.request("DELETE", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: Child additions were removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
  '/inventory/managedObjects/{id}/childAdditions/{childId}':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
      - $ref: '#/components/parameters/managedObjectChildId'
    get:
      operationId: getManagedObjectChildAdditionResource
      x-codegen-resource-name: getChildAddition
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific child addition of a specific managed object
      description: |
        Retrieve a specific child addition (by a given child ID) of a specific managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ <b>OR</b> MANAGE_OBJECT_READ permission on the source (parent)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the child addition is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreference+json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ManagedObjectReference'
                  - properties:
                      self:
                        example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidChildId'
    delete:
      operationId: deleteManagedObjectChildAdditionResource
      x-codegen-resource-name: unassignChildAddition
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific child addition from its parent
      description: |
        Remove a specific child addition (by a given child ID) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions/{childId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A child addition was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidChildId'
  '/inventory/managedObjects/{id}/childAssets':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
    post:
      operationId: postManagedObjectChildAssetsResource
      x-codegen-resource-name: assignAsChildAsset
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Assign a managed object as child asset
      description: |
        The possible ways to assign child objects are:

        *  Assign an existing managed object (by a given child ID) as child asset of another managed object (by a given ID) by setting the Content-Type to application/vnd.com.nsn.cumulocity.managedobjectreference+json.
        *  Assign multiple existing managed objects (by given child IDs) as child assets of another managed object (by a given ID) by setting the Content-Type to application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json.
        *  Create a managed object in the inventory and assign it as a child asset to another managed object (by a given ID) by setting the Content-Type to application/vnd.com.nsn.cumulocity.managedobject+json.

        For sample requests and schema details for each method, simply select the appropriate header from either the "REQUEST BODY SCHEMA" dropdown menu or the "Content-Type" dropdown menu.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> ((owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source) <b>AND</b> (owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the child))
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreference+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddOne'
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
          application/vnd.com.nsn.cumulocity.managedobject+json:
            schema:
              $ref: '#/components/schemas/managedObject'
            example:
              name: New child object
              owner: manga
              c8y_IsDevice: {}
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A managed object was assigned as child asset.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
    get:
      operationId: getManagedObjectChildAssetsResource
      x-codegen-resource-name: getChildAssets
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_query'
        - $ref: '#/components/parameters/queryParam_inventory_withChildren'
        - $ref: '#/components/parameters/queryParam_inventory_withChildrenCount'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all child assets of a specific managed object
      description: |
        Retrieve all child assets of a specific managed object by a given ID, or a subset based on queries.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and all child assets are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ManagedObjectReferenceCollection'
                  - properties:
                      prev:
                        example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets?pageSize=5&currentPage=1'
                      self:
                        example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets?pageSize=5&currentPage=2'
                      next:
                        example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets?pageSize=5&currentPage=3'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidData'
    delete:
      operationId: deleteManagedObjectChildAssetResourceMultiple
      x-codegen-resource-name: unassignChildAssets
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove specific child assets from its parent
      description: |
        Remove specific child assets (by given child IDs) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets" \
            --header "Authorization: Basic <AUTHORIZATION>"
            --header 'Content-Type: application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json' \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json");
            request.AddParameter("application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
            }
            response = requests.request("DELETE", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: Child assets were removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
  '/inventory/managedObjects/{id}/childAssets/{childId}':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
      - $ref: '#/components/parameters/managedObjectChildId'
    get:
      operationId: getManagedObjectChildAssetResource
      x-codegen-resource-name: getChildAsset
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific child asset of a specific managed object
      description: |
        Retrieve a specific child asset (by a given child ID) of a specific managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ <b>OR</b> MANAGE_OBJECT_READ permission on the source (parent)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the child asset is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreference+json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ManagedObjectReference'
                  - properties:
                      self:
                        example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidChildId'
    delete:
      operationId: deleteManagedObjectChildAssetResource
      x-codegen-resource-name: unassignChildAsset
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific child asset from its parent
      description: |
        Remove a specific child asset (by a given child ID) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets/{childId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A child asset was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidChildId'
  '/inventory/managedObjects/{id}/childDevices':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
    post:
      operationId: postManagedObjectChildDevicesResource
      x-codegen-resource-name: assignAsChildDevice
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Assign a managed object as child device
      description: |
        The possible ways to assign child objects are:

        *  Assign an existing managed object (by a given child ID) as child device of another managed object (by a given ID) by setting the Content-Type to application/vnd.com.nsn.cumulocity.managedobjectreference+json.
        *  Assign multiple existing managed objects (by given child IDs) as child devices of another managed object (by a given ID) by setting the Content-Type to application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json.
        *  Create a managed object in the inventory and assign it as a child device to another managed object (by a given ID) by setting the Content-Type to application/vnd.com.nsn.cumulocity.managedobject+json.

        For sample requests and schema details for each method, simply select the appropriate header from either the "REQUEST BODY SCHEMA" dropdown menu or the "Content-Type" dropdown menu.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> ((owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source) <b>AND</b> (owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the child))
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreference+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddOne'
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
          application/vnd.com.nsn.cumulocity.managedobject+json:
            schema:
              $ref: '#/components/schemas/managedObject'
            example:
              name: New child object
              owner: manga
              c8y_IsDevice: {}
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A managed object was assigned as child device.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
    get:
      operationId: getManagedObjectChildDevicesResource
      x-codegen-resource-name: getChildDevices
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_query'
        - $ref: '#/components/parameters/queryParam_inventory_withChildren'
        - $ref: '#/components/parameters/queryParam_inventory_withChildrenCount'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all child devices of a specific managed object
      description: |
        Retrieve all child devices of a specific managed object by a given ID, or a subset based on queries.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and all child devices are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ManagedObjectReferenceCollection'
                  - properties:
                      prev:
                        example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices?pageSize=5&currentPage=1'
                      self:
                        example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices?pageSize=5&currentPage=2'
                      next:
                        example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices?pageSize=5&currentPage=3'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidData'
    delete:
      operationId: deleteManagedObjectChildDeviceResourceMultiple
      x-codegen-resource-name: unassignChildDevices
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove specific child devices from its parent
      description: |
        Remove specific child devices (by given child IDs) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json:
            schema:
              $ref: '#/components/schemas/childOperationsAddMultiple'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices" \
            --header "Authorization: Basic <AUTHORIZATION>"
            --header 'Content-Type: application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json' \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json");
            request.AddParameter("application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Content-Type": "application/vnd.com.nsn.cumulocity.managedobjectreferencecollection+json"
            }
            response = requests.request("DELETE", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: Child devices were removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
  '/inventory/managedObjects/{id}/childDevices/{childId}':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
      - $ref: '#/components/parameters/managedObjectChildId'
    get:
      operationId: getManagedObjectChildDeviceResource
      x-codegen-resource-name: getChildDevice
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific child device of a specific managed object
      description: |
        Retrieve a specific child device (by a given child ID) of a specific managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ <b>OR</b> MANAGE_OBJECT_READ permission on the source (parent)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the child device is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.managedobjectreference+json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ManagedObjectReference'
                  - properties:
                      self:
                        example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidChildId'
    delete:
      operationId: deleteManagedObjectChildDeviceResource
      x-codegen-resource-name: unassignChildDevice
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Child operations
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific child device from its parent
      description: |
        Remove a specific child device (by a given child ID) from its parent (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> owner of the source (parent) <b>OR</b> owner of the child <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source (parent)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices/{childId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A child device was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '422':
          $ref: '#/components/responses/invalidChildId'
  '/inventory/managedObjects/{id}/supportedMeasurements':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
    get:
      operationId: getSupportedMeasurementsManagedObjectResource
      x-codegen-resource-name: getSupportedMeasurements
      tags:
        - Managed objects
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all supported measurement fragments of a specific managed object
      description: |
        Retrieve all measurement types of a specific managed object by a given ID.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedMeasurements" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedMeasurements");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedMeasurements")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedMeasurements")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedMeasurements"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and all measurement types are sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedMeasurements'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
  '/inventory/managedObjects/{id}/supportedSeries':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
    get:
      operationId: getSupportedSeriesManagedObjectResource
      x-codegen-resource-name: getSupportedSeries
      tags:
        - Managed objects
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all supported measurement fragments and series of a specific managed object
      description: |
        Retrieve all supported measurement fragments and series of a specific managed object by a given ID.

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedSeries" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedSeries");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedSeries")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedSeries")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/supportedSeries"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and all supported measurement series are sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedSeries'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
  '/inventory/managedObjects/{id}/user':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
    get:
      operationId: getManagedObjectUserResource
      x-codegen-resource-name: getManagedObjectUser
      tags:
        - Managed objects
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve the username and state of a specific managed object
      description: |
        Retrieve the device owner's username and state (enabled or disabled) of a specific managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the username and state are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.managedobjectuser+json:
              schema:
                $ref: '#/components/schemas/ManagedObjectUser'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
    put:
      operationId: putManagedObjectUserResource
      x-codegen-resource-name: updateManagedObjectUser
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Managed objects
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update the user's details of a specific managed object
      description: |
        Update the device owner's state (enabled or disabled) of a specific managed object (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_INVENTORY_ADMIN <b>OR</b> ROLE_MANAGED_OBJECT_ADMIN <b>OR</b> owner of the source <b>OR</b> MANAGE_OBJECT_ADMIN permission on the source
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.managedobjectuser+json:
            example:
              enabled: true
            schema:
              $ref: '#/components/schemas/ManagedObjectUser'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The user's details of a specific managed object were updated.
          content:
            application/vnd.com.nsn.cumulocity.managedobjectuser+json:
              schema:
                $ref: '#/components/schemas/ManagedObjectUser'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
  /identity:
    get:
      operationId: getIdentityApiResource
      tags:
        - Identity API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve URIs to collections of external IDs
      description: |
        Retrieve URIs and URI templates for associating external identifiers with unique identifiers.

        <section><h5>Required roles</h5>
        ROLE_IDENTITY_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/identity" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/identity");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/identity")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/identity")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/identity"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.identityapi+json:
              schema:
                $ref: '#/components/schemas/identityApiResource'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/identity/globalIds/{id}/externalIds':
    parameters:
      - $ref: '#/components/parameters/managedObjectId'
    post:
      operationId: postExternalIDCollectionResource
      x-codegen-resource-name: createExternalId
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - External IDs
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create an external ID
      description: |
        Create an external ID for an existing managed object (identified by ID).

        <section><h5>Required roles</h5>
        ROLE_IDENTITY_ADMIN <b>OR</b> owner of the resource <b>OR</b> MANAGED_OBJECT_ADMIN permission on the resource
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
            --data-raw '<Payload>',
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers = headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.externalid+json:
            example:
              externalId: simulator_145074_1
              type: c8y_Serial
            schema:
              $ref: '#/components/schemas/externalId'
      responses:
        '201':
          description: An external ID was created.
          content:
            application/vnd.com.nsn.cumulocity.externalid+json:
              schema:
                $ref: '#/components/schemas/externalId'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/identityGlobalObjectNotFound'
        '409':
          description: Duplicate – Identity already bound to a different Global ID.
    get:
      operationId: getExternalIDCollectionResource
      x-codegen-resource-name: getExternalIds
      tags:
        - External IDs
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all external IDs of a specific managed object
      description: |
        Retrieve all external IDs of a existing managed object (identified by ID).

        <section><h5>Required roles</h5>
        ROLE_IDENTITY_READ <b>OR</b> owner of the resource <b>OR</b> MANAGED_OBJECT_READ permission on the resource
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/identity/globalIds/{id}/externalIds"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and all the external IDs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.externalidcollection+json:
              schema:
                $ref: '#/components/schemas/externalIds'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/identity/externalIds/{type}/{externalId}':
    parameters:
      - $ref: '#/components/parameters/identityType'
      - $ref: '#/components/parameters/identityExternalId'
    get:
      operationId: getExternalIDResource
      x-codegen-resource-name: getExternalId
      tags:
        - External IDs
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific external ID
      description: |
        Retrieve a specific external ID of a particular type.

        <section><h5>Required roles</h5>
        ROLE_IDENTITY_READ <b>OR</b> owner of the resource <b>OR</b> MANAGED_OBJECT_READ permission on the resource
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the external ID is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.externalid+json:
              schema:
                $ref: '#/components/schemas/externalId'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/identityExternalIdNotFound'
    delete:
      operationId: deleteExternalIDResource
      x-codegen-resource-name: deleteExternalId
      tags:
        - External IDs
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific external ID
      description: |
        Remove a specific external ID of a particular type.

        <section><h5>Required roles</h5>
        ROLE_IDENTITY_ADMIN <b>OR</b> owner of the resource <b>OR</b> MANAGED_OBJECT_ADMIN permission on the resource
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externalId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: An external ID was deleted.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/identityExternalIdNotFound'
  /user:
    get:
      operationId: getUserApiResource
      tags:
        - User API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: 'Retrieve URIs to collections of users, groups and roles'
      description: |
        Retrieve URIs and URI templates to collections of users, groups, and roles, so that they can be queried.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.userapi+json:
              schema:
                $ref: '#/components/schemas/userApiResource'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /user/currentUser:
    get:
      operationId: getCurrentUserResource
      x-codegen-resource-name: getCurrentUser
      tags:
        - Current User
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve the current user
      description: |
        Retrieve the user reference of the current user.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>

        Users with ROLE_SYSTEM are not allowed to query with Accept header `application/vnd.com.nsn.cumulocity.user+json`
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/currentUser" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/currentUser")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/currentUser")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/currentUser"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the current user is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.currentuser+json:
              schema:
                $ref: '#/components/schemas/currentUser'
            application/vnd.com.nsn.cumulocity.user+json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/unauthorizedError'
    put:
      operationId: putCurrentUserResource
      x-codegen-resource-name: updateCurrentUser
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Current User
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update the current user
      description: |
        Update the current user.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/user/currentUser" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/currentUser")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/currentUser")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/currentUser"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.currentuser+json:
            example:
              firstName: John
              lastName: Doe
              email: johndoe@example.com
              password: S3cur3P4sswd.
            schema:
              $ref: '#/components/schemas/currentUser'
      responses:
        '200':
          description: The current user was updated.
          content:
            application/vnd.com.nsn.cumulocity.currentuser+json:
              schema:
                $ref: '#/components/schemas/currentUser'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '422':
          $ref: '#/components/responses/invalidPayload'
  /user/currentUser/password:
    put:
      operationId: putCurrentUserPasswordResource
      x-codegen-resource-name: updateCurrentUserPassword
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Current User
      security:
        - Basic: []
        - OAI-Secure: []
      summary: Update the current user's password
      description: |
        Update the current user's  password.

        > **⚠️ Important:** If the tenant uses OAI-Secure authentication, the current user will not be logged out. Instead, a new cookie will be set with a new token, and the previous token will expire within a minute.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/user/currentUser/password" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser/password");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/currentUser/password")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/currentUser/password")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/currentUser/password"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/json:
            example:
              currentUserPassword: SecretP@@sword!_
              newPassword: New_SecretP@@sword!_
            schema:
              $ref: '#/components/schemas/passwordChange'
      responses:
        '200':
          description: The current user password was updated.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '422':
          $ref: '#/components/responses/invalidPayload'
  /user/currentUser/totpSecret:
    post:
      operationId: postCurrentUserTfaTotpResource
      x-codegen-resource-name: generateTfaSecret
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Current User
      security:
        - Basic: []
        - OAI-Secure: []
      summary: Generate secret to set up TFA
      description: |
        Generate a secret code to create a QR code to set up the two-factor authentication functionality using a TFA app/service.

        For more information about the feature, see [Platform administration > Authentication > Two-factor authentication](https://www.cumulocity.com/docs/authentication/tfa/) in the Cumulocity user documentation.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/currentUser/totpSecret" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser/totpSecret");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Accept", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/currentUser/totpSecret")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Accept", "application/json")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/currentUser/totpSecret")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/currentUser/totpSecret"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = {} )
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the secret is sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currentUserTotpSecret'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /user/currentUser/totpSecret/activity:
    post:
      operationId: postCurrentUserTfaTotpResourceActivity
      x-codegen-resource-name: setTfaState
      tags:
        - Current User
      security:
        - Basic: []
        - OAI-Secure: []
      summary: Activates or deactivates the two-factor authentication feature
      description: |
        Activates or deactivates the two-factor authentication feature for the current user.

        For more information about the feature, see [Platform administration > Authentication > Two-factor authentication](https://www.cumulocity.com/docs/authentication/tfa/) in the Cumulocity user documentation.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/currentUserTotpSecretActivity'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>) )
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: The two-factor authentication was activated or deactivated.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          description: Cannot deactivate TOTP setup.
        '409':
          description: TFA TOTP secret does not exist. First generate secret.
    get:
      operationId: getCurrentUserTfaTotpResourceActivity
      x-codegen-resource-name: getTfaState
      tags:
        - Current User
      security:
        - Basic: []
        - OAI-Secure: []
      summary: Returns the activation state of the two-factor authentication feature.
      description: |
        Returns the activation state of the two-factor authentication feature for the current user.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/activity"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: Returns the activation state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currentUserTotpSecretActivity'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/userNotFound'
  /user/currentUser/totpSecret/verify:
    post:
      operationId: postCurrentUserTfaTotpResourceVerify
      x-codegen-resource-name: verifyTfaCode
      tags:
        - Current User
      security:
        - Basic: []
        - OAI-Secure: []
      summary: Verify TFA code
      description: |
        Verifies the authentication code that the current user received from a TFA app/service and uploaded to the platform to gain access or enable the two-factor authentication feature.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/verify" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/verify");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/currentUser/totpSecret/verify")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/verify")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/currentUser/totpSecret/verify"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/currentUserTotpCode'
      responses:
        '204':
          description: The sent code was correct and the access can be granted.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          description: Invalid verification code.
        '404':
          description: Cannot validate TFA TOTP code - user's TFA TOTP secret does not exist.
        '422':
          $ref: '#/components/responses/invalidPayload'
  '/user/devicePermissions/{id}':
    get:
      operationId: getDevicePermissionsResource
      x-codegen-resource-name: getDevicePermissionAssignments
      parameters:
        - $ref: '#/components/parameters/managedObjectId'
      tags:
        - Device Permissions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Returns all device permissions assignments
      description: |
        Returns all device permissions assignments if the current user has READ permission.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/devicePermissions/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/devicePermissions/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/devicePermissions/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/devicePermissions/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/devicePermissions/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the device permissions assignments are sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePermissionOwners'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
    put:
      operationId: putDevicePermissionsResource
      x-codegen-resource-name: updateDevicePermissionAssignments
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/managedObjectId'
      tags:
        - Device Permissions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Updates the device permissions assignments
      description: |
        Updates the device permissions assignments if the current user has ADMIN permission or CREATE permission and also has all device permissions.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/user/devicePermissions/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/devicePermissions/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/devicePermissions/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/devicePermissions/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/devicePermissions/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedDevicePermissions'
      responses:
        '200':
          description: The device permissions were successfully updated.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
  /user/inventoryroles:
    post:
      operationId: postInventoryRoleResource
      x-codegen-resource-name: createInventoryRole
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Inventory Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create an inventory role
      description: |
        Create an inventory role.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/inventoryroles" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/inventoryroles");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/inventoryroles")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/inventoryroles")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/inventoryroles"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.inventoryrole+json:
            example:
              name: 'Operations: Restart Device'
              description: Can restart devices.
              permissions:
                - permission: ADMIN
                  scope: OPERATION
                  type: c8y_Restart
            schema:
              allOf:
                - $ref: '#/components/schemas/inventoryRole'
                - required:
                    - name
                    - description
                    - permissions
      responses:
        '201':
          description: An inventory role was created.
          content:
            application/vnd.com.nsn.cumulocity.inventoryrole+json:
              schema:
                $ref: '#/components/schemas/inventoryRole'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '409':
          description: Duplicate – The inventory role already exists.
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getInventoryRoleResource
      x-codegen-resource-name: getInventoryRoles
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
      tags:
        - Inventory Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all inventory roles
      description: |
        Retrieve all inventory roles.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/inventoryroles" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/inventoryroles");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/inventoryroles")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/inventoryroles")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/inventoryroles"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request succeeded and all inventory roles are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.inventoryrolecollection+json:
              schema:
                $ref: '#/components/schemas/InventoryRoleCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/user/inventoryroles/{id}':
    parameters:
      - $ref: '#/components/parameters/inventoryRoleId'
    get:
      operationId: getInventoryRoleResourceId
      x-codegen-resource-name: getInventoryRole
      tags:
        - Inventory Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific inventory role
      description: |
        Retrieve a specific inventory role (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> has access to the inventory role
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/inventoryroles/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/inventoryroles/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/inventoryroles/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request succeeded and the inventory role is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.inventoryrole+json:
              schema:
                $ref: '#/components/schemas/inventoryRole'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/roleNotFound'
    put:
      operationId: putInventoryRoleResourceId
      x-codegen-resource-name: updateInventoryRole
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Inventory Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a specific inventory role
      description: |
        Update a specific inventory role (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/user/inventoryroles/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/inventoryroles/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/inventoryroles/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.inventoryrole+json:
            example:
              name: 'Operations: Restart Device'
              description: Can restart devices.
              permissions:
                - permission: ADMIN
                  scope: OPERATION
                  type: c8y_Restart
            schema:
              $ref: '#/components/schemas/inventoryRole'
      responses:
        '200':
          description: An inventory role was updated.
          content:
            application/vnd.com.nsn.cumulocity.inventoryrole+json:
              schema:
                $ref: '#/components/schemas/inventoryRole'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/roleNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
    delete:
      operationId: deleteInventoryRoleResourceId
      x-codegen-resource-name: deleteInventoryRole
      tags:
        - Inventory Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific inventory role
      description: |
        Remove a specific inventory role (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/user/inventoryroles/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/inventoryroles/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/inventoryroles/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/inventoryroles/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: An inventory role was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/roleNotFound'
  /user/roles:
    get:
      operationId: getRoleCollectionResource
      x-codegen-resource-name: getUserRoles
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all user roles
      description: |
        Retrieve all user roles.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> has access to the user role
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/roles" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/roles");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/roles")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/roles")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/roles"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and all user roles are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.rolecollection+json:
              schema:
                $ref: '#/components/schemas/UserRoleCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/user/roles/{name}':
    parameters:
      - $ref: '#/components/parameters/roleName'
    get:
      operationId: getRoleCollectionResourceByName
      x-codegen-resource-name: getUserRole
      tags:
        - Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a user role by name
      description: |
        Retrieve a user role by name.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> current user has access to the role with this name
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/roles/{name}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/roles/{name}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/roles/{name}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
              System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/roles/{name}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/roles/{name}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the user role is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.role+json:
              schema:
                $ref: '#/components/schemas/role'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/roleNotFound'
  '/user/{tenantId}/users':
    parameters:
      - $ref: '#/components/parameters/tenantId'
    post:
      operationId: postUserCollectionResource
      x-codegen-resource-name: createUser
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create a user for a specific tenant
      description: |
        Create a user for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> has access to roles, groups, device permissions and applications
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/users" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/users")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/users")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.user+json:
            example:
              firstName: John
              lastName: Doe
              userName: jdoe
              phone: +1-541-754-3010
              email: johndoe@example.com
              password: S3cur3P4sswd.
            schema:
              allOf:
                - $ref: '#/components/schemas/user'
                - properties:
                    devicePermissions:
                      readOnly: true
                - required:
                    - userName
                    - email
      responses:
        '201':
          description: A user was created.
          content:
            application/vnd.com.nsn.cumulocity.user+json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '409':
          description: Duplicate – The userName or alias already exists.
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getUserCollectionResource
      x-codegen-resource-name: getUsers
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_users_groups'
        - $ref: '#/components/parameters/queryParam_users_onlyDevices'
        - $ref: '#/components/parameters/queryParam_users_owner'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_users_username'
        - $ref: '#/components/parameters/queryParam_users_withSubusersCount'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all users for a specific tenant
      description: |
        Retrieve all users for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and all users are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.usercollection+json:
              schema:
                $ref: '#/components/schemas/UserCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
  '/user/{tenantId}/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/userId'
    get:
      operationId: getUserResource
      x-codegen-resource-name: getUser
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific user for a specific tenant
      description: |
        Retrieve a specific user (by a given user ID) for a specific tenant (by a given tenant ID).

        Users in the response are sorted by username in ascending order.
        Only objects which the user is allowed to see are returned to the user.
        The user password is never returned in a GET response. Authentication mechanism is provided by another interface.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the user is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.user+json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/userNotFound'
    put:
      operationId: putUserResource
      x-codegen-resource-name: updateUser
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a specific user for a specific tenant
      description: |
        Update a specific user (by a given user ID) for a specific tenant (by a given tenant ID).

        Any change in user's roles, device permissions and groups creates corresponding audit records with type "User" and activity "User updated" with information which properties have been changed.

        When the user is updated with changed permissions or groups, a corresponding audit record is created with type "User" and activity "User updated".

        Note that you cannot update the password or email of another user, they can only be updated for the current user.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN to update root users in a user hierarchy <b>OR</b> users that are not in any hierarchy<br/>
        ROLE_USER_MANAGEMENT_ADMIN to update non-root users in a user hierarchy <b>AND</b> whose parents have access to roles, groups, device permissions and applications being assigned<br/>
        ROLE_USER_MANAGEMENT_CREATE to update descendants of the current user in a user hierarchy <b>AND</b> whose parents have access to roles, groups, device permissions and applications being assigned
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.user+json:
            example:
              displayName: John Doe
              phone: +1-541-754-3010
            schema:
              allOf:
                - properties:
                    password:
                      format: password
                      type: string
                      description: |
                        The user's password. Only latin1 characters are allowed.
                        The password can only be updated for the current user.
                    email:
                      type: string
                      format: email
                      description: |
                        The user's email address.
                        The email address can only be updated for the current user.
                    userName:
                      readOnly: true
                    devicePermissions:
                      readOnly: true
                - $ref: '#/components/schemas/user'
      responses:
        '200':
          description: A user was updated.
          content:
            application/vnd.com.nsn.cumulocity.user+json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/userNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
    delete:
      operationId: deleteUserResource
      x-codegen-resource-name: deleteUser
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Delete a specific user for a specific tenant
      description: |
        Delete a specific user (by a given user ID) for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user <b>AND</b> not the current user
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A user was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/userNotFound'
  '/user/{tenantId}/users/{userId}/tfa':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/userId'
    get:
      operationId: getUsersTfaResource
      x-codegen-resource-name: getUserTfaSettings
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve the TFA settings of a specific user
      description: |
        Retrieve the two-factor authentication settings for the specified user.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> (ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user) <b>OR</b> is the current user
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/tfa" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/tfa");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/tfa")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/tfa")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/tfa"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the TFA settings are sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userTfaData'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/userNotFound'
  '/user/{tenantId}/userByName/{username}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/username'
    get:
      operationId: getUsersByNameResource
      x-codegen-resource-name: getUserByUsername
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a user by username in a specific tenant
      description: |
        Retrieve a user by username in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the user is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.user+json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/userNotFound'
  '/user/{tenantId}/groups':
    parameters:
      - $ref: '#/components/parameters/tenantId'
    post:
      operationId: postGroupCollectionResource
      x-codegen-resource-name: createUserGroup
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Groups
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create a user group for a specific tenant
      description: |
        Create a user group for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/groups" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/groups")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/groups")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers = headers)
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.group+json:
            example:
              name: Global Watchers
              description: Can watch all events
            schema:
              allOf:
                - $ref: '#/components/schemas/group'
                - properties:
                    devicePermissions:
                      readOnly: true
      responses:
        '201':
          description: A user group was created.
          content:
            application/vnd.com.nsn.cumulocity.group+json:
              schema:
                $ref: '#/components/schemas/group'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '409':
          description: Duplicate – Group name already exists.
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getGroupCollectionResource
      x-codegen-resource-name: getTenantUserGroups
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Groups
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all user groups of a specific tenant
      description: |
        Retrieve all user groups of a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/groups" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/groups")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/groups")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and all user groups are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.groupcollection+json:
              schema:
                $ref: '#/components/schemas/UserGroupCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
  '/user/{tenantId}/groups/{groupId}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/groupId'
      - $ref: '#/components/parameters/queryParam_forceLogout'
    get:
      operationId: getGroupByIdResource
      x-codegen-resource-name: getUserGroup
      tags:
        - Groups
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific user group for a specific tenant
      description: |
        Retrieve a specific user group (by a given user group ID) for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user <b>AND</b> is not the current user
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request succeeded and the user group is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.group+json:
              schema:
                $ref: '#/components/schemas/group'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/groupNotFound'
    put:
      operationId: putGroupByIdResource
      x-codegen-resource-name: updateUserGroup
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Groups
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a specific user group for a specific tenant
      description: |
        Update a specific user group (by a given user group ID) for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.group+json:
            example:
              name: Global Watchers
              description: Can watch all events
            schema:
              allOf:
                - $ref: '#/components/schemas/group'
                - properties:
                    devicePermissions:
                      readOnly: true
      responses:
        '200':
          description: A user group was updated.
          content:
            application/vnd.com.nsn.cumulocity.group+json:
              schema:
                $ref: '#/components/schemas/group'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/groupNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
    delete:
      operationId: deleteGroupByIdResource
      x-codegen-resource-name: deleteUserGroup
      tags:
        - Groups
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Delete a specific user group for a specific tenant
      description: |
        Delete a specific user group (by a given user group ID) for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A user group was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/groupNotFound'
  '/user/{tenantId}/groups/{groupId}/roles':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/groupId'
    post:
      operationId: postGroupsRoleReferenceCollectionResource
      x-codegen-resource-name: assignGroupRole
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Assign a role to a specific user group in a specific tenant
      description: |
        Assign a role to a specific user group (by a given user group ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.rolereference+json:
            schema:
              $ref: '#/components/schemas/SubscribedRole'
      responses:
        '201':
          description: A user role was assigned to a user group.
          content:
            application/vnd.com.nsn.cumulocity.rolereference+json:
              schema:
                $ref: '#/components/schemas/roleReference'
              example:
                self: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles/ROLE_ALARM_ADMIN'
                role:
                  id: ROLE_ALARM_ADMIN
                  name: ROLE_ALARM_ADMIN
                  self: 'https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/groupNotFound'
        '409':
          description: Conflict – Role already assigned to the user group.
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getGroupsRoleReferenceCollectionResource
      x-codegen-resource-name: getGroupRoles
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
      tags:
        - Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all roles assigned to a specific user group in a specific tenant
      description: |
        Retrieve all roles assigned to a specific user group (by a given user group ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request succeeded and the roles are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.rolereferencecollection+json:
              schema:
                $ref: '#/components/schemas/RoleReferenceCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/groupNotFound'
  '/user/{tenantId}/groups/{groupId}/roles/{roleId}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/groupId'
      - $ref: '#/components/parameters/roleId'
    delete:
      operationId: deleteGroupRoleReferenceResource
      x-codegen-resource-name: unassignGroupRole
      tags:
        - Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Unassign a specific role for a specific user group in a specific tenant
      description: |
        Unassign a specific role (given by a role ID) for a specific user group (by a given user group ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles/{roleId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles/{roleId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles/{roleId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles/{roleId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/roles/{roleId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A role was unassigned from a user group.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/roleNotFound'
  '/user/{tenantId}/groups/{groupId}/users':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/groupId'
    post:
      operationId: postUserReferenceCollectionResource
      x-codegen-resource-name: assignUserToUserGroup
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Add a user to a specific user group of a specific tenant
      description: |
        Add a user to a specific user group (by a given user group ID) of a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN to assign root users in a user hierarchy <b>OR</b> users that are not in any hierarchy to any group<br/>
        ROLE_USER_MANAGEMENT_ADMIN to assign non-root users in a user hierarchy to groups accessible by the parent of assigned user<br/>
        ROLE_USER_MANAGEMENT_CREATE to assign descendants of the current user in a user hierarchy to groups accessible by current user <b>AND</b> accessible by the parent of assigned user
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.userreference+json:
            schema:
              $ref: '#/components/schemas/SubscribedUser'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: The user was added to the group.
          content:
            application/vnd.com.nsn.cumulocity.userreference+json:
              schema:
                $ref: '#/components/schemas/userReference'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/groupNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getUserReferenceCollectionResource
      x-codegen-resource-name: getUsersFromUserGroup
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve the users of a specific user group of a specific tenant
      description: |
        Retrieve the users of a specific user group (by a given user group ID) of a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> (ROLE_USER_MANAGEMENT_CREATE <b>AND</b> has access to the user group)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the users are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.userreferencecollection+json:
              schema:
                $ref: '#/components/schemas/UserReferenceCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/groupNotFound'
  '/user/{tenantId}/groups/{groupId}/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/groupId'
      - $ref: '#/components/parameters/userId'
    delete:
      operationId: deleteUserReferenceResource
      x-codegen-resource-name: removeUserFromUserGroup
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific user from a specific user group of a specific tenant
      description: |
        Remove a specific user (by a given user ID) from a specific user group (by a given user group ID) of a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user <b>AND</b> is not the current user
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/{userId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/{userId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/{userId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/{userId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/{userId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A user was removed from a group.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/userNotFound'
  '/user/{tenantId}/groupByName/{groupName}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/groupName'
    get:
      operationId: getGroupByNameResource
      x-codegen-resource-name: getUserGroupByName
      tags:
        - Groups
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a user group by group name for a specific tenant
      description: |
        Retrieve a user group by group name for a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> has access to groups
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request succeeded and the user group is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.group+json:
              schema:
                $ref: '#/components/schemas/group'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/groupNotFound'
  '/user/{tenantId}/users/{userId}/groups':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/userId'
    get:
      operationId: getGroupReferenceCollectionResource
      x-codegen-resource-name: getUserGroups
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Groups
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Get all user groups for specific user in a specific tenant
      description: |
        Get all user groups for a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/groups" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/groups");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/groups")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/groups")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/groups"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request succeeded and all groups for the user are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.groupreferencecollection+json:
              schema:
                $ref: '#/components/schemas/GroupReferenceCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/userNotFound'
  '/user/{tenantId}/users/{userId}/roles':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/userId'
    post:
      operationId: postUsersRoleReferenceCollectionResource
      x-codegen-resource-name: assignUserRole
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Assign a role to specific user in a specific tenant
      description: |
        Assign a role to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        When a role is assigned to a user, a corresponding audit record is created with type "User" and activity "User updated".

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN to assign any role to root users in a user hierarchy <b>OR</b> users that are not in any hierarchy<br/>
        ROLE_USER_MANAGEMENT_ADMIN to assign roles accessible by the parent of assigned user to non-root users in a user hierarchy<br/>
        ROLE_USER_MANAGEMENT_CREATE to assign roles accessible by the current user <b>AND</b> accessible by the parent of the assigned user to the descendants of the current user in a user hierarchy
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.rolereference+json:
            schema:
              $ref: '#/components/schemas/SubscribedRole'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A user role was assigned to a user.
          content:
            application/vnd.com.nsn.cumulocity.rolereference+json:
              schema:
                $ref: '#/components/schemas/roleReference'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/userNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
  '/user/{tenantId}/users/{userId}/roles/{roleId}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/roleId'
    delete:
      operationId: deleteUserRoleReferenceResource
      x-codegen-resource-name: unassignUserRole
      tags:
        - Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Unassign a specific role from a specific user in a specific tenant
      description: |
        Unassign a specific role (by a given role ID) from a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user <b>AND</b> has access to roles
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/roles/{roleId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/roles/{roleId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/roles/{roleId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/roles/{roleId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{id}/roles/{roleId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A user role was unassigned from a user.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/userNotFound'
  '/user/{tenantId}/users/{userId}/roles/inventory':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/userId'
    post:
      operationId: postInventoryAssignmentResource
      x-codegen-resource-name: assignUserInventoryRole
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Inventory Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Assign an inventory role to a user
      description: |
        Assign an existing inventory role to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN to assign any inventory role to root users in a user hierarchy <b>OR</b> users that are not in any hierarchy<br/>
        ROLE_USER_MANAGEMENT_ADMIN to assign inventory roles accessible by the parent of the assigned user to non-root users in a user hierarchy<br/>
        ROLE_USER_MANAGEMENT_CREATE to assign inventory roles accessible by the current user <b>AND</b> accessible by the parent of the assigned user to the descendants of the current user in a user hierarchy
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.inventoryassignment+json:
            example:
              managedObject: '1105'
              roles:
                - name: 'Operations: Restart Device'
            schema:
              allOf:
                - $ref: '#/components/schemas/inventoryAssignment'
                - required:
                    - managedObject
                    - roles
                  properties:
                    roles:
                      items:
                        required:
                          - name
                        properties:
                          description:
                            readOnly: true
                          permissions:
                            readOnly: true
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: An inventory role was assigned to a user.
          content:
            application/vnd.com.nsn.cumulocity.inventoryassignment+json:
              schema:
                $ref: '#/components/schemas/inventoryAssignment'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/userNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getInventoryAssignmentResource
      x-codegen-resource-name: getUserInventoryRoles
      tags:
        - Inventory Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all inventory roles assigned to a user
      description: |
        Retrieve all inventory roles assigned to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is the parent of the user
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the inventory roles are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.inventoryassignmentcollection+json:
              schema:
                $ref: '#/components/schemas/InventoryAssignmentCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/userNotFound'
  '/user/{tenantId}/users/{userId}/roles/inventory/{id}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/inventoryAssignmentId'
    get:
      operationId: getInventoryAssignmentResourceById
      x-codegen-resource-name: getUserInventoryRole
      tags:
        - Inventory Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific inventory role assigned to a user
      description: |
        Retrieve a specific inventory role (by a given ID) assigned to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is the parent of the user
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the inventory role is sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.inventoryassignment+json:
              schema:
                $ref: '#/components/schemas/inventoryAssignment'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/roleNotFound'
    put:
      operationId: putInventoryAssignmentResourceById
      x-codegen-resource-name: updateUserInventoryRole
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Inventory Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a specific inventory role assigned to a user
      description: |
        Update a specific inventory role (by a given ID) assigned to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN to update the assignment of any inventory roles to root users in a user hierarchy <b>OR</b> users that are not in any hierarchy<br/>
        ROLE_USER_MANAGEMENT_ADMIN to update the assignment of inventory roles accessible by the assigned user parent, to non-root users in a user hierarchy<br/>
        ROLE_USER_MANAGEMENT_CREATE to update the assignment of inventory roles accessible by the current user <b>AND</b> the parent of the assigned user to the descendants of the current user in the user hierarchy
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.inventoryassignment+json:
            schema:
              $ref: '#/components/schemas/inventoryAssignmentReference'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("GET", url, headers = headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: An inventory assignment was updated.
          content:
            application/vnd.com.nsn.cumulocity.inventoryassignment+json:
              schema:
                $ref: '#/components/schemas/inventoryAssignment'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/roleNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
    delete:
      operationId: deleteInventoryAssignmentResourceById
      x-codegen-resource-name: unassignUserInventoryRole
      tags:
        - Inventory Roles
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific inventory role assigned to a user
      description: |
        Remove a specific inventory role (by a given ID) assigned to a specific user (by a given user ID) in a specific tenant (by a given tenant ID).

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>AND</b> (is not in user hierarchy <b>OR</b> is root in the user hierarchy) <b>OR</b> ROLE_USER_MANAGEMENT_ADMIN <b>AND</b> is in user hiararchy <b>AND</b> has parent access to inventory assignments <b>OR</b> ROLE_USER_MANAGEMENT_CREATE <b>AND</b> is parent of the user <b>AND</b> is not the current user <b>AND</b> has current user access to inventory assignments <b>AND</b> has parent access to inventory assignments
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: An inventory assignment was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/roleNotFound'
  /user/logout:
    post:
      operationId: postLogoutUser
      x-codegen-resource-name: logout
      parameters:
        - $ref: '#/components/parameters/authorizationCookieHeader'
        - $ref: '#/components/parameters/xsrfTokenHeader'
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Terminate a user's session
      description: |
        After logging out, a user has to enter valid credentials again to get access to the platform.

        The request is responsible for removing cookies from the browser and invalidating internal platform access tokens.
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/logout" \
            --header "Cookie: authorization=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...BOiNQET-ECbOkC5-9PpPK35A" \
            --header "X-XSRF-TOKEN: cLHSyflFRXBwOpjzXqAg"\
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/logout");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Cookie", "authorization=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...BOiNQET-ECbOkC5-9PpPK35A");
            request.AddHeader("X-XSRF-TOKEN", "cLHSyflFRXBwOpjzXqAg")
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/logout")
                .header("Cookie", "authorization=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...BOiNQET-ECbOkC5-9PpPK35A")
                .header("X-XSRF-TOKEN", "cLHSyflFRXBwOpjzXqAg")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/logout")
                .headers({
                    "Cookie": "authorization=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...BOiNQET-ECbOkC5-9PpPK35A"
                    "X-XSRF-TOKEN": "cLHSyflFRXBwOpjzXqAg",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/logout"
            headers = {
              "Cookie": "authorization=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...BOiNQET-ECbOkC5-9PpPK35A"
              "X-XSRF-TOKEN": "cLHSyflFRXBwOpjzXqAg",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = { })
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the user is logged out.
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/user/logout/{tenantId}/allUsers':
    post:
      operationId: postLogoutAllTenantUsers
      x-codegen-resource-name: logoutAllUsers
      parameters:
        - $ref: '#/components/parameters/tenantId'
      tags:
        - Users
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Terminate all tenant users' sessions and invalidate tokens
      description: |
        The user with the role ROLE_USER_MANAGEMENT_ADMIN is authorized to log out all tenant users with a toked based access.

        The request is responsible for terminating all tenant users' toked based sessions and invalidating internal platform access tokens.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_ADMIN <b>AND</b> is the current tenant
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/user/logout/{tenantId}/allUsers" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw ""
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/user/logout/{tenantId}/allUsers");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/user/logout/{tenantId}/allUsers")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/user/logout/{tenantId}/allUsers")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send("")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/user/logout/{tenantId}/allUsers"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers = headers, "")
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the users (with a token based access) are logged out.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
  /measurement:
    get:
      operationId: getMeasurementApiResource
      tags:
        - Measurement API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve URIs to collections of measurements
      description: |
        Retrieve URIs and URI templates to collections of measurements.

        > **&#9432; Info:** The response sample on the right side contains a subset of all URIs returned by the endpoint method. For all available query parameters see [Retrieve all measurements](#operation/getMeasurementCollectionResource).
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/measurement" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/measurement");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/measurement")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/measurement")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/measurement"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.measurementapi+json:
              schema:
                $ref: '#/components/schemas/measurementApiResource'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
  /measurement/measurements:
    post:
      operationId: postMeasurementCollectionResource
      x-codegen-resource-name: createMeasurement
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Measurements
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create a measurement
      description: |
        A measurement must be associated with a source (managed object) identified by ID, and must specify the type of measurement and the time when it was measured by the device (for example, a thermometer).

        Each measurement fragment is an object (for example, `c8y_Steam`) containing the actual measurements as properties. The property name represents the name of the measurement (for example, `Temperature`) and it contains two properties:

        *   `value` - The value of the individual measurement. The maximum precision for floating point numbers is 64-bit IEEE 754. For integers it's a 64-bit two's complement integer. The `value` is mandatory for a fragment.
        *   `unit` - The unit of the measurements.

        Review the [System of units](#section/System-of-units) section for details about the conversions of units. Also review [Getting started > Technical concepts > Cumulocity's domain model > Inventory > Fragments > Naming conventions of fragments](https://www.cumulocity.com/docs/concepts/domain-model/#naming-conventions-of-fragments) in the Cumulocity user documentation.

        The example below uses `c8y_Steam` in the request body to illustrate a fragment for recording temperature measurements.

        > **⚠️ Important:** Property names used for fragment and series must not contain whitespaces nor the special characters `. , * [ ] ( ) @ $`. This is required to ensure a correct processing and visualization of measurement series on UI graphs.

        **Handling of Correct and Incorrect Fragments and Series:**

        1. ***Mixed Series Fragments:***

        When creating a measurement with a fragment containing both valid and invalid series:
          - Valid series (those with numeric value fields) are processed and persisted.
          - Invalid series (e.g., Booleans, Lists, Strings, Structs) are silently ignored and are not included in the resulting measurement.
          - The measurement is created successfully (HTTP 201 Created), but the invalid series are removed.
          
        **Example:**
          ```json
          {
            "source": { "id": "681200" },
            "time": "2020-03-19T12:03:27.845Z",
            "type": "temperatureMeasurement",
            "c8y_Steam": {
              "Temperature": {
                "validSeries_DOUBLE": { "value": 3.141592653589793, "unit": "RAD" },
                "validSeries_INTEGER": { "value": 42, "unit": "C" },
                "ignoredField_BOOLEAN": { "value": false, "unit": "t/f" },
                "ignoredField_LIST": { "value": [42, 43, 44] },
                "ignoredField_STRUCT": { "value": { "a": 1, "b": 2 }, "unit": "C" },
                "ignoredField0": 42,
                "ignoredField1": { "value": { "a": 1, "b": 2 }, "unit": "C" },
                "ignoredField2": { "unit": "C" },
                "ignoredField3": { "val": 42 },
                "ignoredField4": { "subseries": { "value": 42 } }
              }
            }
          }
          ```
          
          **Response:**
          ```json
          {
            "self": "https://example.cumulocity.com/measurement/measurements/124",
            "id": "124",
            "type": "temperatureMeasurement",
            "source": { "id": "681200" },
            "time": "2020-03-19T12:03:27.845Z",
            "c8y_Steam": {
              "Temperature": {
                "validSeries_DOUBLE": { "value": 3.141592653589793, "unit": "RAD" },
                "validSeries_INTEGER": { "value": 42, "unit": "C" }
              }
            }
          }
          ```
          
        2. ***Fragments with Only Invalid Series:***

        If a measurement fragment contains only invalid series, the entire fragment is preserved as a plain object, and no fields are removed or validated further. This means that such fragments are treated as normal document properties rather than as series fragments. As a result:
          - These objects are not included in series fragment aggregation.
          - They are not treated as part of the measurement's series data but remain accessible as regular property within the measurement document.
            
        **Example:**
          ```json
          {
            "source": { "id": "681200" },
            "time": "2020-03-19T12:03:27.845Z",
            "type": "temperatureMeasurement",
            "c8y_Steam": {
              "Temperature": {
                "invalidSeries_BOOLEAN": { "value": false, "unit": "t/f" },
                "invalidSeries_LIST": { "value": [1, 2, 3], "unit": "list" }
              }
            }
          }
          ```
          
          **Response:**
          ```json
          {
            "self": "https://example.cumulocity.com/measurement/measurements/125",
            "id": "125",
            "type": "temperatureMeasurement",
            "source": { "id": "681200" },
            "time": "2020-03-19T12:03:27.845Z",
            "c8y_Steam": {
              "Temperature": {
                "invalidSeries_BOOLEAN": { "value": false, "unit": "t/f" },
                "invalidSeries_LIST": { "value": [1, 2, 3], "unit": "list" }
              }
            }
          }
          ```

        ### Create multiple measurements

        It is also possible to create multiple measurements at once by sending a `measurements` array containing all the measurements to be created. The content type must be `application/vnd.com.nsn.cumulocity.measurementcollection+json`.

        > **&#9432; Info:** For more details about fragments with specific meanings, refer to [Device management & connectivity > Device integration > Fragment library](https://www.cumulocity.com/docs/device-integration/fragment-library/) in the Cumulocity user documentation.

        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_ADMIN <b>OR</b> owner of the source <b>OR</b> MEASUREMENT_ADMIN permission on the source
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.measurement+json:
            schema:
              $ref: '#/components/schemas/measurement'
            example:
              source:
                id: '251982'
              time: '2020-03-19T12:03:27.845Z'
              type: c8y_TemperatureMeasurement
              c8y_Steam:
                Temperature:
                  unit: C
                  value: 100
          application/vnd.com.nsn.cumulocity.measurementcollection+json:
            schema:
              $ref: '#/components/schemas/MeasurementCollection'
            example:
              measurements:
                - source:
                    id: '251982'
                  time: '2020-03-19T12:03:27.845Z'
                  type: c8y_TemperatureMeasurement
                  c8y_Steam:
                    Temperature:
                      unit: C
                      value: 100
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/measurement/measurements" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/measurement/measurements")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/measurement/measurements")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/measurement/measurements"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A measurement was created.
          content:
            application/vnd.com.nsn.cumulocity.measurement+json:
              schema:
                $ref: '#/components/schemas/measurement'
            application/vnd.com.nsn.cumulocity.measurementcollection+json:
              schema:
                $ref: '#/components/schemas/MeasurementCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getMeasurementCollectionResource
      x-codegen-resource-name: getMeasurements
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_measurement_dateFrom'
        - $ref: '#/components/parameters/queryParam_measurement_dateTo'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_measurement_revert'
        - $ref: '#/components/parameters/queryParam_measurement_source'
        - $ref: '#/components/parameters/queryParam_measurement_type'
        - $ref: '#/components/parameters/queryParam_measurement_valueFragmentSeries'
        - $ref: '#/components/parameters/queryParam_measurement_valueFragmentType'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Measurements
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all measurements
      description: |
        Retrieve all measurements on your tenant, or a specific subset based on queries.

        In case of executing [range queries](https://en.wikipedia.org/wiki/Range_query_(database)) between an upper and lower boundary, for example, querying using `dateFrom`–`dateTo`, the oldest registered measurements are returned first. It is possible to change the order using the query parameter `revert=true`.

        For large measurement collections, querying older records without filters can be slow as the server needs to scan from the beginning of the input results set before beginning to return the results. For cases when older measurements should be retrieved, it is recommended to narrow the scope by using range queries based on the time stamp reported by a device. The scope of query can also be reduced significantly when a source device is provided.

        Review [Measurements Specifics](#tag/Measurements-specifics) for details about data streaming and response formats.

        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/measurement/measurements" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/measurement/measurements")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/measurement/measurements")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/measurement/measurements"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/measurementCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
    delete:
      operationId: deleteMeasurementCollectionResource
      x-codegen-resource-name: deleteMeasurements
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
        - $ref: '#/components/parameters/queryParam_measurement_dateFrom'
        - $ref: '#/components/parameters/queryParam_measurement_dateTo'
        - $ref: '#/components/parameters/queryParam_fragmentType'
        - $ref: '#/components/parameters/queryParam_measurement_source'
        - $ref: '#/components/parameters/queryParam_measurement_type'
      tags:
        - Measurements
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove measurement collections
      description: |
        Remove measurement collections specified by query parameters.

        DELETE requests are not synchronous. The response could be returned before the delete request has been completed. This may happen especially when there are a lot of measurements to be deleted.

        > **⚠️ Important:** DELETE requires at least one of the following parameters: `source`, `dateFrom`, `dateTo`.

        In case of enhanced time series measurements, both `dateFrom` and `dateTo` parameters must be truncated to full hours (for example, 2022-08-19T14:00:00.000Z), otherwise an error will be returned.
        The `fragmentType` parameter allows to delete measurements only by a measurement fragment when enhanced time series measurements are used.
        It's not possible to delete by a custom (non-measurement) fragment.

        Example for a valid measurement value fragment:
        ```
        "c8y_TemperatureMeasurement": {
            "T": {
              "value": 28,
              "unit": "C"
            }
        }
        ```
        In the example above `c8y_TemperatureMeasurement` is called fragment and `T` is called series.

        Example for a non-measurement fragment:
        ```
        "c8y_TemperatureMeasurement": 28
        ```
        Enhanced Time series measurements will not allow to delete by fragment specific like above.

        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/measurement/measurements?source=<managedObjectId>" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements?source=<managedObjectId>");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/measurement/measurements?source=<managedObjectId>")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/measurement/measurements?source=<managedObjectId>")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/measurement/measurements?source=<managedObjectId>"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A collection of measurements was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '422':
          $ref: '#/components/responses/invalidPayload'
  '/measurement/measurements/{id}':
    parameters:
      - $ref: '#/components/parameters/measurementId'
    get:
      operationId: getMeasurementResource
      x-codegen-resource-name: getMeasurement
      tags:
        - Measurements
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific measurement
      description: |
        Retrieve a specific measurement by a given ID.
        Note that you cannot retrieve time series measurements by ID.
        Instead you can search for such measurements via query parameters.
        No behavior changes for tenants which do not have time series enabled.

        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_READ <b>OR</b> owner of the source <b>OR</b> MEASUREMENT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/measurement/measurements/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/measurement/measurements/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/measurement/measurements/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/measurement/measurements/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/measurementFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/measurementNotFound'
    delete:
      operationId: deleteMeasurementResource
      x-codegen-resource-name: deleteMeasurement
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Measurements
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific measurement
      description: |
        Remove a specific measurement by a given ID.
        Note that you cannot delete time series measurements by ID.
        Instead, you can delete by query or use the retention rules to remove expired measurements data from the Operational Store.
        No behavior changes for tenants which do not have time series enabled.


        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_ADMIN <b>OR</b> owner of the source <b>OR</b> MEASUREMENT_ADMIN permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/measurement/measurements/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/measurement/measurements/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/measurement/measurements/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/measurement/measurements/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A measurement was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/measurementNotFound'
  /measurement/measurements/series:
    parameters:
      - $ref: '#/components/parameters/queryParam_measurement_aggregationType'
      - $ref: '#/components/parameters/queryParam_measurement_dateFromRequired'
      - $ref: '#/components/parameters/queryParam_measurement_dateToRequired'
      - $ref: '#/components/parameters/queryParam_measurement_revert'
      - $ref: '#/components/parameters/queryParam_measurement_series'
      - $ref: '#/components/parameters/queryParam_measurement_sourceRequired'
    get:
      operationId: getMeasurementSeriesResource
      x-codegen-resource-name: getMeasurementSeries
      tags:
        - Measurements
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a list of series and their values
      description: |
        Retrieve a list of series (all or only those matching the specified names) and their values within a given period of a specific managed object (source).<br>
        A series is any fragment in measurement that contains a `value` property.

        It is possible to fetch aggregated results using the `aggregationType` parameter. If the aggregation is not specified, the result will contain no more than 5000 values.

        > **⚠️ Important:** For the aggregation to be done correctly, a device shall always use the same time zone when it sends dates.

        <section><h5>Required roles</h5>
        ROLE_MEASUREMENT_READ <b>OR</b> owner of the source <b>OR</b> MEASUREMENT_READ permission on the source
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/measurement/measurements/series?source=<sourceID>&dateFrom=<startDate>&dateTo=<endDate>" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/measurement/measurements/series?source=<sourceID>&dateFrom=<startDate>&dateTo=<endDate>");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/measurement/measurements/series?source=<sourceID>&dateFrom=<startDate>&dateTo=<endDate>")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/measurement/measurements/series?source=<sourceID>&dateFrom=<startDate>&dateTo=<endDate>")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/measurement/measurements/series?source=<sourceID>&dateFrom=<startDate>&dateTo=<endDate>"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the series are sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementSeries'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /notification2:
    get:
      operationId: getNotificationApiResource
      tags:
        - Notification 2.0 API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve URIs to collections of notification subscriptions
      description: |
        Retrieve URIs and URI templates to collections of notification subscriptions.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/notification2" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/notification2");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/notification2")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/notification2")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/notification2"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.notificationapi+json:
              schema:
                $ref: '#/components/schemas/NotificationApiResource'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
  /notification2/token:
    post:
      operationId: postNotificationTokenResource
      x-codegen-resource-name: createToken
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Tokens
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create a notification token
      description: |
        Create a new JWT (JSON web token) access token which can be used to establish a successful WebSocket connection to read a sequence of notifications.

        In general, each request to obtain an access token consists of:

        *  The subscriber name which the client wishes to be identified with.
        *  The subscription name. This value must be associated with a subscription that's already been created and in essence, the obtained token will give the ability to read notifications for the subscription that is specified here.
        *  The token expiration duration.
        *  The option to disable signing of the token by the Cumulocity platform.
        *  The subscription type that the token should be associated with.
        *  The option to use the token to create shared consumers of the subscription.
        *  The option to select the non-persistent variant of the subscription, if one exists.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      requestBody:
        required: true
        content:
          application/json:
            example:
              subscriber: testSubscriber
              subscription: testSubscription
              expiresInMinutes: 90
              type: notification
              signed: true
              shared: false
              nonPersistent: false
            schema:
              $ref: '#/components/schemas/NotificationTokenClaims'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/notification2/token" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/notification2/token");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/notification2/token")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/notification2/token")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/notification2/token"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: A notification token was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationToken'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '422':
          $ref: '#/components/responses/invalidPayload'
  /notification2/unsubscribe:
    post:
      operationId: postNotificationTokenUnsubscribeResource
      x-codegen-resource-name: unsubscribeSubscriber
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
        - $ref: '#/components/parameters/queryParam_notification_token'
      tags:
        - Tokens
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Unsubscribe a subscriber
      description: |
        Unsubscribe a notification subscriber using the notification token.

        Once a subscription is made, notifications will be kept until they are consumed by all subscribers who have previously connected to the subscription. For non-volatile subscriptions, this can result in notifications remaining in storage if never consumed by the application.
        They will be deleted if a tenant is deleted. It can take up considerable space in permanent storage for high-frequency notification sources. Therefore, we recommend you to unsubscribe a subscriber that will never run again.
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/notification2/unsubscribe?token={token}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/notification2/unsubscribe?token={token}");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/notification2/unsubscribe?token={token}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/notification2/unsubscribe?token={token}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/notification2/unsubscribe?token={token}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("POST", url, headers=headers, data = {})
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/NotificationSubscriptionResult'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /notification2/subscriptions:
    post:
      operationId: postNotificationSubscriptionResource
      x-codegen-resource-name: createSubscription
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Subscriptions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create a subscription
      description: |
        Create a new subscription, for example, a subscription that forwards measurements and events of a specific type for a given device.

        In general, each subscription may consist of:

        *  The managed object to which the subscription is associated.
        *  The context under which the subscription is to be processed.
        *  The name of the subscription.
        *  The applicable filter criteria.
        *  The option to only include specific custom fragments in the forwarded data.
        *  The option to use persistent or non-persistent message storage.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.subscription+json:
            example:
              source:
                id: '251982'
              context: mo
              subscription: testSubscription
              subscriptionFilter:
                apis:
                  - measurements
                  - events
                typeFilter: '''c8y_Speed'' or ''c8y_LocationUpdate'''
              fragmentsToCopy:
                - c8y_MaxSpeedMeasurement
                - c8y_Position
              nonPersistent: false
            schema:
              $ref: '#/components/schemas/NotificationSubscription'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/notification2/subscriptions" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/vnd.com.nsn.cumulocity.subscription+json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/notification2/subscriptions");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/vnd.com.nsn.cumulocity.subscription+json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/notification2/subscriptions")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/vnd.com.nsn.cumulocity.subscription+json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/notification2/subscriptions")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/vnd.com.nsn.cumulocity.subscription+json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/notification2/subscriptions"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/vnd.com.nsn.cumulocity.subscription+json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A notification subscription was created.
          content:
            application/vnd.com.nsn.cumulocity.subscription+json:
              schema:
                $ref: '#/components/schemas/NotificationSubscription'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/inventoryObjectNotFound'
        '409':
          $ref: '#/components/responses/notificationSubscriptionDuplicate'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getNotificationSubscriptionCollectionResource
      x-codegen-resource-name: getSubscriptions
      parameters:
        - $ref: '#/components/parameters/queryParam_notification_subscription_context'
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_notification_subscription_source'
        - $ref: '#/components/parameters/queryParam_notification_subscription_subscription'
        - $ref: '#/components/parameters/queryParam_notification_subscription_typeFilter'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Subscriptions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all subscriptions
      description: |
        Retrieve all subscriptions on your tenant, or a specific subset based on queries.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/notification2/subscriptions" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/notification2/subscriptions");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/notification2/subscriptions")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/notification2/subscriptions")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/notification2/subscriptions"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/notificationSubscriptionCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
    delete:
      operationId: deleteNotificationSubscriptionBySourceResource
      x-codegen-resource-name: deleteSubscriptions
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
        - $ref: '#/components/parameters/queryParam_notification_subscription_context_for_delete'
        - $ref: '#/components/parameters/queryParam_notification_subscription_source'
      tags:
        - Subscriptions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove subscriptions by source
      description: |
        Remove subscriptions by source and context.

        >**&#9432; Info:** The request will result in an error if there are no query parameters. The `source` parameter is optional only if the `context` parameter equals `tenant`.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/notification2/subscriptions?source=<managedObjectId>" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/notification2/subscriptions?source=<managedObjectId>");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/notification2/subscriptions?source=<managedObjectId>")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/notification2/subscriptions?source=<managedObjectId>")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/notification2/subscriptions?source=<managedObjectId>"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A collection of subscriptions was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '422':
          description: Unprocessable Entity – error in query parameters
  '/notification2/subscriptions/{id}':
    parameters:
      - $ref: '#/components/parameters/notificationSubscriptionId'
    get:
      operationId: getNotificationSubscriptionResource
      x-codegen-resource-name: getSubscription
      tags:
        - Subscriptions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific subscription
      description: |
        Retrieve a specific subscription by a given ID.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/notification2/subscriptions/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/notification2/subscriptions/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/notificationSubscriptionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/notificationSubscriptionNotFound'
    delete:
      operationId: deleteNotificationSubscriptionResource
      x-codegen-resource-name: deleteSubscription
      parameters:
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Subscriptions
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific subscription
      description: |
        Remove a specific subscription by a given ID.

        <section><h5>Required roles</h5>
        ROLE_NOTIFICATION_2_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/notification2/subscriptions/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/notification2/subscriptions/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/notification2/subscriptions/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A subscription was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/notificationSubscriptionNotFound'
  /notification/realtime:
    post:
      operationId: postNotificationRealtimeResource
      x-codegen-resource-name: createRealtimeNotification
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Real-time notification API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Responsive communication
      description: 'The Real-time notification API enables responsive communication from Cumulocity over restricted networks towards clients such as web browser and mobile devices. All clients subscribe to so-called channels to receive messages. These channels are filled by Cumulocity with the output of [Operations](#tag/Operations). In addition, particular system channels are used for the initial handshake with clients, subscription to channels, removal from channels and connection. The [Bayeux protocol](https://docs.cometd.org/current/reference/#_concepts_bayeux_protocol) over HTTPS or WSS is used as communication mechanism.'
      requestBody:
        required: true
        content:
          application/json:
            example:
              - channel: /meta/handshake
                version: '1.0'
            schema:
              $ref: '#/components/schemas/realtimeNotification'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/notification/realtime" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/notification/realtime");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/notification/realtime")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/notification/realtime")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/notification/realtime"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The operation was completed and the result is sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/realtimeNotification'
        '400':
          $ref: '#/components/responses/invalidPayload'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /retention/retentions:
    post:
      operationId: postRetentionRuleCollectionResource
      x-codegen-resource-name: createRetentionRule
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Retention rules
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create a retention rule
      description: |
        Create a retention rule on your tenant.

        <section><h5>Required roles</h5>
        ROLE_RETENTION_RULE_ADMIN
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.retentionrule+json:
            example:
              dataType: ALARM
              fragmentType: '*'
              maximumAge: 20
            schema:
              allOf:
                - $ref: '#/components/schemas/retentionRule'
                - required:
                    - maximumAge
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/retention/retentions" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/retention/retentions");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/retention/retentions")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/retention/retentions")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/retention/retentions"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A retention rule was created.
          content:
            application/vnd.com.nsn.cumulocity.retentionrule+json:
              schema:
                $ref: '#/components/schemas/retentionRule'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getRetentionRuleCollectionResource
      x-codegen-resource-name: getRetentionRules
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Retention rules
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all retention rules
      description: |
        Retrieve all retention rules on your tenant.

        <section><h5>Required roles</h5>
        ROLE_RETENTION_RULE_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/retention/retentions" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/retention/retentions");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/retention/retentions")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/retention/retentions")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/retention/retentions"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/retentionRuleCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
  '/retention/retentions/{id}':
    parameters:
      - $ref: '#/components/parameters/retentionRuleId'
    get:
      operationId: getRetentionRuleResource
      x-codegen-resource-name: getRetentionRule
      tags:
        - Retention rules
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a retention rule
      description: |
        Retrieve a specific retention rule by a given ID.

        <section><h5>Required roles</h5>
        ROLE_RETENTION_RULE_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/retention/retentions/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/retention/retentions/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/retention/retentions/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/retention/retentions/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/retention/retentions/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/retentionRuleFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/retentionRuleNotFound'
    put:
      operationId: putRetentionRuleResource
      x-codegen-resource-name: updateRetentionRule
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Retention rules
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a retention rule
      description: |
        Update a specific retention rule by a given ID.

        <section><h5>Required roles</h5>
        ROLE_RETENTION_RULE_ADMIN <b>AND</b> (the rule is editable <b>OR</b> it's the tenant management)
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.retentionrule+json:
            example:
              dataType: ALARM
              maximumAge: 20
            schema:
              $ref: '#/components/schemas/retentionRule'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/retention/retentions/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/retention/retentions/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/retention/retentions/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/retention/retentions/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/retention/retentions/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: A retention rule was updated.
          content:
            application/vnd.com.nsn.cumulocity.retentionrule+json:
              schema:
                $ref: '#/components/schemas/retentionRule'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/retentionRuleNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
    delete:
      operationId: deleteRetentionRuleResource
      x-codegen-resource-name: deleteRetentionRule
      tags:
        - Retention rules
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a retention rule
      description: |
        Remove a specific retention rule by a given ID.

        <section><h5>Required roles</h5>
        ROLE_RETENTION_RULE_ADMIN <b>AND</b> the rule is editable
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/retention/retentions/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/retention/retentions/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/retention/retentions/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/retention/retentions/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/retention/retentions/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A retention rule was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/retentionRuleNotFound'
  /tenant:
    get:
      operationId: getTenantsApiResource
      tags:
        - Tenant API
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve URIs to collections of tenants
      description: |
        Retrieve URIs and URI templates to collections of tenants and options.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_READ
        </section>
      responses:
        '200':
          description: The request has succeeded and the URIs are sent in the response.
          content:
            application/vnd.com.nsn.cumulocity.tenantapi+json:
              schema:
                $ref: '#/components/schemas/tenantApiResource'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /tenant/tenants:
    post:
      operationId: postTenantCollectionResource
      x-codegen-resource-name: createTenant
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Tenants
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create a tenant
      description: |
        Create a subtenant for the current tenant.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_CREATE) <b>AND</b> the current tenant is allowed to create subtenants
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.tenant+json:
            example:
              adminEmail: john@doe.com
              adminName: johndoe
              adminPass: th3m4tr1xh4syu0
              company: ACME AG
              contactName: John Doe
              contactPhone: +52 333 567 1234
              domain: mytenant.cumulocity.com
            schema:
              allOf:
                - $ref: '#/components/schemas/tenant'
                - required:
                    - company
                    - domain
                    - adminEmail
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/tenants"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A tenant was created.
          content:
            application/vnd.com.nsn.cumulocity.tenant+json:
              schema:
                $ref: '#/components/schemas/tenant'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '409':
          description: Conflict – The tenant domain/ID already exists.
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getTenantCollectionResource
      x-codegen-resource-name: getTenants
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
        - $ref: '#/components/parameters/queryParam_tenant_company'
        - $ref: '#/components/parameters/queryParam_tenant_domain'
        - $ref: '#/components/parameters/queryParam_tenant_parent'
      tags:
        - Tenants
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all subtenants
      description: |
        Retrieve all subtenants of the current tenant.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/tenants"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/tenantCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /tenant/currentTenant:
    get:
      operationId: getCurrentTenantResource
      x-codegen-resource-name: getCurrentTenant
      parameters:
        - $ref: '#/components/parameters/queryParam_tenant_withParent'
      tags:
        - Tenants
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve the current tenant
      description: |
        Retrieve information about the current tenant.

        <section><h5>Required roles</h5>
        ROLE_USER_MANAGEMENT_OWN_READ <b>OR</b> ROLE_SYSTEM
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/currentTenant" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/currentTenant");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/currentTenant")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/currentTenant")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/currentTenant"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/currentTenantFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/tenant/tenants/{tenantId}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
    get:
      operationId: getTenantResource
      x-codegen-resource-name: getTenant
      tags:
        - Tenants
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific tenant
      description: |
        Retrieve a specific tenant by a given ID.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_READ <b>AND</b> (the current tenant is its parent <b>OR</b> is the management tenant)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/tenantFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/tenantNotFound'
    put:
      operationId: putTenantResource
      x-codegen-resource-name: updateTenant
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Tenants
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a specific tenant
      description: |
        Update a specific tenant by a given ID.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_UPDATE) <b>AND</b><br>
        ((the current tenant is its parent <b>AND</b> the current tenant is allowed to create subtenants) <b>OR</b> is the management tenant)
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.tenant+json:
            example:
              contactName: John Doe
              contactPhone: +52 333 567 1234
            schema:
              allOf:
                - $ref: '#/components/schemas/tenant'
                - properties:
                    adminName:
                      readOnly: true
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: A tenant was updated.
          content:
            application/vnd.com.nsn.cumulocity.tenant+json:
              schema:
                $ref: '#/components/schemas/tenant'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/tenantNotFound'
        '422':
          $ref: '#/components/responses/invalidPayload'
    delete:
      operationId: deleteTenantResource
      x-codegen-resource-name: deleteTenant
      tags:
        - Tenants
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific tenant
      description: |
        Remove a specific tenant by a given ID.

        > **⚠️ Important:** Deleting a subtenant cannot be reverted. For security reasons, it is therefore only available in the management tenant. You cannot delete tenants from any tenant but the management tenant.
        >
        > Administrators in Enterprise Tenants are only allowed to suspend active subtenants, but not to delete them.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN <b>AND</b> is the management tenant
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A tenant was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/tenantNotFound'
  '/tenant/tenants/{tenantId}/applications':
    parameters:
      - $ref: '#/components/parameters/tenantId'
    post:
      operationId: postTenantApplicationReferenceCollectionResource
      x-codegen-resource-name: subscribeApplication
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Tenant applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Subscribe to an application
      description: |
        Subscribe a tenant (by a given ID) to an application.

        <section><h5>Required roles</h5>
        1. the current tenant is application owner and has the role ROLE_APPLICATION_MANAGEMENT_ADMIN <b>OR</b><br>
        2. for applications that are not microservices, the current tenant is the management tenant or the parent of the application owner tenant, and the user has one of the follwoing roles: ROLE_TENANT_MANAGEMENT_ADMIN, ROLE_TENANT_MANAGEMENT_UPDATE <b>OR</b><br>
        3. for microservices, the current tenant is the management tenant or the parent of the application owner tenant, and the user has the role ROLE_TENANT_MANAGEMENT_ADMIN OR ROLE_TENANT_MANAGEMENT_UPDATE and one of following conditions is met:<br>
        * the microservice has no manifest<br>
        * the microservice version is supported<br>
        * the current tenant is subscribed to 'feature-privileged-microservice-hosting'
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.applicationreference+json:
            schema:
              $ref: '#/components/schemas/SubscribedApplicationReference'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: A tenant was subscribed to an application.
          content:
            application/vnd.com.nsn.cumulocity.applicationreference+json:
              schema:
                $ref: '#/components/schemas/ApplicationReference'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/applicationNotFound'
        '409':
          description: The application is already assigned to the tenant.
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getTenantApplicationReferenceCollectionResource
      x-codegen-resource-name: getSubscribedApplications
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Tenant applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve subscribed applications
      description: |
        Retrieve the tenant subscribed applications by a given tenant ID.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_READ <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (the current tenant is its parent <b>OR</b> is the management tenant)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/tenantApplicationReferenceFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/tenantNotFound'
  '/tenant/tenants/{tenantId}/applications/{applicationId}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/tenantApplicationId'
    delete:
      operationId: deleteTenantApplicationReferenceResource
      x-codegen-resource-name: unsubscribeApplication
      tags:
        - Tenant applications
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Unsubscribe from an application
      description: |
        Unsubscribe a tenant (by a given tenant ID) from an application (by a given application ID).

        <section><h5>Required roles</h5>
        (ROLE_APPLICATION_MANAGEMENT_ADMIN <b>AND</b> is the application owner <b>AND</b> is the current tenant) <b>OR</b><br>
        ((ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_UPDATE) <b>AND</b> (the current tenant is its parent <b>OR</b> is the management tenant))
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A tenant was unsubscribed from an application.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/tenantNotFound'
  '/tenant/tenants/{tenantId}/trusted-certificates':
    parameters:
      - $ref: '#/components/parameters/tenantId'
    post:
      operationId: postTrustedCertificateCollectionResource
      x-codegen-resource-name: addTrustedCertificate
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
        - $ref: '#/components/parameters/queryParam_addToTrustStore'
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Add a new certificate
      description: |
        Add a new trusted certificate to a specific tenant (by a given ID) which can be further used by the devices to establish connections with the Cumulocity platform.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (is the current tenant)
        </section>
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: My Certificate
              status: ENABLED
              autoRegistrationEnabled: true
              certInPemFormat: |
                -----BEGIN CERTIFICATE-----
                  MIIFezCCA2OgAwIBAgIUNU2ZnXIdu9aq+O7x2emLTgXgQEowDQYJKoZIhvcNAQEL
                  BQAwRTELMAkGA1UEBhMCUEwxDzANBgNVBAoMBmluZXR1bTEPMA0GA1UECwwGbHVi
                  bGluMRQwEgYDVQQDDAtiYXNpY0NvbW1vbjAeFw0yMTA5MDMwNzQyMDBaFw00MTA4
                  MjkwNzQyMDBaMEUxCzAJBgNVBAYTAlBMMQ8wDQYDVQQKDAZpbmV0dW0xDzANBgNV
                  BAsMBmx1YmxpbjEUMBIGA1UEAwwLYmFzaWNDb21tb24wggIiMA0GCSqGSIb3DQEB
                  AQUAA4ICDwAwggIKAoICAQDEc1NevRvKaIDs5CsGbIc/ETm3gHmG3OP9Z8ULQv1y
                  W1VzdjSKfgoVWVEsbhuhaRaWyIuaFh6dsWpWEcXpHkq+DiRuQGifBmUNFURZQ8Aw
                  UOrQ4F10UuzulEYauYh218rGSynLnIXCO3UHXGjWX+iiXPjbesFcnLPaarmLmQU9
                  AAh9MpBb3ztMzh5wRGcyVpuDxZ7e0HDBlI7hNMEqCFO/brJsILtv5q0j4JoShyWX
                  NVV8tX8P+biMlyMcVoZJazBfYuYErxmxdXtORxOkfge815ltGoMI9V4YSSex3/Fv
                  /PBavpF4iueqcrWQF3dhctAViPEzpMoefTu+cFtB/40wx/NHiBF5x5rjcT2s/+6W
                  b9OGLxLLf84XpYlHWtucfFLzznPMiXNegfkJpU0dMuMh1GT5WNTfmcPV3LiasbI0
                  GNq6mWKLgcRHX95pw16vw0CqzPnFTASztnI12mIYm6D0oQ+tHjLoPrW3fiZEeF67
                  fVA8LNWJwCkzHlnnNl5HP15K+GoscyzyMKj7ViAqN+XZaCRpRqYNZGkGXB9mSVQn
                  0oK6eRX8oQ4NQQW49VNoho9I8DhcCdMglMj9bhciIy2LrSwB8Sx9nB1C9wiHDbCA
                  fTy1nxEJS9gUGg7LNmRxlpQFBuQ0ndq87UEUdjchvbmJD7T5ZYM0LgDopJypBsqF
                  gQIDAQABo2MwYTAdBgNVHQ4EFgQUUS08257ro38KOB1a8pqYL3P2NvAwHwYDVR0j
                  BBgwFoAUUS08257ro38KOB1a8pqYL3P2NvAwEgYDVR0TAQH/BAgwBgEB/wIBCjAL
                  BgNVHQ8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIBAGtYjON+CFzVGRkajHK1RKZS
                  J4kAfQlrXq1vG2b4jWYSLgrNw4o93xx0yLK0HVHO12juFhUrmlfhCB/iGI9iL2IO
                  h7v+PQ4L5wQJWfxZNWDZpqbF3S7UyDGAFx1J3MwjIhkoPpaIB0km+sQCJxn5Vt36
                  OPCKmORm4tplBHNauP9PpS418HAC9uyrew/h/0BLLaPF9BwFWk4HmSwfSFTHOvyh
                  hC1G4cEzHuiadLGCPXwerCe5As9F4InvIYmQ4UxAOtnlQcnQYOowFSrMobkArGR9
                  HcG1b0vWQJdzVrDU7zcRzD90ehwsXJIczOQoa/Hmb3Njlop8LyTFPjeXeoJf6PJE
                  MHy08IOLvaX4UsRiKLKJ28JEhVVemBrPspHeADqmlbeBotQ6OToWFeki9qQSz5Lw
                  lks/4qfRn6Xl3rmRSH8FdbK3VdIYInT7PTz5W2EBE8Ql5vneSPb9aank+9H67mB5
                  GQ8uYpxcs6Qjyy62pkfejlHHHh5oqEq0b6w7YyUuMAEW0JB0WevoCS8iVl8hKbyK
                  94u/PqW6lH+agw4kaMzaeMwBmppAy4JsiEKKavvP3jO6NDMc1bHt5q2+XTRPdlQY
                  DVZJfXybnOvsTQv41A4zyHSaNZsH1AyhJPfFKAMPXhajm7dBCi87bamMj4NyZt8f
                  PPBUaE6x9fMfuGJbcsAR
                  -----END CERTIFICATE-----
            schema:
              $ref: '#/components/schemas/UploadedTrustedCertificate'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: The certificate was added to the tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/tenantNotFound'
        '409':
          description: Duplicate – A certificate with the same fingerprint already exists.
        '422':
          description: Unprocessable Entity – Invalid certificate data.
    get:
      operationId: getTrustedCertificateCollectionResource
      x-codegen-resource-name: getTrustedCertificates
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all stored certificates
      description: |
        Retrieve all the trusted certificates of a specific tenant (by a given ID).

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_READ) <b>AND</b> (is the current tenant)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the trusted certificates are sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificateCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/tenantNotFound'
  '/tenant/tenants/{tenantId}/trusted-certificates/bulk':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/queryParam_addToTrustStore'
    post:
      operationId: postTrustedCertificateCollectionResourceBulk
      x-codegen-resource-name: addTrustedCertificates
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Add multiple certificates
      description: |
        Add multiple trusted certificates to a specific tenant (by a given ID) which can be further used by the devices to establish connections with the Cumulocity platform.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (is the current tenant)
        </section>
      requestBody:
        required: true
        content:
          application/json:
            example:
              certificates:
                - name: My Certificate
                  status: ENABLED
                  autoRegistrationEnabled: true
                  certInPemFormat: |
                    -----BEGIN CERTIFICATE-----
                      MIIFezCCA2OgAwIBAgIUNU2ZnXIdu9aq+O7x2emLTgXgQEowDQYJKoZIhvcNAQEL
                      BQAwRTELMAkGA1UEBhMCUEwxDzANBgNVBAoMBmluZXR1bTEPMA0GA1UECwwGbHVi
                      bGluMRQwEgYDVQQDDAtiYXNpY0NvbW1vbjAeFw0yMTA5MDMwNzQyMDBaFw00MTA4
                      MjkwNzQyMDBaMEUxCzAJBgNVBAYTAlBMMQ8wDQYDVQQKDAZpbmV0dW0xDzANBgNV
                      BAsMBmx1YmxpbjEUMBIGA1UEAwwLYmFzaWNDb21tb24wggIiMA0GCSqGSIb3DQEB
                      AQUAA4ICDwAwggIKAoICAQDEc1NevRvKaIDs5CsGbIc/ETm3gHmG3OP9Z8ULQv1y
                      W1VzdjSKfgoVWVEsbhuhaRaWyIuaFh6dsWpWEcXpHkq+DiRuQGifBmUNFURZQ8Aw
                      UOrQ4F10UuzulEYauYh218rGSynLnIXCO3UHXGjWX+iiXPjbesFcnLPaarmLmQU9
                      AAh9MpBb3ztMzh5wRGcyVpuDxZ7e0HDBlI7hNMEqCFO/brJsILtv5q0j4JoShyWX
                      NVV8tX8P+biMlyMcVoZJazBfYuYErxmxdXtORxOkfge815ltGoMI9V4YSSex3/Fv
                      /PBavpF4iueqcrWQF3dhctAViPEzpMoefTu+cFtB/40wx/NHiBF5x5rjcT2s/+6W
                      b9OGLxLLf84XpYlHWtucfFLzznPMiXNegfkJpU0dMuMh1GT5WNTfmcPV3LiasbI0
                      GNq6mWKLgcRHX95pw16vw0CqzPnFTASztnI12mIYm6D0oQ+tHjLoPrW3fiZEeF67
                      fVA8LNWJwCkzHlnnNl5HP15K+GoscyzyMKj7ViAqN+XZaCRpRqYNZGkGXB9mSVQn
                      0oK6eRX8oQ4NQQW49VNoho9I8DhcCdMglMj9bhciIy2LrSwB8Sx9nB1C9wiHDbCA
                      fTy1nxEJS9gUGg7LNmRxlpQFBuQ0ndq87UEUdjchvbmJD7T5ZYM0LgDopJypBsqF
                      gQIDAQABo2MwYTAdBgNVHQ4EFgQUUS08257ro38KOB1a8pqYL3P2NvAwHwYDVR0j
                      BBgwFoAUUS08257ro38KOB1a8pqYL3P2NvAwEgYDVR0TAQH/BAgwBgEB/wIBCjAL
                      BgNVHQ8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIBAGtYjON+CFzVGRkajHK1RKZS
                      J4kAfQlrXq1vG2b4jWYSLgrNw4o93xx0yLK0HVHO12juFhUrmlfhCB/iGI9iL2IO
                      h7v+PQ4L5wQJWfxZNWDZpqbF3S7UyDGAFx1J3MwjIhkoPpaIB0km+sQCJxn5Vt36
                      OPCKmORm4tplBHNauP9PpS418HAC9uyrew/h/0BLLaPF9BwFWk4HmSwfSFTHOvyh
                      hC1G4cEzHuiadLGCPXwerCe5As9F4InvIYmQ4UxAOtnlQcnQYOowFSrMobkArGR9
                      HcG1b0vWQJdzVrDU7zcRzD90ehwsXJIczOQoa/Hmb3Njlop8LyTFPjeXeoJf6PJE
                      MHy08IOLvaX4UsRiKLKJ28JEhVVemBrPspHeADqmlbeBotQ6OToWFeki9qQSz5Lw
                      lks/4qfRn6Xl3rmRSH8FdbK3VdIYInT7PTz5W2EBE8Ql5vneSPb9aank+9H67mB5
                      GQ8uYpxcs6Qjyy62pkfejlHHHh5oqEq0b6w7YyUuMAEW0JB0WevoCS8iVl8hKbyK
                      94u/PqW6lH+agw4kaMzaeMwBmppAy4JsiEKKavvP3jO6NDMc1bHt5q2+XTRPdlQY
                      DVZJfXybnOvsTQv41A4zyHSaNZsH1AyhJPfFKAMPXhajm7dBCi87bamMj4NyZt8f
                      PPBUaE6x9fMfuGJbcsAR
                      -----END CERTIFICATE-----
            schema:
              $ref: '#/components/schemas/UploadedTrustedCertificateCollection'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/bulk" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/bulk");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/bulk")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/bulk")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/bulk"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: The certificates were added to the tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificateCollection'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/tenantNotFound'
        '409':
          description: Duplicate – A certificate with the same fingerprint already exists.
        '422':
          description: Unprocessable Entity – Invalid certificates data.
  '/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/fingerprint'
    get:
      operationId: getTrustedCertificateResource
      x-codegen-resource-name: getTrustedCertificate
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a stored certificate
      description: |
        Retrieve the data of a stored trusted certificate (by a given fingerprint) of a specific tenant (by a given ID).

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_READ) <b>AND</b> (is the current tenant <b>OR</b> is the management tenant)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the trusted certificate is sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
        '401':
          $ref: '#/components/responses/unauthorizedError'
    put:
      operationId: putTrustedCertificateResource
      x-codegen-resource-name: updateTrustedCertificate
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a stored certificate
      description: |
        Update the data of a stored trusted certificate (by a given fingerprint) of a specific tenant (by a given ID).

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (is the current tenant <b>OR</b> is the management tenant)
        </section>
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: My Certificate
              status: ENABLED
            schema:
              allOf:
                - $ref: '#/components/schemas/TrustedCertificate'
                - type: object
                  properties:
                    certInPemFormat:
                      readOnly: true
                    proofOfPossessionValid:
                      readOnly: true
                    proofOfPossessionUnsignedVerificationCode:
                      readOnly: true
                    proofOfPossessionVerificationCodeUsableUntil:
                      readOnly: true
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The certificate was updated on the tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          description: Certificate not found.
        '422':
          $ref: '#/components/responses/invalidPayload'
    delete:
      operationId: deleteTrustedCertificateResource
      x-codegen-resource-name: removeTrustedCertificate
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a stored certificate
      description: |
        Remove a stored trusted certificate (by a given fingerprint) from a specific tenant (by a given ID).
        When a trusted certificate is deleted, the established MQTT connection to all devices that are using the corresponding certificate are closed.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> (is the current tenant <b>OR</b> is the management tenant)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates/{fingerprint}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: The trusted certificate was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          description: Certificate not found.
  '/tenant/tenants/{tenantId}/tfa':
    parameters:
      - $ref: '#/components/parameters/tenantId'
    get:
      operationId: getTenantsTfaResourceTfa
      x-codegen-resource-name: getTenantTfaSettings
      tags:
        - Tenants
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve TFA settings of a specific tenant
      description: |
        Retrieve the two-factor authentication settings of a specific tenant by a given tenant ID.

        <section><h5>Required roles</h5>
        ((ROLE_TENANT_MANAGEMENT_READ <b>OR</b> ROLE_USER_MANAGEMENT_READ) <b>AND</b> (the current tenant is its parent <b>OR</b> is the management tenant <b>OR</b> the current user belongs to the tenant)) <b>OR</b> (the user belongs to the tenant <b>AND</b> ROLE_USER_MANAGEMENT_OWN_READ)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers = headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The request has succeeded and the TFA settings are sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantTfaData'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/tenantNotFound'
    put:
      operationId: putTenantsTfaResourceTfa
      x-codegen-resource-name: updateTenantTfaSettings
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Tenants
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Sets TFA settings for a specific tenant
      description: |
        Sets the two-factor authentication settings of a specific tenant for a specific tenant ID.

        <section><h5>Required roles</h5>
        ((ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_UPDATE) <b>AND</b> (the current tenant is its parent <b>OR</b> the current user belongs to the tenant)))
        </section>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tenantTfaStrategy'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);    

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")    
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json    

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/tfa"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: The tenant's TFA configuration was updated.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/tenantNotFound'
  '/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/fingerprint'
    post:
      operationId: postTrustedCertificatePopResource
      x-codegen-resource-name: proveCertificatePossession
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Provide the proof of possession for an already uploaded certificate
      description: |
        Provide the proof of possession for a specific uploaded certificate (by a given fingerprint) for a specific tenant (by a given ID).

        <div class="reqRoles"><div><h5></h5></div><div>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> is the current tenant
        </div></div>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadedTrustedCertSignedVerificationCode'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/pop"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The provided signed verification code check was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
        '400':
          description: The provided signed verification code is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: tenants/Bad Request
                message: 'Wrong Proof Of Possession plaintext used for tenant <''t012''>. Certificate <''df9c19e0433c6861bac899078b76fe56a3e7dd14''>, usage not granted.'
                info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/trustedCertificateNotFound'
        '422':
          description: Proof of possession for the certificate was not confirmed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                unprocessable:
                  value:
                    error: tenants/Unprocessable Entity
                    message: Cannot process certificate data <'df9c19e0433c6861bac899078b76fe56a3e7dd14'> for tenant <'t012'>.
                    info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
                invalidData:
                  value:
                    error: tenants/Invalid Data
                    message: Cannot process user certificate data <'df9c19e0433c6861bac899078b76fe56a3e7dd14'> for tenant <'t012'>.
                    info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
  '/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/fingerprint'
    post:
      operationId: postConfirmedTrustedCertificatePopResource
      x-codegen-resource-name: confirmCertificate
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Confirm an already uploaded certificate
      description: |
        Confirm an already uploaded certificate (by a given fingerprint) for a specific tenant (by a given ID).

        <div class="reqRoles"><div><h5></h5></div><div>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> is the management tenant
        </div></div>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "applicatio json.dumps(<Payload>)n/json")
                .header("Accept", "application/json")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/confirmed"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The certificate is confirmed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/trustedCertificateNotFound'
        '422':
          description: The verification was not successful. Certificate not confirmed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                unprocessable:
                  value:
                    error: tenants/Unprocessable Entity
                    message: Cannot process certificate data <'df9c19e0433c6861bac899078b76fe56a3e7dd14'> for tenant <'t012'>.
                    info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
                invalidData:
                  value:
                    error: tenants/Invalid Data
                    message: Cannot process user certificate data <'df9c19e0433c6861bac899078b76fe56a3e7dd14'> for tenant <'t012'>.
                    info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
  '/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/fingerprint'
    post:
      operationId: postVerificationCodeTrustedCertificatesPopResource
      x-codegen-resource-name: generateVerificationCode
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Generate a verification code for the proof of possession operation for the given certificate
      description: |
        Generate a verification code for the proof of possession operation for the certificate (by a given fingerprint).

        <div class="reqRoles"><div><h5></h5></div><div>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> is the current tenant
        </div></div>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/trusted-certificates-pop/{fingerprint}/verification-code"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The verification code was generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/trustedCertificateNotFound'
  /tenant/trusted-certificates/verify-cert-chain:
    post:
      operationId: postX509ChainValidate
      x-codegen-resource-name: validateChain
      parameters:
        - $ref: '#/components/parameters/certChainInHeader'
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Verify a certificate chain
      description: |
        Verify a device certificate chain against a specific tenant using file upload or by HTTP headers.
        The tenant ID is `optional` and this api will try to resolve the tenant from the chain if not found in the request header.
        For file upload, the max chain length support is 10 and for a header it is 5.

        If CRL (certificate revocation list) check is enabled on the tenant and the certificate chain is identified to be revoked during validation the further validation of the chain stops and returns unauthorized.

        > **&#9432; Info:** File upload takes precedence over HTTP headers if both are passed.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_READ) <b>AND</b> (is the current tenant <b>OR</b> is current management tenant) <b>OR</b> (is authenticated <b>AND</b> is current user service user)
        </section>
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                tenantId:
                  type: string
                file:
                  description: File to be uploaded.
                  type: string
                  format: binary
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST 'https://<TENANT_DOMAIN>/tenant/trusted-certificates/verify-cert-chain' \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --form 'tenantId={tenantId}' \
            --form 'file=@"/path_to_file/cert_chain.pem"' \
            OR
            curl --location --request POST 'https://<TENANT_DOMAIN>/tenant/trusted-certificates/verify-cert-chain' \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --header "X-Cumulocity-TenantId:{tenantId}" \
            --header "X-Cumulocity-Client-Cert-Chain:{cert-chain}"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/trusted-certificates/verify-cert-chain");
            client.Timeout = -1;
            var request = new RestRequest(Method.POST);
            request.AlwaysMultipartFormData = true;
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("tenantId", {tenantId});
            request.AddFile("file", "/path_to_file/cert_chain.pem");
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
            OR
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/trusted-certificates/verify-cert-chain");
            client.Timeout = -1;
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddHeader("X-Cumulocity-TenantId", {tenantId});
            request.AddHeader("X-Cumulocity-Client-Cert-Chain", {cert-chain});
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/trusted-certificates/verify-cert-chain")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .field("tenantId", {tenantId})
                .field("file", new File("/path_to_file/cert_chain.pem"))
                .asString();
            System.out.println(response);
            OR
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/trusted-certificates/verify-cert-chain")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .header("X-Cumulocity-TenantId", {tenantId})
                .header("X-Cumulocity-Client-Cert-Chain", {cert-chain})
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/trusted-certificates/verify-cert-chain")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .field('tenantId', {tenantId})
                .attach('file', '/path_to_file/cert_chain.pem')
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
            OR
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/trusted-certificates/verify-cert-chain")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "X-Cumulocity-TenantId": {tenantId},
                    "X-Cumulocity-Client-Cert-Chain": {cert-chain},
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json
            url = "https://<TENANT_DOMAIN>/tenant/trusted-certificates/verify-cert-chain"
            payload={'tenantId': {tenantId}}
            files=[
            ('file',('cert_chain.pem',open('/path_to_file/cert_chain.pem','rb'),'application/octet-stream'))
            ]
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data=payload, files=files)
            print(response.text.encode("utf8"))
            OR
            import requests
            import json
            url = "https://<TENANT_DOMAIN>/tenant/trusted-certificates/verify-cert-chain"
            payload={}
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-Cumulocity-TenantId": {tenantId},
              "X-Cumulocity-Client-Cert-Chain": {cert-chain},
            }
            response = requests.request("POST", url, headers=headers, data=payload)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The certificate chain is valid and not revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyCertificateChain'
        '400':
          $ref: '#/components/responses/unableToParseCertBadRequest'
        '401':
          $ref: '#/components/responses/x509CertificateValidationUnauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/tenantDoesNotExists'
  /tenant/trusted-certificates/settings/crl:
    put:
      operationId: putCRLSettings
      x-codegen-resource-name: updateCRL
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Add revoked certificates
      description: |
        > **&#9432; Info:** A certificate revocation list (CRL) is a list of digital certificates
           that have been revoked by the issuing certificate authority (CA) before expiration date.
           In Cumulocity, a CRL check can be in online or offline mode or both.

        An endpoint to add revoked certificate serial numbers for offline CRL check via payload or file.

        For payload, a JSON object required with list of CRL entries, for example:
         ```json
           {
            "crls": [
              {
                "serialNumberInHex": "1000",
                "revocationDate": "2023-01-11T16:12:36.288Z"
              }
             ]
            }
          ```
        Each entry is composed of:
         * serialNumberInHex: Needs to be in `Hexadecimal Value`. e.g As (1000)^16 == (4096)^10, So we have to enter 1000.
            If duplicate serial number exists in payload, the existing entry stays</br>
         * `revocationDate` - accepted Date format: `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`, for example: `2023-01-11T16:12:36.288Z`.
             This is an optional parameter and defaults to the current server UTC date time if not specified in the payload.
             If specified and the date is in future then those entries will be also defaulted to current date.

        For file upload, each file can hold at maximum 5000 revocation entries.
        Multiple upload is allowed.
        In case of duplicates, the latest (last uploaded) entry is considered.

        See below for a sample CSV file:

        | SERIAL NO.  | REVOCATION DATE |
        |--|--|
        | 1000 | 2023-01-11T16:12:36.288Z |

         Each entry is composed of :
         * serialNumberInHex: Needs to be in `Hexadecimal Value`. e.g (1000)^16 == (4096)^10, So we have to enter 1000.
            If duplicate serial number exists in payload, the latest entry will be taken.</br>
         * revocationDate: Accepted Date format: `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'` e.g: 2023-01-11T16:12:36.288Z.
         This is an optional and will be default to current server UTC date time if not specified in payload.
         If specified and the date is in future then those entries will be skipped.

        The CRL setting for offline and online check can be enabled/disabled using <kbd><a href="#operation/putOptionResource">/tenant/options</a></kbd>.
        Keys are `crl.online.check.enabled` and `crl.offline.check.enabled` under the category `configuration`.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN) <b>AND</b> is the current tenant
        </section>

        **⚠️ Important:** According to CRL policy, added serial numbers cannot be reversed.
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT 'https://<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl' \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data '{
              "crls": [
                  {
                      "serialNumberInHex": "<SERIAL_NO>",
                      "revocationDate": "<yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
                  }
              ]
            }'
            OR
            curl --location --request PUT 'https://<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl' \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --form 'file=@"/path_to_file/CRL_bulk_registration_template.csv"'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl");
            client.Timeout = -1;
            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            var body = @"{" + "\n" +
                        @"    ""crls"": [" + "\n" +
                        @"        {" + "\n" +
                        @"            ""serialNumberInHex"": ""<SERIAL_NO>""," + "\n" +
                        @"            ""revocationDate"": ""<yyyy-MM-dd'T'HH:mm:ss.SSS'Z'>""" + "\n" +
                        @"        }" + "\n" +
                        @"    ]" + "\n" +
                        @"}";
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddStringBody(body, DataFormat.Json);
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
            OR
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl");
            client.Timeout = -1;
            var request = new RestRequest(Method.PUT);
            request.AlwaysMultipartFormData = true;
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddFile("file", "/path_to_file/CRL_bulk_registration_template.csv");
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("{\n    \"crls\": [\n        
                     {\n            \"serialNumberInHex\": \"<SERIAL_NO>\",\n            
                     \"revocationDate\": \"<yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"\n        
                      }\n    
                    ]\n}")
                .asString();
            System.out.println(response);
            OR
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .field("file", new File("/path_to_file/CRL_bulk_registration_template.csv"))
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify({
                      "crls": [
                        {
                          "serialNumberInHex": "<SERIAL_NO>",
                          "revocationDate": "<yyyy-MM-dd'T'HH:mm:ss.SSS'Z'>"
                        }
                      ]
                  }))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
            OR
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                })
                .attach('file', '/path_to_file/CRL_bulk_registration_template.csv')
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json
            url = "https://<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl"
            payload = json.dumps({
              "crls": [
                {
                  "serialNumberInHex": "<SERIAL_NO>",
                  "revocationDate": "<yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
                }
              ]
            })
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, data=payload)
            print(response.text.encode("utf8"))
            OR
            import requests
            import json
            url = "https://<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl"
            payload = {}
            files=[
            ('file',('cert_chain.pem',open('/path_to_file/CRL_bulk_registration_template.csv','rb'),'application/octet-stream'))
            ]
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
            }
            response = requests.request("PUT", url, headers=headers, data=payload, files=files)
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCRLEntries'
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  description: File to be uploaded.
                  type: string
                  format: binary
      responses:
        '204':
          description: CRLs updated successfully.
        '400':
          $ref: '#/components/responses/unableToParseCRLEntries'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
    get:
      operationId: getCRLSettings
      x-codegen-resource-name: downloadCrl
      tags:
        - Trusted certificates
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Get revoked certificates
      description: |
        This endpoint downloads current CRL file containing list of revoked certificate in
        a binary file format with `content-type` as `application/pkix-crl`.

        <section><h5>Required roles</h5>
        (ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_READ)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET 'https//<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl' \
            --header "Accept: */*" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https//<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl");
            client.Timeout = -1;
            var request = new RestRequest(Method.GET);
            request.AddHeader("Accept", "*/*");
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            httpsResponse<String> response = Unirest.get("https//<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl")
                .header("Accept", "*/*")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https//<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl")
                .headers({
                    "Accept": "*/*",
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json
            url = "https//<TENANT_DOMAIN>/tenant/trusted-certificates/settings/crl"
            payload={}
             headers = {
              "Accept": "*/*",
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers, data=payload)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The CRL file of the current tenant.
          content:
            application/pkix-crl:
              schema:
                description: The generated CRL file in binary format
                type: string
                format: binary
  /devicecontrol/deviceAccessToken:
    post:
      operationId: postDeviceAccessTokenResource
      x-codegen-resource-name: obtainAccessToken
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/sslCertChainInHeader'
      tags:
        - Trusted certificates
      security: []
      summary: Obtain device access token
      description: |
        Only those devices which are registered to use cert auth can authenticate via mTLS protocol and retrieve JWT token. Device access token API works only on port 8443 via mutual TLS (mTLS) connection.
        Immediate issuer of client certificate must present in Platform's truststore, if not then whole certificate chain needs to send in header and root or any intermediate certificate must be present in the Platform's truststore.
        We must have the following:
         * private_key
         * client certificate
         * whole certificate chain (Optional - This API requires the client to send a custom header `X-SSL-CERT-CHAIN` only if the immediate issuer of the client's certificate is not uploaded as a trusted certificate on the platform. If the immediate issuer is already uploaded and trusted, the header can be omitted)
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>:8443/devicecontrol/deviceAccessToken" --cert domain-cert.pem --key domain-private-key.pem \
            --header "Accept: application/json" \
            --header "X-Ssl-Cert-Chain:{cert-chain}"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>:8443/devicecontrol/deviceAccessToken");
            client.Timeout = -1;
            var request = new RestRequest(Method.POST);
            request.AddHeader("Accept", "application/json");
            request.AddHeader("X-Ssl-Cert-Chain", {cert-chain});
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            KeyStore keyStore = KeyStore.getInstance("JKS");
            keyStore.load(null, null);
            // x509Certificate is domain certificate
            // domainKeyPair is KeyPair for domain certificate
            keyStore.setKeyEntry("cert", this.domainKeyPair.getPrivate(), keystorePassword, new Certificate[]{x509Certificate});
            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
            keyManagerFactory.init(keyStore, keystorePassword);
            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
            trustStore.load(null, null);
            trustStore.setCertificateEntry("server_public_key", x509Certificate);
            trustManagerFactory.init(trustStore);
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);
            HttpClient httpClient = HttpClient.newBuilder().sslContext(sslContext).build();
            HttpRequest request = HttpRequest.newBuilder().uri(new URI(https://<TENANT_DOMAIN>:8443/devicecontrol/deviceAccessToken))
            .POST(HttpRequest.BodyPublishers.noBody())
            .header("Accept", "application/json")
            .header("X-ssl-Cert-Chain", {cert-chain}).build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            System.out.println(response.body());
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>:8443/devicecontrol/deviceAccessToken")
                .headers({
                    "Accept": "application/json",
                    "X-Ssl-Cert-Chain": {cert-chain}
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json
            url = "https://<TENANT_DOMAIN>:8443/devicecontrol/deviceAccessToken"
            headers = {
              "Accept": "application/json",
              "X-Ssl-Cert-Chain":{cert-chain}
            }
            response = requests.request("POST", url, headers = headers, files = files)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: Successfully retrieved device access token from device certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '400':
          $ref: '#/components/responses/unableToParseCertBadRequest'
        '401':
          $ref: '#/components/responses/x509CertificateValidationUnauthorizedError'
        '404':
          $ref: '#/components/responses/deviceAccessTokenNotFound'
        '422':
          description: The verification was not successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                unprocessable:
                  value:
                    error: Auto registeration is failed for device/Unprocessable Entity
                    message: Cannot process certificate data.
                    info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
                invalidData:
                  value:
                    error: Invalid Data
                    message: Cannot process certificate data.
                    info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
  /tenant/statistics:
    get:
      operationId: getTenantUsageStatisticsCollectionResource
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_tenant_dateFrom'
        - $ref: '#/components/parameters/queryParam_tenant_dateTo'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalElements'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Usage statistics
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve statistics of the current tenant
      description: |
        Retrieve usage statistics of the current tenant.

        <section><h5>Required roles</h5>
        ROLE_TENANT_STATISTICS_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/statistics"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/tenantUsageStatisticsCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /tenant/statistics/summary:
    get:
      operationId: getSummaryUsageStatistics
      x-codegen-resource-name: getTenantUsageStatistics
      parameters:
        - $ref: '#/components/parameters/queryParam_tenant_dateFrom'
        - $ref: '#/components/parameters/queryParam_tenant_dateTo'
        - $ref: '#/components/parameters/queryParam_tenant_tenant'
      tags:
        - Usage statistics
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a usage statistics summary
      description: |-
        Retrieve a usage statistics summary of a tenant.
        <section><h5>Required roles</h5> ROLE_TENANT_STATISTICS_READ <b>OR</b> ROLE_INVENTORY_READ <b>OR</b> ROLE_MANAGED_OBJECT_READ If the `tenant` request parameter is specified, then the current tenant must be the management tenant <b>OR</b> the parent of the requested `tenant`. </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/summary" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/summary");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/summary")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/summary")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/statistics/summary"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/summaryUsageStatisticsFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/tenantNotFound'
  /tenant/statistics/allTenantsSummary:
    get:
      operationId: getSummaryAllTenantsUsageStatistics
      x-codegen-resource-name: getTenantsUsageStatistics
      parameters:
        - $ref: '#/components/parameters/queryParam_tenant_dateFrom'
        - $ref: '#/components/parameters/queryParam_tenant_dateTo'
      tags:
        - Usage statistics
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a summary of all usage statistics
      description: |
        Retrieve a summary of all tenants usage statistics.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/allTenantsSummary" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/allTenantsSummary");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/allTenantsSummary")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/allTenantsSummary")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/statistics/allTenantsSummary"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/summaryAllTenantsUsageStatisticsFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /tenant/statistics/files:
    post:
      operationId: postGenerateStatisticsFileRequest
      x-codegen-resource-name: generateStatisticsFile
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Usage statistics
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Generate a statistics file report
      description: |
        Generate a TEST statistics file report for a given time range.

        There are two types of statistics files:
        * REAL - generated by the system on the first day of the month and including statistics from the previous month.
        * TEST - generated by the user with a time range specified in the query parameters (`dateFrom`, `dateTo`).

        `dateFrom` and `dateTo` are using daily granularity and each day is stored with respect to local Time Zone of the server.

        > **&#9432; Info:** This is only accessible by the Management tenant.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_CREATE
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/statistics/files" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw "<Payload>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/files");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/statistics/files")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/statistics/files")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/statistics/files"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.tenantstatisticsdate+json:
            schema:
              $ref: '#/components/schemas/rangeStatisticsFile'
      responses:
        '201':
          description: A statistics file was generated.
          content:
            application/vnd.com.nsn.cumulocity.tenantstatisticsfile+json:
              schema:
                $ref: '#/components/schemas/StatisticsFile'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getTenantUsageStatisticsFileCollectionResource
      x-codegen-resource-name: getMetadata
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_file_dateFrom'
        - $ref: '#/components/parameters/queryParam_file_dateTo'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Usage statistics
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve usage statistics files metadata
      description: |
        Retrieve usage statistics summary files report metadata.

        > **&#9432; Info:** This is only accessible by the Management tenant.

        Date range defines the search criteria for files which have any data inside this range. For example, query containing `dateFrom=2023-03-01&dateTo=2023-03-31`
        will return files with statistics from ranges 2023-02-25---2023-03-03, 2023-03-04---2023-03-05, 2023-03-15---2023-04-15, but not the files where
        the whole range of data is outside of queried range, like 2023-02-01---2023-02-27.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/files" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/files");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/files")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/files")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/statistics/files"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/tenantStatisticsFileCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/tenant/statistics/files/{id}':
    parameters:
      - $ref: '#/components/parameters/fileId'
    get:
      operationId: getTenantUsageStatisticsFileById
      x-codegen-resource-name: getStatisticsFile
      tags:
        - Usage statistics
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a usage statistics file
      description: |
        Retrieve a specific usage statistics file (by a given ID).

        > **&#9432; Info:** This is only accessible by the Management tenant.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/files/{id}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/files/{id}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/files/{id}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/files/{id}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/statistics/files/{id}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/fileFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          $ref: '#/components/responses/fileNotFound'
  '/tenant/statistics/files/latest/{month}':
    parameters:
      - $ref: '#/components/parameters/statisticsFileMonth'
    get:
      operationId: getTenantUsageStatisticsLatestFile
      x-codegen-resource-name: getLatestStatisticsFile
      tags:
        - Usage statistics
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve the latest usage statistics file
      description: |
        Retrieve the latest usage statistics file with REAL data for a given month.

        There are two types of statistics files:
        * REAL - generated by the system on the first day of the month and includes statistics for the previous month.
        * TEST - generated by the user with a time range specified in the query parameters (`dateFrom`, `dateTo`).

        > **&#9432; Info:** This is only accessible by the Management tenant.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/files/latest/{month}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/files/latest/{month}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/files/latest/{month}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/files/latest/{month}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/statistics/files/latest/{month}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/fileFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/tenant/statistics/device/{tenantId}/monthly/{date}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/monthlyDate'
    get:
      operationId: getTenantDeviceStatisticsMonthlyCollection
      x-codegen-resource-name: getMonthlyDeviceStatistics
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_deviceId'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Device statistics
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve monthly device statistics
      description: |
        Retrieve monthly device statistics from a specific tenant (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_TENANT_STATISTICS_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/monthly/{date}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/monthly/{date}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/monthly/{date}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/monthly/{date}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/monthly/{date}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/monthlyDeviceStatisticsCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
  '/tenant/statistics/device/{tenantId}/daily/{date}':
    parameters:
      - $ref: '#/components/parameters/tenantId'
      - $ref: '#/components/parameters/dailyDate'
    get:
      operationId: getTenantDeviceStatisticsDailyCollection
      x-codegen-resource-name: getDailyDeviceStatistics
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_deviceId'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Device statistics
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve daily device statistics
      description: |
        Retrieve daily device statistics from a specific tenant (by a given ID).

        <section><h5>Required roles</h5>
        ROLE_TENANT_STATISTICS_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/daily/{date}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/daily/{date}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/daily/{date}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/daily/{date}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/statistics/device/{tenantId}/daily/{date}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("GET", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/dailyDeviceStatisticsCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
  /tenant/loginOptions:
    post:
      operationId: postLoginOptionCollectionResource
      x-codegen-resource-name: createLoginOption
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Login options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create a login option
      description: |
        Create an authentication configuration on your tenant.

        <section><h5>Required roles</h5>
        ROLE_TENANT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_ADMIN
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.authconfig+json:
            example:
              userManagementSource: INTERNAL
              type: OAUTH2_INTERNAL
              sessionConfiguration:
                absoluteTimeoutMillis: 7200000
                renewalTimeoutMillis: 3600000
                userAgentValidationRequired: false
                maximumNumberOfParallelSessions: 3
              providerName: Cumulocity
              visibleOnLoginPage: true
              grantType: PASSWORD
            schema:
              allOf:
                - $ref: '#/components/schemas/authConfig'
                - properties:
                    id:
                      readOnly: true
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/loginOptions" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/loginOptions");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/loginOptions")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/loginOptions")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/loginOptions"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }

            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: A login option was created.
          content:
            application/vnd.com.nsn.cumulocity.authconfig+json:
              schema:
                $ref: '#/components/schemas/authConfig'
        '400':
          description: Duplicated – The login option already exists.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getLoginOptionCollectionResource
      x-codegen-resource-name: getLoginOptions
      parameters:
        - $ref: '#/components/parameters/queryParam_tenant_management'
        - $ref: '#/components/parameters/queryParam_tenantId'
      tags:
        - Login options
      security: []
      summary: Retrieve all login options
      description: Retrieve all login options available in the tenant.
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/loginOptions"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/loginOptions");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/loginOptions").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/loginOptions")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/loginOptions")
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/loginOptionCollectionResourceFound'
        '400':
          $ref: '#/components/responses/loginOptionBadRequest'
  '/tenant/loginOptions/{typeOrId}':
    get:
      operationId: getLoginOptionResource
      x-codegen-resource-name: getLoginOption
      parameters:
        - $ref: '#/components/parameters/loginOptionTypeOrId'
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Login options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific login option
      description: |
        Retrieve a specific login option in the tenant by the given type or ID.

        <section><h5>Required roles</h5>
        ((ROLE_TENANT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_OWN_ADMIN <b>OR</b> ROLE_USER_MANAGEMENT_CREATE)
        <b>AND</b> tenant access to login option is not restricted by management tenant)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Accept", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Accept", "application/json")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json"
            }
            response = requests.request("PUT", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/loginOptionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/loginOptionNotFound'
    put:
      operationId: putLoginOptionResource
      x-codegen-resource-name: updateLoginOption
      parameters:
        - $ref: '#/components/parameters/loginOptionTypeOrId'
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/processingModeHeader'
      tags:
        - Login options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a specific login option
      description: |
        Update a specific login option in the tenant by a given type or ID.

        <section><h5>Required roles</h5>
        ((ROLE_TENANT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_ADMIN)
        <b>AND</b> tenant access to login option is not restricted by management tenant)
        </section>
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.authconfig+json:
            example:
              userManagementSource: INTERNAL
              id: 924997e5-863c-4532-96f9-cbe6dc5f8902
              type: OAUTH2_INTERNAL
              providerName: Cumulocity
              visibleOnLoginPage: true
            schema:
              allOf:
                - $ref: '#/components/schemas/authConfig'
                - required:
                    - id
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}\
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId});
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }

            response = requests.request("PUT", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: A login option was updated.
          content:
            application/vnd.com.nsn.cumulocity.authconfig+json:
              schema:
                $ref: '#/components/schemas/authConfig'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/loginOptionNotFound'
    delete:
      operationId: deleteLoginOptionResource
      x-codegen-resource-name: deleteLoginOption
      parameters:
        - $ref: '#/components/parameters/loginOptionTypeOrId'
      tags:
        - Login options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Delete a specific login option
      description: |
        Delete a specific login option in the tenant by a given type or ID.

        <section><h5>Required roles</h5>
        ((ROLE_TENANT_ADMIN <b>OR</b> ROLE_TENANT_MANAGEMENT_ADMIN)
        <b>AND</b> tenant access to login option is not restricted by management tenant)
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: A login option was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/loginOptionNotFound'
  '/tenant/loginOptions/{typeOrId}/restrict':
    put:
      operationId: putAccessLoginOptionResource
      x-codegen-resource-name: updateLoginOptionAccess
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
        - $ref: '#/components/parameters/loginOptionTypeOrId'
        - $ref: '#/components/parameters/queryParam_targetTenant'
      tags:
        - Login options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a tenant's access to the login option
      description: |
        Update the tenant's access to the authentication configuration.

        <section><h5>Required roles</h5>
        ROLE_TENANT_MANAGEMENT_ADMIN <b>AND</b> is the management tenant
        </section>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authConfigAccess'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}/restrict?targetTenant=<TENANT_ID>" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}/restrict?targetTenant=<TENANT_ID>");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}/restrict?targetTenant=<TENANT_ID>")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}/restrict?targetTenant=<TENANT_ID>")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/loginOptions/{typeOrId}/restrict?targetTenant=<TENANT_ID>"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }

            response = requests.request("PUT", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The login option was updated.
          content:
            application/vnd.com.nsn.cumulocity.authconfig+json:
              schema:
                $ref: '#/components/schemas/authConfig'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
        '404':
          $ref: '#/components/responses/tenantNotFound'
  /tenant/oauth:
    post:
      operationId: postLoginFormCookie
      x-codegen-resource-name: obtainAccessCookies
      parameters:
        - $ref: '#/components/parameters/queryParam_tenant_id'
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Login tokens
      security: []
      summary: Obtain access tokens in cookies
      description: |
        Obtain an OAI-Secure and XSRF tokens in cookies.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/loginForm'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/oauth?tenant_id=<TENANT_ID>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "grant_type=PASSWORD" \
            --data-urlencode "username=<USERNAME>" \
            --data-urlencode "password=<PASSWORD>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/oauth?tenant_id=<TENANT_ID>");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Content-Type", "application/x-www-form-urlencoded");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("grant_type", "PASSWORD");
            request.AddParameter("username", "<USERNAME>");
            request.AddParameter("password", "<PASSWORD>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/oauth?tenant_id=<TENANT_ID>")
                .header("Content-Type", "application/x-www-form-urlencoded")
                .header("Accept", "application/json")
                .field("grant_type", "PASSWORD")
                .field("username", "<USERNAME>")
                .field("password", "<PASSWORD>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/oauth?tenant_id=<TENANT_ID>")
                .headers({
                    "Accept": "application/json",
                    "Content-Type": "application/x-www-form-urlencoded"
                })
                .send("grant_type=PASSWORD")
                .send("username=<USERNAME>")
                .send("password=<PASSWORD>")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/oauth?tenant_id=<TENANT_ID>"
            headers = {
              "Accept": "application/json",
              "Content-Type": "application/x-www-form-urlencoded"
            }
            data = "grant_type=PASSWORD&username=<USERNAME>&password=<PASSWORD>"

            response = requests.request("POST", url, headers=headers, data=data)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The tokens are return in cookies.
          headers:
            Set-Cookie:
              schema:
                description: The OAI-Secure access token is returned in a cookie named `authorization`.
                type: string
                minLength: 1
            "\0Set-Cookie":
              schema:
                description: The XSRF token is returned in a cookie name `XSRF-TOKEN`.
                type: string
                minLength: 1
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /tenant/oauth/token:
    post:
      operationId: postLoginFormBody
      x-codegen-resource-name: obtainAccessToken
      parameters:
        - $ref: '#/components/parameters/queryParam_tenant_id'
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Login tokens
      security: []
      summary: Obtain an access token
      description: Obtain an OAI-Secure access token.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/loginForm'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/oauth/token?tenant_id=<TENANT_ID>" \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --header "Accept: application/json" \
            --data-urlencode "grant_type=PASSWORD" \
            --data-urlencode "username=<USERNAME>" \
            --data-urlencode "password=<PASSWORD>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/oauth/token?tenant_id=<TENANT_ID>");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Content-Type", "application/x-www-form-urlencoded");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("grant_type", "PASSWORD");
            request.AddParameter("username", "<USERNAME>");
            request.AddParameter("password", "<PASSWORD>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/oauth/token?tenant_id=<TENANT_ID>")
                .header("Content-Type", "application/x-www-form-urlencoded")
                .header("Accept", "application/json")
                .field("grant_type", "PASSWORD")
                .field("username", "<USERNAME>")
                .field("password", "<PASSWORD>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/oauth/token?tenant_id=<TENANT_ID>")
                .headers({
                    "Accept": "application/json",
                    "Content-Type": "application/x-www-form-urlencoded"
                })
                .send("grant_type=PASSWORD")
                .send("username=<USERNAME>")
                .send("password=<PASSWORD>")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/oauth/token?tenant_id=<TENANT_ID>"
            headers = {
              "Accept": "application/json",
              "Content-Type": "application/x-www-form-urlencoded"
            }
            data = "grant_type=PASSWORD&username=<USERNAME>&password=<PASSWORD>"

            response = requests.request("POST", url, headers=headers, data=data)
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: The OAI-Secure access token is sent in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /tenant/options:
    post:
      operationId: postOptionCollectionResource
      x-codegen-resource-name: createOption
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Create an option
      description: "Create an option on your tenant.\n\nOptions are category-key-value tuples which store tenant configurations. Some categories of options allow the creation of new ones, while others are limited to predefined set of keys.\n\nAny option of any tenant can be defined as \"non-editable\" by the \"management\" tenant; once done, any PUT or DELETE requests made on that option by the tenant owner will result in a 403 error (Unauthorized).\n\n### Default option categories\n\n**access.control**\n\n| Key |\tDefault value |\tPredefined | Description |\n|--|--|--|--|\n| allow.origin | * | Yes | Comma separated list of domains allowed for execution of CORS. Wildcards are allowed (for example, `*.cumulocity.com`) |\n\n**alarm.type.mapping**\n\n| Key  |\tPredefined | Description |\n|--|--|--|\n| &lt;ALARM_TYPE> | No | Overrides the severity and alarm text for the alarm with type &lt;ALARM_TYPE>. The severity and text are specified as `<ALARM_SEVERITY>\\|<ALARM_TEXT>`. If either part is empty, the value will not be overridden. If the severity is NONE, the alarm will be suppressed. Example: `\"CRITICAL\\|temperature too high\"`|\n\n### Encrypted credentials\n\nAdding a \"credentials.\" prefix to the `key` will make the `value` of the option encrypted. When the option is  sent to a microservice, the \"credentials.\" prefix is removed and the `value` is decrypted. For example:\n\n```json\n{\n  \"category\": \"secrets\",\n  \"key\": \"credentials.mykey\",\n  \"value\": \"myvalue\"\n}\n```\n\nIn that particular example, the request will contain an additional header `\"Mykey\": \"myvalue\"`.\n\n<section><h5>Required roles</h5>\nROLE_OPTION_MANAGEMENT_ADMIN\n</section>\n"
      requestBody:
        required: true
        content:
          application/vnd.com.nsn.cumulocity.option+json:
            example:
              category: alarm.type.mapping
              key: temp_too_high
              value: CRITICAL|temperature too high
            schema:
              allOf:
                - $ref: '#/components/schemas/option'
                - required:
                    - category
                    - key
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/tenant/options" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/tenant/options")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/tenant/options")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/options"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers, data = json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: An option was created.
          content:
            application/vnd.com.nsn.cumulocity.option+json:
              schema:
                $ref: '#/components/schemas/option'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '422':
          $ref: '#/components/responses/invalidPayload'
    get:
      operationId: getOptionCollectionResource
      x-codegen-resource-name: getOptions
      parameters:
        - $ref: '#/components/parameters/queryParam_currentPage'
        - $ref: '#/components/parameters/queryParam_pageSize'
        - $ref: '#/components/parameters/queryParam_withTotalPages'
      tags:
        - Options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all options
      description: |
        Retrieve all the options available on the tenant.

        > **⚠️ Important:** Note that Enterprise Tenants are also allowed to read inherited tenant options from the management tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/options"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/options").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/options")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/options")
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/optionCollectionResourceFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/tenant/options/{category}':
    parameters:
      - $ref: '#/components/parameters/optionCategory'
    get:
      operationId: getCategoryOptionResource
      x-codegen-resource-name: getOptionsByCategory
      tags:
        - Options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all options by category
      description: |
        Retrieve all the options (by a specified category) on your tenant.
        > **⚠️ Important:** Note that Enterprise Tenants are also allowed to read inherited tenant options from the management tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/options/{category}"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options/{category}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/options/{category}").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/options/{category}")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/options/{category}")
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/categoryOptionsFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
    put:
      operationId: putCategoryOptionResource
      x-codegen-resource-name: updateOptionsByCategory
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update options by category
      description: |
        Update one or more options (by a specified category) on your tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_ADMIN
        </section>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryOptions'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/options/{category}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options/{category}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/options/{category}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/options/{category}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/options/{category}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: A collection of options was updated.
          content:
            application/vnd.com.nsn.cumulocity.option+json:
              schema:
                $ref: '#/components/schemas/CategoryOptions'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '422':
          $ref: '#/components/responses/invalidPayload'
  '/tenant/options/{category}/{key}':
    parameters:
      - $ref: '#/components/parameters/optionCategory'
      - $ref: '#/components/parameters/optionKey'
    get:
      operationId: getOptionResource
      x-codegen-resource-name: getOption
      tags:
        - Options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific option
      description: |
        Retrieve a specific option (by a given category and key) on your tenant.
        > **⚠️ Important:** Note that Enterprise Tenants are also allowed to read inherited tenant options from the management tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_READ
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/optionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          description: Option not found.
    put:
      operationId: putOptionResource
      x-codegen-resource-name: updateOption
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Update a specific option
      description: |
        Update the value of a specific option (by a given category and key) on your tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_ADMIN <b>AND</b> the option is editable
        </section>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryKeyOption'
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request PUT "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}");
            client.Timeout = -1;

            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddParameter("application/json", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.put("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("PUT", "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("PUT", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      responses:
        '200':
          description: An option was updated.
          content:
            application/vnd.com.nsn.cumulocity.option+json:
              schema:
                $ref: '#/components/schemas/option'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          description: Option not found.
        '422':
          $ref: '#/components/responses/invalidPayload'
    delete:
      operationId: deleteOptionResource
      x-codegen-resource-name: deleteOption
      tags:
        - Options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Remove a specific option
      description: |
        Remove a specific option (by a given category and key) on your tenant.

        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request DELETE "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}" \
            --header "Authorization: Basic <AUTHORIZATION>"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}");
            client.Timeout = -1;

            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.delete("https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
                .header("Authorization", "Basic <AUTHORIZATION>").asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("DELETE", "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            url = "https://<TENANT_DOMAIN>/tenant/options/{category}/{key}"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>"
            }
            response = requests.request("DELETE", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '204':
          description: An option was removed.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          description: Option not found.
  /tenant/system/options:
    get:
      operationId: getSystemOptionCollectionResource
      x-codegen-resource-name: getSystemOptions
      tags:
        - System options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve all system options
      description: |
        Retrieve all the system options available on the tenant.

        > **⚠️ Important:** Note that it is possible to call this endpoint without the ROLE_OPTION_MANAGEMENT_ADMIN role, but options that are considered secured (see the list of options above) will be obfuscated with a constant value `"<<Encrypted>>"`.
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/system/options"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/system/options");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/system/options").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/system/options")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/system/options")
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/systemOptionCollectionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  '/tenant/system/options/{category}/{key}':
    parameters:
      - $ref: '#/components/parameters/systemOptionCategory'
      - $ref: '#/components/parameters/systemOptionKey'
    get:
      operationId: getSystemOptionResource
      x-codegen-resource-name: getSystemOption
      tags:
        - System options
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
      summary: Retrieve a specific system option
      description: |
        Retrieve a specific system option (by a given category and key) on your tenant.

        > **⚠️ Important:** Note that it is possible to call this endpoint without the ROLE_OPTION_MANAGEMENT_ADMIN role, but only the options that are considered not secured (see the list of options above) will be returned. Otherwise, if the option is considered secured and the user does not have the required role, an HTTP response 403 will be returned.
        <section><h5>Required roles</h5>
        ROLE_OPTION_MANAGEMENT_ADMIN
        </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request GET "https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}"
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}");
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.get("https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}").asString();
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("GET", "https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}")
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests

            response = requests.request("GET", "https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}")
            print(response.text.encode("utf8"))
      responses:
        '200':
          $ref: '#/components/responses/systemOptionFound'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/operationNotAuthorized'
  /certificate-authority:
    post:
      operationId: postCertificateAuthorityResource
      x-codegen-resource-name: createCertificateAuthority
      parameters:
        - $ref: '#/components/parameters/acceptHeader'
      tags:
        - Certificate authority
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Create Certificate Authority(CA) for a tenant with CN as tenantID
      description: |
        Create a key pair and self-sign a certificate with <tenantID> as the Common Name (CN).
        Store the private key in an encrypted tenant option.
        Store the certificate in the trusted certificate repository with auto-registration unchecked by default. The devices can be registered automatically only when device administrator checks this option ON.
        If the CA certificate is removed from the trusted certificate list, corresponding public and private key removed automatically from the database collection.
        If a CA is already present, return a message indicating the CA is already present.

        > **⚠️ Important:** Note that it is possible to call this endpoint without the ROLE_TENANT_MANAGEMENT_ADMIN or ROLE_TENANT_MANAGEMENT_READ role, but only when user is a service user. Otherwise, if the the user does not have the required role, an HTTP response 403 will be returned.
                <section><h5>Required roles</h5>
                ROLE_TENANT_MANAGEMENT_ADMIN
                ROLE_TENANT_MANAGEMENT_READ
                </section>
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/certificate-authority" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/certificate-authority");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/certificate-authority")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/certificate-authority")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                })
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/certificate-authority"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Accept": "application/json",
              "Content-Type": "application/json"
            }
            response = requests.request("POST", url, headers=headers)
            print(response.text.encode("utf8"))
      responses:
        '201':
          description: The tenant's CA certificate was added to the tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedCertificate'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
        '404':
          $ref: '#/components/responses/tenantNotFound'
        '409':
          description: Duplicate – Tenant CA is already exists.
        '422':
          description: Unprocessable Entity – Invalid key pair configuration.
  /.well_known/est/simpleenroll:
    post:
      operationId: postSimpleReEnrollDeviceResource
      x-codegen-resource-name: simpleEnrollDevice
      tags:
        - Device enrollment
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Create Device certificate which is signed by tenant's Certificate Authority(CA)
      description: |
        Enable bulk device registration to the enrollment list through the existing [New-device-requests](#tag/New-device-requests) endpoint.
        To support the new enrollment process, each device record must specify both a secret and a certificate as the authentication type.
        These EST devices will be added to the NewDeviceRegistration list with a status of Accepted. 
        The ID and CREDENTIALS fields will be mapped to deviceId and security token, respectively, in the NewDeviceRegistrationData model, serving as temporary device credentials for authentication.
      x-code-samples:
        - lang: cURL
          source: |
            curl --location --request POST "https://<TENANT_DOMAIN>/.well-known/est/simplereenroll" \
            --header "Authorization: Basic <AUTHORIZATION>" \
            --header "Content-Transfer-Encoding: base64" \
            --header "Content-Type: application/pkcs10" \
            --data-raw '<Payload>'
        - lang: C#
          source: |
            var client = new RestClient("https://<TENANT_DOMAIN>/.well-known/est/simplereenroll");
            client.Timeout = -1;

            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic <AUTHORIZATION>");
            request.AddHeader("Content-Transfer-Encoding", "base64");
            request.AddParameter("application/pkcs10", "<Payload>",  ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
        - lang: Java
          source: |
            Unirest.setTimeouts(0, 0);
            HttpResponse<String> response = Unirest.post("https://<TENANT_DOMAIN>/.well-known/est/simplereenroll")
                .header("Authorization", "Basic <AUTHORIZATION>")
                .header("Content-Type", "application/pkcs10")
                .header("Content-Transfer-Encoding", "base64")
                .body("<Payload>")
                .asString();
            System.out.println(response);
        - lang: Node.js
          source: |
            var unirest = require("unirest");
            var req = unirest("POST", "https://<TENANT_DOMAIN>/.well-known/est/simplereenroll")
                .headers({
                    "Authorization": "Basic <AUTHORIZATION>",
                    "Content-Type": "application/pkcs10",
                    "Content-Transfer-Encoding": "base64"
                })
                .send(JSON.stringify( <Payload> ))
                .end(function (res) {
                    if (res.error) throw new Error(res.error);
                    console.log(res.raw_body);
                });
        - lang: Python
          source: |
            import requests
            import json

            url = "https://<TENANT_DOMAIN>/.well-known/est/simplereenroll"
            headers = {
              "Authorization": "Basic <AUTHORIZATION>",
              "Content-Transfer-Encoding": "base64",
              "Content-Type": "application/pkcs10"
            }
            response = requests.request("POST", url, headers=headers, json.dumps(<Payload>))
            print(response.text.encode("utf8"))
      requestBody:
        required: true
        content:
          application/pkcs10:
            schema:
              type: string
              format: binary
              example: MIICVjCCAT4CAQAwETEPMA0GA1UEAwwGSWRfMTA0MIIBIjANBgkqhkiG9w0BAQEF AAOCAQ8AMIIBCgKCAQEAtz41ucrtb28Hk4FDkGK19DRHD6Z3oyZ6CtS1xycWkf9h za+6DI6ugBLRsxgRQi+VcBSQ8BRgPQTj3eEKi6s+7ySLpzuA4HlihPWo7dWhioXM 3lZ4jiyPlCAZALYHNWbgk6Pehk6eNKMz8998Kq2GnzUQ65grAjjr4Q+HQJGOUYx/ gsEQoCdhKRjG0xcI75OE+CW9Wg/VU4RMboMke5LUNHwnHIDy8Ie2C3VozVS6mRgE 1VIBXWDm9fjaGEzYf25yWk0fzo/d/osLxReJgBq3FOz1TM4m9c3CtJUiedVXmeuf OPwNlTjGDOWgQfeMmXaPC0jHp0YNfV+txdWwEPev6QIDAQABoAAwDQYJKoZIhvcN AQELBQADggEBAHIZu0WR6hfiIsPxhBrdo5w0bt/2X6gy+tHdTI017rf1FUww6OLs wKtpPC0km4BS20hxbD9NLb3FNQEUCf80YQFSGbi0ziY0okVN7gaes6XiNofZbYx9 TQF0oo+QWTa+otjoXpw8lLY9Ak6T9MppYh2GlRIiio2VzFu4Vg+FEoyNw9jvQwLj LP0eYTIQ/2SX1DnxMBzCm4MzieXJ7DJPHAdqADUfKbFNuaVjdxG9uRZdP3LRL90g 6YxfFb8c+RcOL/lAKdSP5/rIUI05z0agzGMajsEnqxRXSk+CwlZo2D02++STStY9 pELozQsItNjEVrfWta6353kOguYYqjB1rNY=
      responses:
        '201':
          description: A device certificate was created.
          content:
            application/pkcs7-mime;smime-type=certs-only:
              schema:
                type: string
                example: '-----BEGIN CERTIFICATE----- MIIEGjCCAwKgAwIBAgIEEgEgJDANBgkqhkiG9w0BAQsFADBSMQswCQYDVQQGEwJF VTELMAkGA1UECAwCUEwxGzAZBgNVBAoMEklvdCBEZXZpY2UgRmFjdG9yeTEZMBcG A1UEAwwQSW90RGV2RmFjdG9yeUludDAeFw0yNDA5MDIxMjA1MDlaFw0yNTA5MTIx MjA1MDlaME8xCzAJBgNVBAYTAkVVMQswCQYDVQQIDAJQTDEbMBkGA1UECgwSSW90 IERldmljZSBGYWN0b3J5MRYwFAYDVQQDDA1Jb3REZXZpY2UyMDAwMIIBIjANBgkq hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAumzj99zMfC9wyTHun3dEIsL/wk3VyWTw dtgdFx/lt5uPfvTAJ62GLWzYsCe2Q54G13IG/S1SJTfsNURlvUrPvXed97/yhe/o g0IjLz5VGNfsNUw+51KI7Tcc1SunHvUKD7TtgZ4rVga5q1DFxmzZ/dFXJpG5VAgu pwojACMv+T6qKGlUsF5F/1coOVrUo26aby4mg7C6ZsbwzXj2PbIvNXHCcrBrUU7S L2EI89RTgFZCVnZtW1SozDBn8S+WafKFBSgD0GwNtAkkffNWji1fW645gDc80u7w bQuA/xtPXK6+giGB8jN3daVjp6pzbzrYzDTYoC2vyL2A4F4zUedBhwIDAQABo4H6 MIH3MAkGA1UdEwQCMAAwEQYJYIZIAYb4QgEBBAQDAgWgMDMGCWCGSAGG+EIBDQQm FiRPcGVuU1NMIEdlbmVyYXRlZCBDbGllbnQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE FONhE6IdItEwn95lmf7uKjVLYpJ1MB8GA1UdIwQYMBaAFFSopCQWaJLzT3DYQi8n +nA1S86RMA4GA1UdDwEB/wQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYB BQUHAwEwMwYDVR0fBCwwKjAooCagJIYiaHR0cDovL2xvY2FsaG9zdDoxNTAwMC9v bmxpbmUtY3JsczANBgkqhkiG9w0BAQsFAAOCAQEAJmPPKVSR4nAf8TZG3dPeGRX4 V6a8mT52HKQYTilicq0cwec1zSyjayX6lsvqbENkA/L8fN64fpOSmb/+HUbSWP7Y F3ZYKalZVS9XlDUz6TWSA1LiWiDx1E28W2ubCOzUBRg7ux+59hoSGldtGrpxZ1Ox +H9kemart76xC+l85EYys7YARL5vk5Jwyr/f1/FpXasaGBFbC4aJ+2fNJkn1LJal II8Fl3GElheLpYM20VNw2J0PoD8I17htLfT+j7IwPyJ+uZcNxl60GiqDoBafRWuq oTL1SYqewv/dTU98aZUXG9yFLPgldQ2YfMli6vOC2gcjW2vun+IP7T/5ZU/xtA== -----END CERTIFICATE-----'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
  /.well_known/est/simplereenroll:
    post:
      operationId: postSimpleReEnrollDeviceResource
      x-codegen-resource-name: simpleReEnrollDevice
      tags:
        - Device enrollment
      security:
        - Basic: []
        - OAI-Secure: []
        - SSO: []
        - JWT-IAM: []
      summary: Re-Issue certificates to Devices which is signed by tenant's Certificate Authority(CA)
      description: |
        Enable bulk device registration to the enrollment list through the existing `/devicecontrol/newDeviceRequests` endpoint.
        To support the new enrollment process, each device record must specify both a secret and a certificate as the authentication type.
        These EST devices will be added to the NewDeviceRegistration list with a status of Accepted. 
        The ID and CREDENTIALS fields will be mapped to deviceId and security token, respectively, in the NewDeviceRegistrationData model, serving as temporary device credentials for authentication.
      x-code-samples:
        $ref: '#/paths/~1.well_known~1est~1simpleenroll/post/x-code-samples'
      requestBody:
        required: true
        content:
          application/pkcs10:
            schema:
              type: string
              format: binary
              example: MIICVjCCAT4CAQAwETEPMA0GA1UEAwwGSWRfMTA0MIIBIjANBgkqhkiG9w0BAQEF AAOCAQ8AMIIBCgKCAQEAtz41ucrtb28Hk4FDkGK19DRHD6Z3oyZ6CtS1xycWkf9h za+6DI6ugBLRsxgRQi+VcBSQ8BRgPQTj3eEKi6s+7ySLpzuA4HlihPWo7dWhioXM 3lZ4jiyPlCAZALYHNWbgk6Pehk6eNKMz8998Kq2GnzUQ65grAjjr4Q+HQJGOUYx/ gsEQoCdhKRjG0xcI75OE+CW9Wg/VU4RMboMke5LUNHwnHIDy8Ie2C3VozVS6mRgE 1VIBXWDm9fjaGEzYf25yWk0fzo/d/osLxReJgBq3FOz1TM4m9c3CtJUiedVXmeuf OPwNlTjGDOWgQfeMmXaPC0jHp0YNfV+txdWwEPev6QIDAQABoAAwDQYJKoZIhvcN AQELBQADggEBAHIZu0WR6hfiIsPxhBrdo5w0bt/2X6gy+tHdTI017rf1FUww6OLs wKtpPC0km4BS20hxbD9NLb3FNQEUCf80YQFSGbi0ziY0okVN7gaes6XiNofZbYx9 TQF0oo+QWTa+otjoXpw8lLY9Ak6T9MppYh2GlRIiio2VzFu4Vg+FEoyNw9jvQwLj LP0eYTIQ/2SX1DnxMBzCm4MzieXJ7DJPHAdqADUfKbFNuaVjdxG9uRZdP3LRL90g 6YxfFb8c+RcOL/lAKdSP5/rIUI05z0agzGMajsEnqxRXSk+CwlZo2D02++STStY9 pELozQsItNjEVrfWta6353kOguYYqjB1rNY=
      responses:
        '201':
          description: A device certificate was created.
          content:
            application/pkcs7-mime;smime-type=certs-only:
              schema:
                type: string
                format: binary
                example: '-----BEGIN CERTIFICATE----- MIIEGjCCAwKgAwIBAgIEEgEgJDANBgkqhkiG9w0BAQsFADBSMQswCQYDVQQGEwJF VTELMAkGA1UECAwCUEwxGzAZBgNVBAoMEklvdCBEZXZpY2UgRmFjdG9yeTEZMBcG A1UEAwwQSW90RGV2RmFjdG9yeUludDAeFw0yNDA5MDIxMjA1MDlaFw0yNTA5MTIx MjA1MDlaME8xCzAJBgNVBAYTAkVVMQswCQYDVQQIDAJQTDEbMBkGA1UECgwSSW90 IERldmljZSBGYWN0b3J5MRYwFAYDVQQDDA1Jb3REZXZpY2UyMDAwMIIBIjANBgkq hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAumzj99zMfC9wyTHun3dEIsL/wk3VyWTw dtgdFx/lt5uPfvTAJ62GLWzYsCe2Q54G13IG/S1SJTfsNURlvUrPvXed97/yhe/o g0IjLz5VGNfsNUw+51KI7Tcc1SunHvUKD7TtgZ4rVga5q1DFxmzZ/dFXJpG5VAgu pwojACMv+T6qKGlUsF5F/1coOVrUo26aby4mg7C6ZsbwzXj2PbIvNXHCcrBrUU7S L2EI89RTgFZCVnZtW1SozDBn8S+WafKFBSgD0GwNtAkkffNWji1fW645gDc80u7w bQuA/xtPXK6+giGB8jN3daVjp6pzbzrYzDTYoC2vyL2A4F4zUedBhwIDAQABo4H6 MIH3MAkGA1UdEwQCMAAwEQYJYIZIAYb4QgEBBAQDAgWgMDMGCWCGSAGG+EIBDQQm FiRPcGVuU1NMIEdlbmVyYXRlZCBDbGllbnQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE FONhE6IdItEwn95lmf7uKjVLYpJ1MB8GA1UdIwQYMBaAFFSopCQWaJLzT3DYQi8n +nA1S86RMA4GA1UdDwEB/wQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYB BQUHAwEwMwYDVR0fBCwwKjAooCagJIYiaHR0cDovL2xvY2FsaG9zdDoxNTAwMC9v bmxpbmUtY3JsczANBgkqhkiG9w0BAQsFAAOCAQEAJmPPKVSR4nAf8TZG3dPeGRX4 V6a8mT52HKQYTilicq0cwec1zSyjayX6lsvqbENkA/L8fN64fpOSmb/+HUbSWP7Y F3ZYKalZVS9XlDUz6TWSA1LiWiDx1E28W2ubCOzUBRg7ux+59hoSGldtGrpxZ1Ox +H9kemart76xC+l85EYys7YARL5vk5Jwyr/f1/FpXasaGBFbC4aJ+2fNJkn1LJal II8Fl3GElheLpYM20VNw2J0PoD8I17htLfT+j7IwPyJ+uZcNxl60GiqDoBafRWuq oTL1SYqewv/dTU98aZUXG9yFLPgldQ2YfMli6vOC2gcjW2vun+IP7T/5ZU/xtA== -----END CERTIFICATE-----'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/accessDenied'
components:
  parameters:
    acceptHeader:
      name: Accept
      in: header
      description: 'Advertises which content types, expressed as MIME types, the client is able to understand.'
      required: false
      schema:
        type: string
        minLength: 1
        example: application/json
    applicationVersionAcceptHeader:
      name: Accept
      in: header
      description: The header is required to access this endpoint.
      required: true
      schema:
        type: string
        enum:
          - application/vnd.com.nsn.cumulocity.applicationVersion+json
        example: application/vnd.com.nsn.cumulocity.applicationVersion+json
    authorizationCookieHeader:
      name: Cookie
      in: header
      description: The authorization cookie storing the access token of the user. This parameter is specific to OAI-Secure authentication.
      required: false
      schema:
        type: string
        example: authorization=<ACCESS_TOKEN>
    xsrfTokenHeader:
      name: X-XSRF-TOKEN
      in: header
      description: Prevents XRSF attack of the authenticated user. This parameter is specific to OAI-Secure authentication.
      required: false
      schema:
        type: string
        example: <X-XSRF-TOKEN>
    processingModeHeader:
      name: X-Cumulocity-Processing-Mode
      in: header
      description: 'Used to explicitly control the processing mode of the request. See [Processing mode](#processing-mode) for more details.'
      required: false
      schema:
        type: string
        default: PERSISTENT
        enum:
          - PERSISTENT
          - TRANSIENT
          - QUIESCENT
          - CEP
        example: PERSISTENT
    certChainInHeader:
      name: X-Cumulocity-Client-Cert-Chain
      in: header
      description: 'Used to send a certificate chain in the header. Separate the chain with `,` and also each 64 bit block with ` ` (a space character).'
      required: true
      schema:
        type: string
        example: '-----BEGIN CERTIFICATE----- MIIDTzCCAjegAwIBAgIUB1a5GM9ubBpN5tyU7YO8D3C8zUUwDQYJKoZIhvcNAQEL BQAwUjELMAkGA1UEBhMCRVUxCzAJBgNVBAgMAlBMMRswGQYDVQQKDBJJb3QgRGV2 aWNlIEZhY3RvcnkxGTAXBgNVBAMMEElvdERldkZhY3RvcnlDQTQwHhcNMjMwMTMx MDMzMTEyWhcNMzMwMTI4MDMzMTEyWjBSMQswCQYDVQQGEwJFVTELMAkGA1UECAwC UEwxGzAZBgNVBAoMEklvdCBEZXZpY2UgRmFjdG9yeTEZMBcGA1UEAwwQSW90RGV2 RmFjdG9yeUNBNDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANeyb0T9 2Ac4G83GGO+vNiieyItY1Tf0Rm1tJPIevDnSg+leplLIEUeE0y7UNAJDMxEEJx6V cFzG2yK4yPJibMw2AAo4Wy9U4Ie4F7kLmgUnh8prxcX19AKhHujZCEjhgmk3MCEc FbSjgSWNaXX6vO5JPj8aMtMKFUIsah9VH8G+HnfPuH4LF0MQFKU+K3bZRrsAUD7a oWGaUGGiLOQgUdURfPj3AJc4gAT+t9f/CX7OrOg+A9RpVVswkYfrCz6hhEJb/jDj 9XO+OdphmXLvjjYsRbEmUZAXJ0M6Iv1WZW9vV7Nd5H4L89wQKRYqFFhAwnLp7Dh2 f85VbHZT7+UmUacCAwEAAaMdMBswDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAuQw DQYJKoZIhvcNAQELBQADggEBAKoSCWwoUIIr5HjQQOThQFgnxcKJX9nwSkZbQOMf 9G7XV5SQTUJTxTAE5sntVoLGtIdA8F7ytbW1Gv1CFlZpu0hRoj92JTS8rCVD4X7f hCbXometLrSPV63BRB2NEmmtOBPXNsENdujhkK0ouXodSJc2xE6VTeaH5ng0jceD riy8qB5wN+AfEyoz36QJaHIt77Stp2ZQU0gK44B+uuSEPCUJfQVEBwkGhYB4Ut2+ s++cqJ7gRXV08Zt5J7q6kTcnmhsm0oJelQDLIJh+hEBzdjCdtKfYslRvFq3I85Y0 zngrsOfyKr8YYlDRy6RiAR2HQode00Hs4WoakfuTpaISZIs= -----END CERTIFICATE-----,-----BEGIN CERTIFICATE-----  ..  -----END CERTIFICATE-----,-----BEGIN CERTIFICATE-----  ..  -----END CERTIFICATE-----'
    tenantIdInHeader:
      name: X-Cumulocity-TenantId
      in: header
      description: Used to send a tenant ID.
      schema:
        type: string
        example: t07007007
    alarmId:
      name: id
      in: path
      description: Unique identifier of the alarm.
      required: true
      schema:
        type: string
        minLength: 1
        example: '20200301'
    applicationId:
      name: id
      in: path
      description: Unique identifier of the application.
      required: true
      schema:
        type: string
        minLength: 1
        example: '20200301'
    applicationVersion:
      name: version
      in: path
      description: Version of the application.
      required: true
      schema:
        type: string
        minLength: 1
        example: '1.0'
    applicationName:
      name: name
      in: path
      description: The name of the application.
      required: true
      schema:
        type: string
        minLength: 1
        example: my-application
    auditId:
      name: id
      in: path
      description: Unique identifier of the audit record.
      required: true
      schema:
        type: string
        minLength: 1
        example: '100423189'
    binaryId:
      name: binaryId
      in: path
      description: Unique identifier of the binary.
      required: true
      schema:
        type: string
        minLength: 1
        example: '30303033'
    bulkOperationId:
      name: id
      in: path
      description: Unique identifier of the bulk operation.
      required: true
      schema:
        type: integer
        minLength: 1
        example: 1237
    eventId:
      name: id
      in: path
      description: Unique identifier of the event.
      required: true
      schema:
        type: string
        minLength: 1
        example: '20200301'
    groupId:
      name: groupId
      in: path
      description: Unique identifier of the user group.
      required: true
      schema:
        type: integer
        example: 2
    groupName:
      name: groupName
      in: path
      description: The name of the user group.
      required: true
      schema:
        type: string
        example: admins
    identityType:
      name: type
      in: path
      description: The identifier used in the external system that Cumulocity interfaces with.
      required: true
      schema:
        type: string
        minLength: 1
        example: c8y_Serial
    identityExternalId:
      name: externalId
      in: path
      description: The type of the external identifier.
      required: true
      schema:
        type: string
        minLength: 1
        example: simulator_145074_1
    inventoryAssignmentId:
      name: id
      in: path
      description: Unique identifier of the inventory assignment.
      required: true
      schema:
        type: integer
        example: 1
    inventoryRoleId:
      name: id
      in: path
      description: Unique identifier of the inventory role.
      required: true
      schema:
        type: integer
        example: 4
    measurementId:
      name: id
      in: path
      description: Unique identifier of the measurement.
      required: true
      schema:
        type: string
        minLength: 1
        example: '102700509'
    retentionRuleId:
      name: id
      in: path
      description: Unique identifier of the retention rule.
      required: true
      schema:
        type: string
        minLength: 1
        example: '1569'
    managedObjectId:
      name: id
      in: path
      description: Unique identifier of the managed object.
      required: true
      schema:
        type: string
        minLength: 1
        example: '251982'
    managedObjectChildId:
      name: childId
      in: path
      description: Unique identifier of the child object.
      required: true
      schema:
        type: string
        minLength: 1
        example: '72022'
    newDeviceRequestId:
      name: requestId
      in: path
      description: Unique identifier of the new device request.
      required: true
      schema:
        type: string
        minLength: 1
        example: '54545454'
    notificationSubscriptionId:
      name: id
      in: path
      description: Unique identifier of the notification subscription.
      required: true
      schema:
        type: string
        minLength: 1
        example: '102700509'
    operationId:
      name: id
      in: path
      description: Unique identifier of the operation.
      required: true
      schema:
        type: string
        minLength: 1
        example: '123'
    roleId:
      name: roleId
      in: path
      description: Unique identifier of the user role.
      required: true
      schema:
        type: string
        minLength: 1
        example: ROLE_ALARM_ADMIN
    roleName:
      name: name
      in: path
      description: The name of the user role.
      required: true
      schema:
        type: string
        minLength: 1
        example: ROLE_ALARM_ADMIN
    tenantId:
      name: tenantId
      in: path
      description: Unique identifier of a Cumulocity tenant.
      required: true
      schema:
        type: string
        minLength: 1
        example: t07007007
    monthlyDate:
      name: date
      in: path
      description: Date (format YYYY-MM-dd) of the queried month (the day value is ignored).
      required: true
      schema:
        type: string
        format: date
        minLength: 10
        maxLength: 10
        example: '2021-01-01'
    dailyDate:
      name: date
      in: path
      description: Date (format YYYY-MM-dd) of the queried day.
      required: true
      schema:
        type: string
        format: date
        minLength: 10
        maxLength: 10
        example: '2021-01-01'
    tenantApplicationId:
      name: applicationId
      in: path
      description: Unique identifier of the application.
      required: true
      schema:
        type: string
        minLength: 1
        example: '20200301'
    userId:
      name: userId
      in: path
      description: Unique identifier of the a user.
      required: true
      schema:
        type: string
        minLength: 1
        example: jdoe
    username:
      name: username
      in: path
      description: The username of the a user.
      required: true
      schema:
        type: string
        minLength: 1
        example: jdoe
    fileId:
      name: id
      in: path
      description: Unique identifier of the statistics file.
      required: true
      schema:
        type: string
        minLength: 1
        example: '30303033'
    statisticsFileMonth:
      name: month
      in: path
      description: Date (format YYYY-MM-dd) specifying the month for which the statistics file will be downloaded (the day value is ignored).
      required: true
      schema:
        type: string
        format: date
        minLength: 10
        maxLength: 10
        example: '2020-03-01'
    optionCategory:
      name: category
      in: path
      description: The category of the options.
      required: true
      schema:
        type: string
        minLength: 1
        example: alarm.type.mapping
    optionKey:
      name: key
      in: path
      description: The key of an option.
      required: true
      schema:
        type: string
        minLength: 1
        example: temp_too_high
    systemOptionCategory:
      name: category
      in: path
      description: The category of the system options.
      required: true
      schema:
        type: string
        minLength: 1
        example: password
    systemOptionKey:
      name: key
      in: path
      description: The key of a system option.
      required: true
      schema:
        type: string
        minLength: 1
        example: enforce.strength
    fingerprint:
      name: fingerprint
      in: path
      description: Unique identifier of a trusted certificate.
      required: true
      schema:
        type: string
        minLength: 1
        example: df9c19e0433c6861fak899078b76fe56a3e7dd14
    loginOptionTypeOrId:
      name: typeOrId
      in: path
      description: 'The type or ID of the login option. The type''s value is case insensitive and can be `OAUTH2`, `OAUTH2_INTERNAL` or `BASIC`.'
      required: true
      schema:
        type: string
        minLength: 1
        example: OAUTH2
    featureKey:
      name: featureKey
      description: A unique key of the feature toggle.
      required: true
      in: path
      schema:
        type: string
        minLength: 1
    queryParam_currentPage:
      name: currentPage
      in: query
      description: The current page of the paginated results.
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 3
    queryParam_fragmentType:
      name: fragmentType
      in: query
      description: 'A characteristic which identifies a managed object or event, for example, geolocation, electricity sensor, relay state.'
      schema:
        type: string
        minLength: 1
        example: c8y_IsDevice
    queryParam_fragmentValue:
      name: fragmentValue
      in: query
      description: |
        Allows filtering events by the fragment's value, but only when provided together with `fragmentType`.

        > **⚠️ Important:** Only fragments with a string value are supported.
      schema:
        type: string
        minLength: 1
        example: lorem
    queryParam_pageSize:
      name: pageSize
      in: query
      description: 'Indicates how many entries of the collection shall be returned. The upper limit for one page is 2,000 objects.'
      schema:
        type: integer
        minimum: 1
        maximum: 2000
        default: 5
        example: 10
    queryParam_skipChildrenNames:
      name: skipChildrenNames
      in: query
      description: 'When set to `true`, the returned references of child devices won''t contain their names.'
      schema:
        type: boolean
        default: false
        example: true
    queryParam_query:
      name: query
      in: query
      description: 'Use query language to perform operations and/or filter the results. Details about the properties and supported operations can be found in [Query language](#tag/Query-language).'
      schema:
        type: string
        minLength: 1
        example: $filter=(owner+eq+'manga')
    queryParam_withParents:
      name: withParents
      in: query
      description: 'When set to `true`, the returned references of child parents will return the device''s parents (if any). Otherwise, it will be an empty array.'
      schema:
        type: boolean
        default: false
        example: true
    queryParam_withTotalPages:
      name: withTotalPages
      in: query
      description: |
        When set to `true`, the returned result will contain in the statistics object the total number of pages. Only applicable on [range queries](https://en.wikipedia.org/wiki/Range_query_(database)).
        > **&#9432; Info:** To improve performance, the `totalPages` statistics are cached for 10 seconds.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_withTotalElements:
      name: withTotalElements
      in: query
      description: |
        When set to `true`, the returned result will contain in the statistics object the total number of elements. Only applicable on [range queries](https://en.wikipedia.org/wiki/Range_query_(database)).
        > **&#9432; Info:** To improve performance, the `totalElements` statistics are cached for 10 seconds.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_hasVersions:
      name: hasVersions
      in: query
      description: 'When set to `true`, the returned result contains applications with an `applicationVersions` field that is not empty. When set to `false`, the result will contain applications with an empty `applicationVersions` field.'
      schema:
        type: boolean
        default: null
        example: true
    queryParam_inventory_ids:
      name: ids
      in: query
      description: |
        The managed object IDs to search for.
        >**&#9432; Info:** If you query for multiple IDs at once, comma-separate the values.
      schema:
        type: array
        items:
          type: string
          minLength: 1
        example:
          - '200'
          - '300'
      style: form
      explode: false
    queryParam_inventory_childAssetId:
      name: childAssetId
      in: query
      description: Search for a specific child asset and list all the groups to which it belongs.
      schema:
        type: string
        minLength: 1
        example: '200'
    queryParam_inventory_childDeviceId:
      name: childDeviceId
      in: query
      description: Search for a specific child device and list all the groups to which it belongs.
      schema:
        type: string
        minLength: 1
        example: '2001'
    queryParam_inventory_childAdditionId:
      name: childAdditionId
      in: query
      description: Search for a specific child addition and list all the groups to which it belongs.
      schema:
        type: string
        minLength: 1
        example: '3003'
    queryParam_inventory_type:
      name: type
      in: query
      description: The type of managed object to search for.
      schema:
        type: string
        minLength: 1
        example: c8y_DeviceGroup
    queryParam_inventory_owner:
      name: owner
      in: query
      description: Username of the owner of the managed objects.
      schema:
        type: string
        minLength: 1
        example: manga
    queryParam_inventory_textPrefix:
      name: text
      in: query
      description: |
        Search for managed objects where a property value is equal to the given one.
        The following properties are examined: `id, type, name, owner, externalIds`.
      schema:
        type: string
        minLength: 1
        example: my_value
    queryParam_inventory_withGroups:
      name: withGroups
      in: query
      description: When set to `true` it returns additional information about the groups to which the searched managed object belongs. This results in setting the `assetParents` property with additional information about the groups.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_inventory_withChildren:
      name: withChildren
      in: query
      description: Determines if children with ID and name should be returned when fetching the managed object. Set it to `false` to improve query performance.
      schema:
        type: boolean
        default: true
        example: false
    queryParam_inventory_withChildrenCount:
      name: withChildrenCount
      in: query
      description: 'When set to `true`, the returned result will contain the total number of children in the respective objects (`childAdditions`, `childAssets` and `childDevices`).'
      schema:
        type: boolean
        default: false
        example: true
    queryParam_inventory_deviceQuery:
      name: q
      in: query
      description: 'Similar to the parameter `query`, but it assumes that this is a device query request and it adds automatically the search criteria `fragmentType=c8y_IsDevice`.'
      schema:
        type: string
        minLength: 1
        example: $filter=(owner+eq+'manga')
    queryParam_inventory_onlyRoots:
      name: onlyRoots
      in: query
      description: 'When set to `true` it returns managed objects which don''t have any parent. If the current user doesn''t have access to the parent, this is also root for the user.'
      schema:
        type: boolean
        default: false
        example: true
    queryParam_inventory_cascade:
      name: cascade
      in: query
      description: 'When set to `true` and the managed object is a device or group, all the hierarchy will be deleted.'
      schema:
        type: boolean
        default: false
        example: true
    queryParam_inventory_forceCascade:
      name: forceCascade
      in: query
      description: When set to `true` all the hierarchy will be deleted without checking the type of managed object. It takes precedence over the parameter `cascade`.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_inventory_withDeviceUser:
      name: withDeviceUser
      in: query
      description: 'When set to `true` and the managed object is a device, it deletes the associated device user (credentials).'
      schema:
        type: boolean
        default: false
        example: true
    queryParam_alarm_type:
      name: type
      in: query
      description: |
        The types of alarm to search for.
        >**&#9432; Info:** If you query for multiple alarm types at once, comma-separate the values. Space characters in alarm types must be escaped.
      schema:
        type: array
        items:
          type: string
          minLength: 1
        example:
          - c8y_UnavailabilityAlarm
          - c8y_TemperatureAlarm
      explode: false
    queryParam_alarm_source:
      name: source
      in: query
      description: The managed object ID to which the alarm is associated.
      schema:
        type: string
        minLength: 1
        example: '251994'
    queryParam_alarm_resolved:
      name: resolved
      in: query
      description: 'When set to `true` only alarms with status CLEARED will be fetched, whereas `false` will fetch all alarms with status ACTIVE or ACKNOWLEDGED. Takes precedence over the `status` parameter.'
      schema:
        type: boolean
        default: false
        example: true
    queryParam_alarm_withSourceAssets:
      name: withSourceAssets
      in: query
      description: When set to `true` also alarms for related source assets will be included in the request. When this parameter is provided a `source` must be specified.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_alarm_withSourceDevices:
      name: withSourceDevices
      in: query
      description: When set to `true` also alarms for related source devices will be included in the request. When this parameter is provided a `source` must be specified.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_alarm_severity:
      name: severity
      in: query
      description: |
        The severity of the alarm to search for.
        >**&#9432; Info:** If you query for multiple alarm severities at once, comma-separate the values.
      schema:
        type: array
        items:
          type: string
          minLength: 1
        enum:
          - CRITICAL
          - MAJOR
          - MINOR
          - WARNING
        example:
          - CRITICAL
          - MAJOR
      explode: false
    queryParam_alarm_status:
      name: status
      in: query
      description: |
        The status of the alarm to search for. Should not be used when `resolved` parameter is provided.
        >**&#9432; Info:** If you query for multiple alarm statuses at once, comma-separate the values.
      schema:
        type: array
        items:
          type: string
          minLength: 1
        enum:
          - ACTIVE
          - ACKNOWLEDGED
          - CLEARED
        example:
          - ACTIVE
          - ACKNOWLEDGED
      explode: false
    queryParam_alarm_dateFrom:
      name: dateFrom
      in: query
      description: Start date or date and time of the alarm occurrence.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-01'
    queryParam_alarm_dateTo:
      name: dateTo
      in: query
      description: End date or date and time of the alarm occurrence.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-30'
    queryParam_alarm_createdFrom:
      name: createdFrom
      in: query
      description: Start date or date and time of the alarm creation.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2021-03-01'
    queryParam_alarm_createdTo:
      name: createdTo
      in: query
      description: End date or date and time of the alarm creation.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2021-03-30'
    queryParam_application_type:
      name: type
      in: query
      description: 'The type of the application. It is possible to use multiple values separated by a comma. For example, `EXTERNAL,HOSTED` will return only applications with type `EXTERNAL` or `HOSTED`.'
      schema:
        type: string
        enum:
          - EXTERNAL
          - HOSTED
          - MICROSERVICE
        example: HOSTED
    queryParam_application_name:
      name: name
      in: query
      description: The name of the application.
      schema:
        type: string
        minLength: 1
        example: devicemanagement
    queryParam_application_owner:
      name: owner
      in: query
      description: The ID of the tenant that owns the applications.
      schema:
        type: string
        minLength: 1
        example: management
    queryParam_application_tenant:
      name: tenant
      in: query
      description: The ID of a tenant that either owns the application or is subscribed to the applications.
      schema:
        type: string
        minLength: 1
        example: management
    queryParam_application_user:
      name: user
      in: query
      description: The ID of a user that has access to the applications.
      schema:
        type: string
        minLength: 1
        example: jdoe
    queryParam_application_subscriber:
      name: subscriber
      in: query
      description: The ID of a tenant that is subscribed to the applications.
      schema:
        type: string
        minLength: 1
        example: management
    queryParam_application_providedFor:
      name: providedFor
      in: query
      description: The ID of a tenant that is subscribed to the applications but doesn't own them.
      schema:
        type: string
        minLength: 1
        example: t07007007
    queryParam_application_force:
      name: force
      in: query
      description: Force deletion by unsubscribing all tenants from the application first and then deleting the application itself.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_application_version_version:
      name: version
      in: query
      description: The version field of the application version.
      schema:
        type: string
        minLength: 1
        example: 1
    queryParam_application_version_tag:
      name: tag
      in: query
      description: The tag of the application version.
      schema:
        type: string
        minLength: 1
        example: tag1
    queryParam_audit_application:
      name: application
      in: query
      description: Name of the application from which the audit was carried out.
      schema:
        type: string
        minLength: 1
        example: cockpit
    queryParam_audit_dateFrom:
      name: dateFrom
      in: query
      description: Start date or date and time of the audit record (device time).
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-01'
    queryParam_audit_dateTo:
      name: dateTo
      in: query
      description: End date or date and time of the audit record (device time).
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-30'
    queryParam_audit_source:
      name: source
      in: query
      description: The platform component ID to which the audit is associated.
      schema:
        type: string
        minLength: 1
        example: '251994'
    queryParam_audit_type:
      name: type
      in: query
      description: The type of audit record to search for.
      schema:
        type: string
        minLength: 1
        example: Operation
    queryParam_audit_user:
      name: user
      in: query
      description: The username to search for.
      schema:
        type: string
        minLength: 1
        example: rina
    queryParam_event_type:
      name: type
      in: query
      description: The type of event to search for.
      schema:
        type: string
        minLength: 1
        example: c8y_OutgoingSmsLog
    queryParam_event_source:
      name: source
      in: query
      description: The managed object ID to which the event is associated.
      schema:
        type: string
        minLength: 1
        example: '251994'
    queryParam_event_dateFrom:
      name: dateFrom
      in: query
      description: Start date or date and time of the event occurrence (provided by the device).
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-01'
    queryParam_event_dateTo:
      name: dateTo
      in: query
      description: End date or date and time of the event occurrence (provided by the device).
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-30'
    queryParam_event_withSourceAssets:
      name: withSourceAssets
      in: query
      description: When set to `true` also events for related source assets will be included in the request. When this parameter is provided a `source` must be specified.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_event_withSourceDevices:
      name: withSourceDevices
      in: query
      description: When set to `true` also events for related source devices will be included in the request. When this parameter is provided a `source` must be specified.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_event_createdFrom:
      name: createdFrom
      in: query
      description: Start date or date and time of the event's creation (set by the platform during creation).
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-01'
    queryParam_event_createdTo:
      name: createdTo
      in: query
      description: End date or date and time of the event's creation (set by the platform during creation).
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-30'
    queryParam_event_revert:
      name: revert
      in: query
      description: |
        If you are using a range query (that is, at least one of the `dateFrom` or `dateTo` parameters is included in the request), then setting `revert=true` will sort the results by the oldest events first.
        By default, the results are sorted by the newest events first.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_operation_revert:
      name: revert
      in: query
      description: |
        If you are using a range query (that is, at least one of the `dateFrom` or `dateTo` parameters is included in the request), then setting `revert=true` will sort the results by the newest operations first.
        By default, the results are sorted by the oldest operations first.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_measurement_revert:
      name: revert
      in: query
      description: |
        If you are using a range query (that is, at least one of the `dateFrom` or `dateTo` parameters is included in the request), then setting `revert=true` will sort the results by the newest measurements first.
        By default, the results are sorted by the oldest measurements first.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_measurement_type:
      name: type
      in: query
      description: The type of measurement to search for.
      schema:
        type: string
        minLength: 1
        example: c8y_Water
    queryParam_measurement_source:
      name: source
      in: query
      description: The managed object ID to which the measurement is associated.
      schema:
        type: string
        minLength: 1
        example: '251994'
    queryParam_measurement_sourceRequired:
      name: source
      in: query
      description: The managed object ID to which the measurement is associated.
      required: true
      schema:
        type: string
        minLength: 1
        example: '251994'
    queryParam_measurement_dateFrom:
      name: dateFrom
      in: query
      description: Start date or date and time of the measurement.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-01'
    queryParam_measurement_dateTo:
      name: dateTo
      in: query
      description: End date or date and time of the measurement.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-30'
    queryParam_measurement_dateFromRequired:
      name: dateFrom
      in: query
      description: Start date or date and time of the measurement.
      required: true
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-01'
    queryParam_measurement_dateToRequired:
      name: dateTo
      in: query
      description: End date or date and time of the measurement.
      required: true
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-30'
    queryParam_measurement_valueFragmentType:
      name: valueFragmentType
      in: query
      description: A characteristic which identifies the measurement.
      schema:
        type: string
        minLength: 1
        example: c8y_Steam
    queryParam_measurement_series:
      name: series
      in: query
      description: |
        The specific series to search for.
        >**&#9432; Info:** If you want to query multiple series at once, you must specify the parameter multiple times.
      schema:
        type: array
        items:
          type: string
          minLength: 1
        example: c8y_Speed.speedX&series=c8y_Speed.speedY
      style: form
      explode: true
    queryParam_measurement_valueFragmentSeries:
      name: valueFragmentSeries
      in: query
      description: The specific series to search for.
      schema:
        type: string
        minLength: 1
        example: Temperature
    queryParam_measurement_aggregationType:
      name: aggregationType
      in: query
      description: Fetch aggregated results as specified.
      schema:
        type: string
        enum:
          - DAILY
          - HOURLY
          - MINUTELY
        example: MINUTELY
    queryParam_notification_token:
      name: token
      in: query
      description: Subscriptions associated with this token will be removed.
      required: true
      schema:
        type: string
        minLength: 1
        example: eyJhbGciOiJSUzI1NiJ9...eyJzdWIiOiJ0ZXN0U32Nya
    queryParam_notification_subscription_source:
      name: source
      in: query
      description: The managed object ID to which the subscription is associated.
      schema:
        type: string
        minLength: 1
        example: '251982'
    queryParam_notification_subscription_context:
      name: context
      in: query
      description: The context to which the subscription is associated.
      schema:
        type: string
        minLength: 1
        enum:
          - mo
          - tenant
        example: mo
    queryParam_notification_subscription_subscription:
      name: subscription
      in: query
      description: The subscription name by which filtering will be done.
      schema:
        type: string
        minLength: 1
        example: testSubscription
    queryParam_notification_subscription_typeFilter:
      name: typeFilter
      in: query
      description: |
        The type used to filter subscriptions. This will check the subscription's `subscriptionFilter.typeFilter` field.
        > **&#9432; Info:** Filtering by `typeFilter` may affect paging. Additional post filtering may be performed if OData-like expressions are used in the subscriptions.
      schema:
        type: string
        minLength: 1
        example: '''c8y_Speed'' or ''c8y_LocationUpdate'''
    queryParam_notification_subscription_context_for_delete:
      name: context
      in: query
      description: |
        The context to which the subscription is associated.
        > **&#9432; Info:** If the value is `mo` (managed object), then `source` must also be provided in the query.
      schema:
        type: string
        minLength: 1
        enum:
          - mo
          - tenant
        default: mo
        example: tenant
    queryParam_operation_agentId:
      name: agentId
      in: query
      description: 'An agent ID that may be part of the operation. If this parameter is set, the operation response objects contain the `deviceExternalIDs` object.'
      schema:
        type: string
        minLength: 1
        example: simulator_145074_1
    queryParam_operation_agentId_delete:
      name: agentId
      in: query
      description: An agent ID that may be part of the operation.
      schema:
        type: string
        minLength: 1
        example: simulator_145074_1
    queryParam_operation_deviceId:
      name: deviceId
      in: query
      description: The ID of the device the operation is performed for.
      schema:
        type: string
        minLength: 1
        example: '1234'
    queryParam_operation_status:
      name: status
      in: query
      description: Status of the operation.
      schema:
        type: string
        enum:
          - SUCCESSFUL
          - FAILED
          - EXECUTING
          - PENDING
        example: FAILED
    queryParam_operation_fragmentType:
      name: fragmentType
      in: query
      description: The type of fragment that must be part of the operation.
      schema:
        type: string
        minLength: 1
        example: com_cumulocity_model_WebCamDevice
    queryParam_operation_bulkOperationId:
      name: bulkOperationId
      in: query
      description: The bulk operation ID that this operation belongs to.
      schema:
        type: integer
        minLength: 1
        example: 1237
    queryParam_operation_dateFrom:
      name: dateFrom
      in: query
      description: Start date or date and time of the operation.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-01'
    queryParam_operation_dateTo:
      name: dateTo
      in: query
      description: End date or date and time of the operation.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-30'
    queryParam_users_username:
      name: username
      in: query
      description: Prefix or full username
      schema:
        type: string
        minLength: 1
        example: jdoe
    queryParam_users_groups:
      name: groups
      in: query
      description: |
        Numeric group identifiers. The response will contain only users which belong to at least one of the specified groups.
        >**&#9432; Info:** If you query for multiple user groups at once, comma-separate the values.
      schema:
        type: array
        items:
          type: string
          minLength: 1
        example:
          - '2'
          - '3'
          - '4'
      style: form
      explode: false
    queryParam_users_owner:
      name: owner
      in: query
      description: Exact username of the owner of the user
      schema:
        type: string
        minLength: 1
        example: admin
    queryParam_users_onlyDevices:
      name: onlyDevices
      in: query
      description: |
        If set to `true`, the response will only contain users created during bootstrap process (starting with “device_”).
        If the flag is absent or `false` the result will not contain “device_” users.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_users_withSubusersCount:
      name: withSubusersCount
      in: query
      description: |
        If set to `true`, then each of returned user will contain an additional field “subusersCount”.
        It is the number of direct subusers (users with corresponding “owner”).
      schema:
        type: boolean
        default: false
        example: true
    queryParam_tenant_dateFrom:
      name: dateFrom
      in: query
      description: Start date or date and time of the statistics.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-01'
    queryParam_tenant_dateTo:
      name: dateTo
      in: query
      description: End date or date and time of the statistics.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-30'
    queryParam_tenant_tenant:
      name: tenant
      in: query
      description: Unique identifier of a Cumulocity tenant.
      schema:
        type: string
        minLength: 1
        example: t07007007
    queryParam_tenantId:
      name: tenantId
      in: query
      description: Unique identifier of a Cumulocity tenant.
      schema:
        type: string
        minLength: 1
        example: t07007007
    queryParam_tenant_id:
      name: tenant_id
      in: query
      required: false
      description: 'Unique identifier of a Cumulocity tenant. If not provided, the tenant is calculated based on the request domain.'
      schema:
        type: string
        minLength: 1
        example: t07007007
    queryParam_tenant_withParent:
      name: withParent
      in: query
      description: 'When set to `true`, the returned result will contain the parent of the current tenant.'
      schema:
        type: boolean
        default: false
        example: true
    queryParam_tenant_company:
      name: company
      in: query
      description: Company name associated with the Cumulocity tenant.
      schema:
        type: string
        minLength: 1
        example: ACME AG
    queryParam_tenant_domain:
      name: domain
      in: query
      description: Domain name of the Cumulocity tenant.
      schema:
        type: string
        minLength: 1
        example: mytenant.cumulocity.com
    queryParam_tenant_parent:
      name: parent
      in: query
      description: Identifier of the Cumulocity tenant's parent.
      schema:
        type: string
        minLength: 1
        example: management
    queryParam_deviceId:
      name: deviceId
      in: query
      description: The ID of the device to search for.
      schema:
        type: string
        minLength: 1
        example: '115'
    queryParam_file_dateFrom:
      name: dateFrom
      in: query
      description: Start date or date and time of the range included in statistics file.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-01'
    queryParam_file_dateTo:
      name: dateTo
      in: query
      description: End date or date and time of the range included in statistics file.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-30'
    queryParam_lastUpdatedFrom:
      name: lastUpdatedFrom
      in: query
      description: Start date or date and time of the last update made.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-01'
    queryParam_lastUpdatedTo:
      name: lastUpdatedTo
      in: query
      description: End date or date and time of the last update made.
      schema:
        type: string
        format: date-time
        minLength: 10
        example: '2020-03-30'
    queryParam_tenant_management:
      name: management
      in: query
      description: |
        If this is set to `true`, the management tenant login options will be returned.

        > **&#9432; Info:** The `tenantId` parameter must not be present in the request when using the `management` parameter, otherwise it will cause an error.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_targetTenant:
      name: targetTenant
      in: query
      description: Unique identifier of a Cumulocity tenant.
      required: true
      schema:
        type: string
        minLength: 1
        example: t07007007
    queryParam_addToTrustStore:
      name: addToTrustStore
      in: query
      description: |
        If set to `true` the certificate is added to the truststore.

        The truststore contains all trusted certificates. A connection to a device is only established if it connects to Cumulocity with a certificate in the truststore.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_withLatestValues:
      name: withLatestValues
      in: query
      description: |
        If set to true the platform returns managed objects with the fragment `c8y_LatestMeasurements, which contains the latest measurement values reported by the device to the platform.

        > **⚠️ Feature Preview:** The parameter is a part of the Latest Measurement feature which is still under public preview.
      schema:
        type: boolean
        default: false
        example: true
    queryParam_forceLogout:
      name: forceLogout
      in: query
      required: false
      description: 'If set to `true`, users with this global role will be force logged out.'
      schema:
        type: boolean
        default: false
        example: true
    sslCertChainInHeader:
      name: X-Ssl-Cert-Chain
      in: header
      description: |
        Used to send a certificate chain in the header. Separate the chain with ` ` (a space character) and also each 64 bit block with ` ` (a space character).
      required: false
      schema:
        type: string
        example: '-----BEGIN CERTIFICATE----- MIIDTzCCAjegAwIBAgIUB1a5GM9ubBpN5tyU7YO8D3C8zUUwDQYJKoZIhvcNAQEL BQAwUjELMAkGA1UEBhMCRVUxCzAJBgNVBAgMAlBMMRswGQYDVQQKDBJJb3QgRGV2 aWNlIEZhY3RvcnkxGTAXBgNVBAMMEElvdERldkZhY3RvcnlDQTQwHhcNMjMwMTMx MDMzMTEyWhcNMzMwMTI4MDMzMTEyWjBSMQswCQYDVQQGEwJFVTELMAkGA1UECAwC UEwxGzAZBgNVBAoMEklvdCBEZXZpY2UgRmFjdG9yeTEZMBcGA1UEAwwQSW90RGV2 RmFjdG9yeUNBNDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANeyb0T9 2Ac4G83GGO+vNiieyItY1Tf0Rm1tJPIevDnSg+leplLIEUeE0y7UNAJDMxEEJx6V cFzG2yK4yPJibMw2AAo4Wy9U4Ie4F7kLmgUnh8prxcX19AKhHujZCEjhgmk3MCEc FbSjgSWNaXX6vO5JPj8aMtMKFUIsah9VH8G+HnfPuH4LF0MQFKU+K3bZRrsAUD7a oWGaUGGiLOQgUdURfPj3AJc4gAT+t9f/CX7OrOg+A9RpVVswkYfrCz6hhEJb/jDj 9XO+OdphmXLvjjYsRbEmUZAXJ0M6Iv1WZW9vV7Nd5H4L89wQKRYqFFhAwnLp7Dh2 f85VbHZT7+UmUacCAwEAAaMdMBswDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAuQw DQYJKoZIhvcNAQELBQADggEBAKoSCWwoUIIr5HjQQOThQFgnxcKJX9nwSkZbQOMf 9G7XV5SQTUJTxTAE5sntVoLGtIdA8F7ytbW1Gv1CFlZpu0hRoj92JTS8rCVD4X7f hCbXometLrSPV63BRB2NEmmtOBPXNsENdujhkK0ouXodSJc2xE6VTeaH5ng0jceD riy8qB5wN+AfEyoz36QJaHIt77Stp2ZQU0gK44B+uuSEPCUJfQVEBwkGhYB4Ut2+ s++cqJ7gRXV08Zt5J7q6kTcnmhsm0oJelQDLIJh+hEBzdjCdtKfYslRvFq3I85Y0 zngrsOfyKr8YYlDRy6RiAR2HQode00Hs4WoakfuTpaISZIs= -----END CERTIFICATE----- -----BEGIN CERTIFICATE-----  ..  -----END CERTIFICATE----- -----BEGIN CERTIFICATE-----  ..  -----END CERTIFICATE-----'
  responses:
    unauthorizedError:
      description: Authentication information is missing or invalid.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: security/Unauthorized
            message: 'Invalid credentials! : Bad credentials'
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    accessDenied:
      description: Not enough permissions/roles to perform this operation.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: security/Forbidden
            message: Access is denied.
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    operationNotAuthorized:
      description: Not authorized to perform this operation.
    invalidPayload:
      description: Unprocessable Entity – invalid payload.
    identityExternalIdNotFound:
      description: External ID not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: identity/Not Found
            message: External ID not found
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    identityGlobalObjectNotFound:
      description: Global ID not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: identity/Not Found
            message: Global ID not found
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    trustedCertificateNotFound:
      description: Trusted certificate not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: certificate/Not Found
            message: Cannot find certificate with fingerprint abcdef1234567890.
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    invalidData:
      description: Invalid data was sent.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: inventory/Invalid Data
            message: 'Find by filter query failed : Query could not be understood.'
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    invalidChildId:
      description: Invalid data was sent.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: inventory/Invalid Data
            message: managedObject 10213 is not a child of 10215
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    inventoryObjectCollectionFound:
      description: The request has succeeded and the collection of objects is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.managedobjectcollection+json:
          schema:
            $ref: '#/components/schemas/ManagedObjectCollection'
    inventoryBinariesCollectionFound:
      description: The request has succeeded and the managed objects are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.managedobjectcollection+json:
          schema:
            $ref: '#/components/schemas/BinaryCollection'
    inventoryObjectFound:
      description: The request has succeeded and the object is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.managedobject+json:
          schema:
            $ref: '#/components/schemas/managedObject'
    inventoryObjectNotFound:
      description: Managed object not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: inventory/Not Found
            message: Finding device data from database failed
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    alarmCollectionFound:
      description: The request has succeeded and all alarms are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.alarmcollection+json:
          schema:
            $ref: '#/components/schemas/AlarmCollection'
    auditRecordCollectionFound:
      description: The request has succeeded and all audit records are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.auditrecordcollection+json:
          schema:
            $ref: '#/components/schemas/AuditRecordCollection'
    auditFound:
      description: The request has succeeded and the audit record is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.auditrecord+json:
          schema:
            $ref: '#/components/schemas/auditRecord'
    alarmFound:
      description: The request has succeeded and the alarm is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.alarm+json:
          schema:
            $ref: '#/components/schemas/alarm'
    alarmNotFound:
      description: Alarm not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: alarm/Not Found
            message: Finding alarm from database failed
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    eventCollectionFound:
      description: The request has succeeded and all events are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.eventcollection+json:
          schema:
            $ref: '#/components/schemas/EventCollection'
    eventFound:
      description: The request has succeeded and the event is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.event+json:
          schema:
            $ref: '#/components/schemas/event'
    eventNotFound:
      description: Event not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: event/Not Found
            message: Finding event from database failed
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    measurementCollectionFound:
      description: The request has succeeded and all measurements are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.measurementcollection+json:
          schema:
            $ref: '#/components/schemas/MeasurementCollection'
    measurementFound:
      description: The request has succeeded and the measurement is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.measurement+json:
          schema:
            $ref: '#/components/schemas/measurement'
    measurementNotFound:
      description: Measurement not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: measurement/Not Found
            message: Finding measurement from database failed
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    notificationSubscriptionFound:
      description: The request has succeeded and the subscription is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.subscription+json:
          schema:
            $ref: '#/components/schemas/NotificationSubscription'
    notificationSubscriptionNotFound:
      description: Subscription not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: reliable-notification/Not Found
            message: Finding subscription from database failed
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    notificationSubscriptionDuplicate:
      description: Duplicated subscription.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: reliable-notification/Duplicate
            message: 'Subscription with source <''251982''>, context <''mo''> & subscription <''testSubscription''> already exists!'
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    notificationSubscriptionCollectionFound:
      description: The request has succeeded and all subscriptions are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.subscriptioncollection+json:
          schema:
            $ref: '#/components/schemas/NotificationSubscriptionCollection'
    NotificationSubscriptionResult:
      description: The notification subscription was deleted or is scheduled for deletion.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSubscriptionResult'
    attachmentNotFound:
      description: Attachment not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: Not Found
            message: Attachment not found
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    attachmentDuplicated:
      description: An attachment exists already.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: Duplicate
            message: Attachment already exists
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    retentionRuleCollectionFound:
      description: The request has succeeded and all retention rules are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.retentionrulecollection+json:
          schema:
            $ref: '#/components/schemas/RetentionRuleCollection'
    retentionRuleFound:
      description: The request has succeeded and the retention rule is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.retentionrule+json:
          schema:
            $ref: '#/components/schemas/retentionRule'
    retentionRuleNotFound:
      description: Retention rule not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: retention/Not Found
            message: Retention rule not found
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    operationNotFound:
      description: Operation not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: devicecontrol/Not Found
            message: 'Finding device data from database failed : No operation for gid ''123''!'
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    operationValidationError:
      description: Validation error.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: undefined/validationError
            message: 'Following mandatory fields should be included: status'
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    newDeviceRequestNotFound:
      description: New device request not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: devicecontrol/Not Found
            message: Could not find newDeviceRequest by ID 54545454
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    bulkOperationNotFound:
      description: Bulk operation not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: devicecontrol/Not Found
            message: 'Finding bulk operation from database failed : Cannot find document with ID ID [type=com_cumulocity_model_idtype_GId, value=1237]!'
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    applicationNotFound:
      description: Application not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: applications/Not Found
            message: Could not find application by ID 20200301
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    applicationVersionNotFound:
      description: Application version not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: applications/Not Found
            message: Cannot find application version for this application
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    applicationDuplicatedKeyName:
      description: Duplicate key/name.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: applications/Duplicate
            message: 'Application for tenant t07007007 with properties ( name:devicemanagement ) already exists'
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    applicationVersionInvalid:
      description: Duplicate version/tag or versions limit exceeded.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: applications/Duplicate
            message: Version or tag for this application already exists
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    applicationBootstrapUserBadRequest:
      description: Bad request.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: applications/Bad Request
            message: Can not get bootstrap user. Application is not a microservice
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    groupNotFound:
      description: Group not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: groups/Not Found
            message: 'Error retrieving group with id 2! : Cannot find document with ID ID [type=com_cumulocity_model_idtype_GId, value=2]!'
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    userNotFound:
      description: User not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: users/Not Found
            message: 'Error retrieving user 123! : Cannot find document with ID ID [type=com_cumulocity_model_idtype_GId, value=123]!'
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    tenantCollectionFound:
      description: The request has succeeded and the subtenants are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.tenantcollection+json:
          schema:
            $ref: '#/components/schemas/TenantCollection'
    currentTenantFound:
      description: The request has succeeded and the information is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.currenttenant+json:
          schema:
            $ref: '#/components/schemas/CurrentTenant'
    tenantFound:
      description: The request has succeeded and the tenant is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.tenant+json:
          schema:
            $ref: '#/components/schemas/tenant'
    tenantNotFound:
      description: Tenant not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: security/Not Found
            message: There is no tenant with id = t01
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    tenantDoesNotExists:
      description: The tenant ID does not exist.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: Device Certificates/Not Found
            message: Tenant Id doesn't exists
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    unableToParseCertBadRequest:
      description: Unable to parse certificate chain.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: Device Certificates/Bad Request
            message: 'Cannot parse X509 certificate. : Incomplete data'
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    x509CertificateValidationUnauthorizedError:
      description: 'One or more certificates in the chain are revoked or the certificate chain is not valid. Revoked certificates are checked first, then the validity of the certificate chain.'
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: security/Unauthorized
            message: Invalid certificate chain!
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    unableToParseCRLEntries:
      description: Unsupported date time format.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: Device Certificates/Bad Request
            message: 'Unsupported date time format, supported format:yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    tenantApplicationReferenceFound:
      description: The request has succeeded and the tenant applications are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.applicationreferencecollection+json:
          schema:
            $ref: '#/components/schemas/ApplicationReferenceCollection'
    tenantUsageStatisticsCollectionFound:
      description: The request has succeeded and the tenant statistics are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.tenantusagestatisticscollection+json:
          schema:
            $ref: '#/components/schemas/TenantUsageStatisticsCollection'
    tenantStatisticsFileCollectionFound:
      description: The request has succeeded and the tenant statistics are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.tenantStatisticsfilecollection+json:
          schema:
            $ref: '#/components/schemas/TenantUsageStatisticsFileCollection'
    fileFound:
      description: The request has succeeded and the file is sent in the response.
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
    fileNotFound:
      description: Statistics file not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: statistics/Not Found
            message: Statistics file with id 123 not found
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    summaryUsageStatisticsFound:
      description: The request has succeeded and the usage statistics summary is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.tenantusagestatisticssummary+json:
          schema:
            $ref: '#/components/schemas/SummaryTenantUsageStatistics'
    summaryAllTenantsUsageStatisticsFound:
      description: The request has succeeded and the usage statistics summary is sent in the response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SummaryAllTenantsUsageStatisticsCollection'
    monthlyDeviceStatisticsCollectionFound:
      description: The request has succeeded and the devices statistics are sent in the response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeviceStatisticsCollection'
          example:
            next: 'http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/monthly/2021-01-01?pageSize=5&currentPage=2'
            self: 'http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/monthly/2021-01-01?pageSize=5&currentPage=1'
            statistics:
              - deviceId: '115'
                count: 10
                deviceType: MyDevice
                deviceParents:
                  - '100'
              - deviceId: '116'
                count: 7
    dailyDeviceStatisticsCollectionFound:
      description: The request has succeeded and the devices statistics are sent in the response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeviceStatisticsCollection'
          example:
            next: 'http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/daily/2021-01-01?pageSize=5&currentPage=2'
            self: 'http://<TENANT_DOMAIN>/tenant/statistics/device/t07007007/daily/2021-01-01?pageSize=5&currentPage=1'
            statistics: []
    loginOptionBadRequest:
      description: Bad request – invalid parameters.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: LoginOptions/Bad Request
            message: Do not use 'management' flag while querying loginOptions of tenant with id <TENANT_ID>
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    loginOptionFound:
      description: The request has succeeded and the login option is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.authConfig+json:
          schema:
            $ref: '#/components/schemas/authConfig'
    loginOptionNotFound:
      description: Login option not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: tenants/Not Found
            message: Cannot find the specified configuration
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    loginOptionCollectionResourceFound:
      description: The request has succeeded and the login options are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.loginoptioncollection+json:
          schema:
            $ref: '#/components/schemas/LoginOptionCollection'
          example:
            self: 'https://<TENANT_DOMAIN>/tenant/loginOptions/'
            loginOptions":
              - enforceStrength: true
                greenMinLength: 8
                id: 924997e5-863c-4532-96f9-cbe6dc5f8902
                self: 'https://<TENANT_DOMAIN>/tenant/loginOptions/924997e5-863c-4532-96f9-cbe6dc5f8902'
                strengthValidity: false
                tfaStrategy: SMS
                type: OAUTH2_INTERNAL
                _type: OAuth2Config
                userManagementSource: INTERNAL
                visibleOnLoginPage: true
                initRequest: 'https://<TENANT_DOMAIN>/tenant/oauth?tenant_id=management'
                loginRedirectDomain: <TENANT_DOMAIN>
                grantType: PASSWORD
                sessionConfiguration:
                  absoluteTimeoutMillis: 1209600000
                  renewalTimeoutMillis: 86400000
                  userAgentValidationRequired: false
                  maximumNumberOfParallelSessions: 5
              - enforceStrength: true
                greenMinLength: 8
                id: 4b62-a8f1-a00ba63c89ce
                self: 'https://<TENANT_DOMAIN>/tenant/loginOptions/4b62-a8f1-a00ba63c89ce'
                strengthValidity: false
                tfaStrategy: SMS
                type: BASIC
                _type: BasicAuthConfig
                userManagementSource: INTERNAL
                visibleOnLoginPage: false
                authenticationRestrictions:
                  forbiddenClients: WEB_BROWSERS
    optionCollectionResourceFound:
      description: The request has succeeded and the options are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.optioncollection+json:
          schema:
            $ref: '#/components/schemas/OptionCollection'
    categoryOptionsFound:
      description: The request has succeeded and the options are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.option+json:
          schema:
            $ref: '#/components/schemas/CategoryOptions'
    optionFound:
      description: The request has succeeded and the option is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.option+json:
          schema:
            $ref: '#/components/schemas/option'
    systemOptionCollectionFound:
      description: The request has succeeded and the system options are sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.optioncollection+json:
          schema:
            $ref: '#/components/schemas/SystemOptionCollection'
    systemOptionFound:
      description: The request has succeeded and the system option is sent in the response.
      content:
        application/vnd.com.nsn.cumulocity.option+json:
          schema:
            $ref: '#/components/schemas/systemOption'
    roleNotFound:
      description: Role not found.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: Not Found
            message: Cannot find the specified role.
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    inventoryObjectDeleteConflict:
      description: 'Conflict – The managed object is associated to other objects, for example child devices.'
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: inventory/conflict
            message: Cannot delete the specified object as it has associated data.
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
    deviceAccessTokenNotFound:
      description: Device access token feature is disabled.
      content:
        application/vnd.com.nsn.cumulocity.error+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: Not Found
            message: 'This feature is disabled, please contact system administrator.'
            info: 'https://www.cumulocity.com/guides/reference-guide/#error_reporting'
  schemas:
    error:
      type: object
      properties:
        error:
          description: The type of error returned.
          type: string
        message:
          description: A human-readable message providing more details about the error.
          type: string
        info:
          description: 'A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the error code reported.'
          type: string
    alarm:
      type: object
      properties:
        count:
          description: Number of times that this alarm has been triggered.
          type: integer
          readOnly: true
        creationTime:
          description: The date and time when the alarm was created.
          type: string
          format: date-time
          readOnly: true
        firstOccurrenceTime:
          description: The time at which the alarm occurred for the first time. Only present when `count` is greater than 1.
          type: string
          format: date-time
          readOnly: true
        id:
          description: Unique identifier of the alarm.
          type: string
          readOnly: true
        lastUpdated:
          description: The date and time when the alarm was last updated.
          type: string
          format: date-time
          readOnly: true
        self:
          $ref: '#/components/schemas/desc_self'
        severity:
          description: The severity of the alarm.
          type: string
          enum:
            - CRITICAL
            - MAJOR
            - MINOR
            - WARNING
        source:
          description: The managed object to which the alarm is associated.
          type: object
          properties:
            id:
              $ref: '#/components/schemas/desc_objectId'
            name:
              $ref: '#/components/schemas/desc_objectName'
            self:
              $ref: '#/components/schemas/desc_self'
        status:
          description: 'The status of the alarm. If not specified, a new alarm will be created as ACTIVE.'
          type: string
          enum:
            - ACTIVE
            - ACKNOWLEDGED
            - CLEARED
        text:
          description: Description of the alarm.
          type: string
        time:
          description: The date and time when the alarm is triggered.
          type: string
          format: date-time
        type:
          description: Identifies the type of this alarm.
          type: string
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties are known as custom fragments and can be of any type, for example, object or string. Each custom fragment is identified by a unique name.

          Review [Getting started > Technical concepts > Cumulocity's domain model > Inventory > Fragments > Naming conventions of fragments](https://www.cumulocity.com/docs/concepts/domain-model/#naming-conventions-of-fragments) in the Cumulocity user documentation as there are characters that can not be used when naming custom fragments.
        x-additionalPropertiesName: customFragments
      example:
        count: 1
        creationTime: '2020-03-19T12:16:31.586Z'
        lastUpdated: '2020-03-20T13:41:39.678Z'
        id: '20200301'
        self: 'https://<TENANT_DOMAIN>/alarm/alarms/20200301'
        severity: MAJOR
        source:
          id: '251982'
          name: My tracking device
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/251982'
        status: ACTIVE
        text: No data received from the device within the required interval.
        time: '2020-03-19T00:00:00.000Z'
        type: c8y_UnavailabilityAlarm
    auditApiResource:
      type: object
      properties:
        auditRecords:
          description: Collection of audit records
          type: object
          properties:
            self:
              $ref: '#/components/schemas/desc_self'
            auditRecords:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/auditRecord'
        auditRecordsForApplication:
          description: 'Read-only collection of audit records for a specific application. The placeholder {application} must be the name of a registered application.'
          type: string
        auditRecordsForType:
          description: Read-only collection of audit records for a specific type.
          type: string
        auditRecordsForUser:
          description: 'Read-only collection of audit records for a specific user. The placeholder {user} must be a username of a registered user.'
          type: string
        auditRecordsForTypeAndApplication:
          description: Read-only collection of audit records for specific type and application.
          type: string
        auditRecordsForTypeAndUserAndApplication:
          description: 'Read-only collection of audit records for specific type, user and application.'
          type: string
        auditRecordsForUserAndApplication:
          description: Read-only collection of audit records for specific user and application.
          type: string
        auditRecordsForUserAndType:
          description: Read-only collection of audit records for specific user and type.
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        auditRecords:
          self: 'https://<TENANT_DOMAIN>/audit/auditRecords'
          auditRecords: []
        auditRecordsForApplication: 'https://<TENANT_DOMAIN>/audit/auditRecords?application={application}'
        auditRecordsForType: 'https://<TENANT_DOMAIN>/audit/auditRecords?type={type}'
        auditRecordsForUser: 'https://<TENANT_DOMAIN>/audit/auditRecords?user={user}'
        auditRecordsForTypeAndApplication: 'https://<TENANT_DOMAIN>/audit/auditRecords?type={type}&application={application}'
        auditRecordsForTypeAndUserAndApplication: 'https://<TENANT_DOMAIN>/audit/auditRecords?type={type}&user={user}&application={application}'
        auditRecordsForUserAndApplication: 'https://<TENANT_DOMAIN>/audit/auditRecords?user={user}&application={application}'
        auditRecordsForUserAndType: 'https://<TENANT_DOMAIN>/audit/auditRecords?user={user}&type={type}'
        self: 'https://<TENANT_DOMAIN>/audit'
    auditRecord:
      type: object
      required:
        - activity
        - source
        - text
        - time
        - type
      properties:
        activity:
          description: Summary of the action that was carried out.
          type: string
        application:
          description: Name of the application that performed the action.
          type: string
          readOnly: true
        c8y_Metadata:
          description: Metadata of the audit record.
          type: object
          properties:
            action:
              description: The action that was carried out.
              type: string
              enum:
                - SUBSCRIBE
                - DEPLOY
                - SCALE
                - DELETE
          readOnly: true
        changes:
          description: Collection of objects describing the changes that were carried out.
          type: array
          items:
            type: object
            properties:
              attribute:
                description: The attribute that was changed.
                type: string
              changeType:
                description: The type of change that was carried out.
                type: string
                enum:
                  - ADDED
                  - REPLACED
              newValue:
                description: The new value of the object.
                oneOf:
                  - type: string
                  - type: object
                    properties:
                      cpu:
                        description: Number of CPUs or CPU time limit.
                        type: string
                      memory:
                        description: Memory usage limit.
                        type: string
                nullable: true
              previousValue:
                description: The previous value of the object.
                oneOf:
                  - type: string
                  - type: object
                    properties:
                      cpu:
                        description: Number of CPUs or CPU time limit.
                        type: string
                      memory:
                        description: Memory usage limit.
                        type: string
                nullable: true
              type:
                description: The type of the object.
                type: string
                nullable: true
          readOnly: true
        creationTime:
          description: The date and time when the audit record was created.
          type: string
          format: date-time
          readOnly: true
        id:
          description: Unique identifier of the audit record.
          type: string
          readOnly: true
        self:
          $ref: '#/components/schemas/desc_self'
        severity:
          description: The severity of the audit action.
          type: string
          readOnly: true
          enum:
            - CRITICAL
            - MAJOR
            - MINOR
            - WARNING
            - INFORMATION
        source:
          description: The platform component ID to which the audit is associated.
          type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/desc_objectId'
            self:
              $ref: '#/components/schemas/desc_self'
        text:
          description: Details of the action that was carried out.
          type: string
        time:
          description: The date and time when the audit is updated.
          type: string
          format: date-time
        type:
          description: Identifies the platform component of the audit.
          type: string
          enum:
            - Alarm
            - Application
            - BulkOperation
            - CepModule
            - Connector
            - Event
            - Group
            - Inventory
            - InventoryRole
            - Operation
            - Option
            - Report
            - SingleSignOn
            - SmartRule
            - SYSTEM
            - Tenant
            - TenantAuthConfig
            - TrustedCertificates
            - User
            - UserAuthentication
        user:
          description: The user who carried out the activity.
          type: string
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties can be of any type, for example, object or string.
        x-additionalPropertiesName: customProperties
      example:
        activity: Operation created
        creationTime: '2020-03-19T12:16:31.586Z'
        id: '20200301'
        self: 'https://<TENANT_DOMAIN>/audit/auditRecords/20200301'
        source:
          id: '251982'
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/251982'
        text: 'Operation created: status=''PENDING'''
        time: '2020-03-19T00:00:00.000Z'
        type: Operation
        user: rina
    AuditRecordCollection:
      type: object
      properties:
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        next:
          $ref: '#/components/schemas/desc_nextPage'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        auditRecords:
          description: An array containing the results of the request.
          type: array
          items:
            $ref: '#/components/schemas/auditRecord'
      example:
        prev: 'https://<TENANT_DOMAIN>/audit/auditRecords?pageSize=1&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/audit/auditRecords?pageSize=1&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/audit/auditRecords?pageSize=1&currentPage=3'
        auditRecords:
          - activity: Operation created
            creationTime: '2020-03-19T12:16:31.586Z'
            id: '20200301'
            self: 'https://<TENANT_DOMAIN>/audit/auditRecords/20200301'
            source:
              id: '251982'
              self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/251982'
            text: 'Operation created: status=''PENDING'''
            time: '2020-03-19T00:00:00.000Z'
            type: Operation
            user: rina
        statistics:
          currentPage: 2
          pageSize: 1
          totalPages: 3
    alarmsApiResource:
      type: object
      properties:
        alarms:
          description: Collection of all alarms
          type: object
          properties:
            self:
              $ref: '#/components/schemas/desc_self'
            alarms:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/alarm'
        alarmsForSource:
          description: 'Read-only collection of all alarms for a specific source object. The placeholder {source} must be a unique ID of an object in the inventory.'
          type: string
        alarmsForStatus:
          description: 'Read-only collection of all alarms in a particular status. The placeholder {status} can be one of the following values: ACTIVE, ACKNOWLEDGED or CLEARED'
          type: string
        alarmsForSourceAndStatusAndTime:
          description: 'Read-only collection of all alarms for a specific source, status and time range.'
          type: string
        alarmsForStatusAndTime:
          description: Read-only collection of all alarms for a particular status and time range.
          type: string
        alarmsForSourceAndTime:
          description: Read-only collection of all alarms for a specific source and time range.
          type: string
        alarmsForTime:
          description: Read-only collection of all alarms for a particular time range.
          type: string
        alarmsForSourceAndStatus:
          description: Read-only collection of all alarms for a specific source object in a particular status.
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        alarms:
          self: 'https://<TENANT_DOMAIN>/alarm/alarms'
          alarms: []
        alarmsForSource: 'https://<TENANT_DOMAIN>/alarm/alarms?source={source}'
        alarmsForStatus: 'https://<TENANT_DOMAIN>/alarm/alarms?status={status}'
        alarmsForSourceAndStatusAndTime: 'https://<TENANT_DOMAIN>/alarm/alarms?source={source}&status={status}&dateFrom={dateFrom}&dateTo={dateTo}'
        alarmsForStatusAndTime: 'https://<TENANT_DOMAIN>/alarm/alarms?status={status}&dateFrom={dateFrom}&dateTo={dateTo}'
        alarmsForSourceAndTime: 'https://<TENANT_DOMAIN>/alarm/alarms?source={source}&dateFrom={dateFrom}&dateTo={dateTo}'
        alarmsForTime: 'https://<TENANT_DOMAIN>/alarm/alarms?dateFrom={dateFrom}&dateTo={dateTo}'
        alarmsForSourceAndStatus: 'https://<TENANT_DOMAIN>/alarm/alarms?source={source}&status={status}'
        self: 'https://<TENANT_DOMAIN>/alarm'
    application:
      type: object
      properties:
        availability:
          description: Application access level for other tenants.
          type: string
          enum:
            - MARKET
            - PRIVATE
          default: PRIVATE
        contextPath:
          description: The context path in the URL makes the application accessible. Mandatory when the type of the application is `HOSTED`.
          type: string
          minLength: 1
        description:
          description: Description of the application.
          type: string
        id:
          description: Unique identifier of the application.
          type: string
          readOnly: true
        key:
          description: 'Applications, regardless of their form, are identified by an application key.'
          type: string
          minLength: 1
        name:
          description: Name of the application.
          type: string
          minLength: 1
        owner:
          $ref: '#/components/schemas/application_owner'
        self:
          $ref: '#/components/schemas/desc_self'
        type:
          description: The type of the application.
          type: string
          enum:
            - EXTERNAL
            - HOSTED
            - MICROSERVICE
        manifest:
          oneOf:
            - $ref: '#/components/schemas/microservice_application_manifest'
            - $ref: '#/components/schemas/web_application_manifest'
        roles:
          $ref: '#/components/schemas/application_roles'
        requiredRoles:
          $ref: '#/components/schemas/application_required_roles'
        breadcrumbs:
          description: |
            A flag to indicate if the application has a breadcrumbs navigation on the UI.
            > **&#9432; Info:** This property is specific to the web application type.
          type: boolean
        contentSecurityPolicy:
          description: |
            The content security policy of the application.
            > **&#9432; Info:** This property is specific to the web application type.
          type: string
        dynamicOptionsUrl:
          description: |
            A URL to a JSON object with dynamic content options.
            > **&#9432; Info:** This property is specific to the web application type.
          type: string
          example: /apps/public/public-options/options.json
        globalTitle:
          description: |
            The global title of the application.
            > **&#9432; Info:** This property is specific to the web application type.
          type: string
          example: Cumulocity
        legacy:
          description: |
            A flag that shows if the application is a legacy application or not.
            > **&#9432; Info:** This property is specific to the web application type.
          type: boolean
        rightDrawer:
          description: |
            A flag to indicate if the application uses the UI context menu on the right side.
            > **&#9432; Info:** This property is specific to the web application type.
          type: boolean
        upgrade:
          description: |
            A flag that shows if the application is hybrid and using Angular and AngularJS simultaneously.
            > **&#9432; Info:** This property is specific to the web application type.
          type: boolean
        activeVersionId:
          description: The active version ID of the application. For microservice applications the active version ID is the microservice manifest version ID.
          type: string
          readOnly: true
        resourcesUrl:
          description: URL to the application base directory hosted on an external server. Only present in legacy hosted applications.
          type: string
          deprecated: true
          readOnly: true
      example:
        availability: PRIVATE
        contextPath: myapplication
        id: '20200301'
        key: my-application-key
        name: my-application
        owner:
          self: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007'
          tenant:
            id: t07007007
        self: 'https://<TENANT_DOMAIN>/application/applications/20200301'
        type: HOSTED
    application_owner:
      description: Reference to the tenant owning this application. The default value is a reference to the current tenant.
      type: object
      readOnly: true
      properties:
        self:
          $ref: '#/components/schemas/desc_self'
        tenant:
          type: object
          properties:
            id:
              description: The tenant ID.
              type: string
    application_required_roles:
      description: List of permissions required by a microservice to work.
      type: array
      items:
        description: A required role name.
        type: string
        example: ROLE_INVENTORY_READ
    application_roles:
      description: Roles provided by the microservice.
      type: array
      items:
        description: A role name.
        type: string
        example: ROLE_SMS_READ
    microservice_application_manifest:
      description: The manifest of the microservice application.
      type: object
      properties:
        apiVersion:
          description: 'Document type format discriminator, for future changes in format.'
          type: string
          example: '1'
        billingMode:
          description: |
            The billing mode of the application.

            In case of RESOURCES, the number of resources used is exposed for billing calculation per usage.
            In case of SUBSCRIPTION, all resources usage is counted for the microservice owner and the subtenant is charged for subscription.
          type: string
          enum:
            - RESOURCES
            - SUBSCRIPTION
          default: RESOURCES
          example: RESOURCES
        contextPath:
          description: The context path in the URL makes the application accessible.
          type: string
          example: devicemanagement
        extensions:
          description: A list of URL extensions for this microservice application.
          type: array
          items:
            type: object
            properties:
              path:
                description: The relative path in Cumulocity for this microservice application.
                type: string
                example: /cep/myapplication
              type:
                description: The type of this extension.
                type: string
                example: myapplication.io
        isolation:
          description: |
            Deployment isolation.
            In case of PER_TENANT, there is a separate instance for each tenant.
            Otherwise, there is one single instance for all subscribed tenants.
            This will affect billing.
          type: string
          enum:
            - MULTI_TENANT
            - PER_TENANT
          example: PER_TENANT
        livenessProbe:
          allOf:
            - description: Defines the strategy used to verify if a microservice is alive or requires a restart.
            - $ref: '#/components/schemas/application_manifest_probe'
        provider:
          description: |
            Application provider information.
            Simple name allowed for predefined providers, for example, c8y.
            Detailed object for external provider.
          type: object
          properties:
            name:
              description: The name of the application provider.
              type: string
              example: Cumulocity GmbH
        readinessProbe:
          allOf:
            - description: Defines the strategy used to verify if a microservice is ready to accept traffic.
            - $ref: '#/components/schemas/application_manifest_probe'
        requestResources:
          description: The minimum required resources for the microservice application.
          type: object
          properties:
            cpu:
              description: The required CPU resource for this microservice application.
              type: string
              example: 250m
            memory:
              description: The required memory resource for this microservice application.
              type: string
              example: 256Mi
        resources:
          description: The recommended resources for this microservice application.
          type: object
          properties:
            cpu:
              description: The required CPU resource for this microservice application.
              type: string
              example: 6000m
            memory:
              description: The required memory resource for this microservice application.
              type: string
              example: 28Gi
        roles:
          $ref: '#/components/schemas/application_roles'
        requiredRoles:
          $ref: '#/components/schemas/application_required_roles'
        scale:
          description: |
            Allows to configure a microservice auto scaling policy.
            If the microservice uses a lot of CPU resources, a second instance will be created automatically when this is set to `AUTO`.
            The default is `NONE`, meaning auto scaling will not happen.
          type: string
          enum:
            - NONE
            - AUTO
          default: NONE
          example: AUTO
        settings:
          $ref: '#/components/schemas/application_settings'
        settingsCategory:
          description: |
            Allows to specify a custom category for microservice settings.
            By default, `contextPath` is used.
          type: string
          example: null
        version:
          description: |
            Application version.
            Must be a correct [SemVer](https://semver.org/) value but the "+" sign is disallowed.
          type: string
          example: 1006.6.8
    web_application_manifest:
      description: The manifest of the web application.
      type: object
      deprecated: true
      properties:
        _webpaas:
          deprecated: true
          description: |
            A legacy flag that identified a certain type of web application that would control the behavior of plugin tab in the application details view.
            It is no longer used.
          type: boolean
          example: true
        contentSecurityPolicy:
          description: The content security policy of the application.
          type: string
          example: 'base-uri ''none''; default-src ''self'' ''unsafe-inline'' http: https: ws: wss:; connect-src ''self'' *.billwerk.com http: https: ws: wss:;  script-src ''self'' open.mapquestapi.com *.twitter.com *.twimg.com ''unsafe-inline'' ''unsafe-eval'' data:; style-src * ''unsafe-inline'' blob:; img-src * data:; font-src * data:; frame-src *;'
        noAppSwitcher:
          description: A flag that decides if the application is shown in the app switcher on the UI.
          type: boolean
          example: true
        tabsHorizontal:
          description: A flag that decides if the application tabs are displayed horizontally or not.
          type: boolean
          example: true
    application_manifest_probe:
      type: object
      properties:
        failureThreshold:
          description: The probe failure threshold.
          type: integer
        periodSeconds:
          description: The probe period in seconds.
          type: integer
        timeoutSeconds:
          description: The probe timeout in seconds.
          type: integer
        successThreshold:
          description: The probe success threshold.
          type: integer
        initialDelaySeconds:
          description: The probe's initial delay in seconds.
          type: integer
        httpGet:
          description: The probe's HTTP GET method information.
          type: object
          properties:
            path:
              description: The HTTP path.
              type: string
            port:
              description: The HTTP port.
              type: integer
      example:
        failureThreshold: 3
        periodSeconds: 30
        timeoutSeconds: 10
        successThreshold: 1
        initialDelaySeconds: 360
        httpGet:
          path: /health
          port: 80
    application_settings:
      description: A list of settings objects for this microservice application.
      type: array
      items:
        type: object
        properties:
          key:
            description: The name of the setting.
            type: string
            example: hostkey-autosave
          valueSchema:
            description: The value schema determines the values that the microservice can process.
            type: object
            properties:
              type:
                description: The value schema type.
                type: string
                example: boolean
          defaultValue:
            description: The default value.
            type: string
            example: 'true'
          editable:
            description: Indicates if the value is editable.
            type: boolean
            example: true
          inheritFromOwner:
            description: Indicated wether this setting is inherited.
            type: boolean
            example: true
    bulkNewDeviceRequest:
      type: object
      properties:
        numberOfAll:
          description: 'Number of lines processed from the CSV file, without the first line (column headers).'
          type: integer
          example: 5
        numberOfCreated:
          description: Number of created device credentials.
          type: integer
          example: 3
        numberOfFailed:
          description: Number of failed creations of device credentials.
          type: integer
          example: 1
        numberOfSuccessful:
          description: Number of successful creations of device credentials. This counts both create and update operations.
          type: integer
          example: 4
        credentialUpdatedList:
          description: An array with the updated device credentials.
          type: array
          items:
            type: object
            properties:
              bulkNewDeviceStatus:
                description: The device credentials creation status.
                type: string
                title: NewDeviceStatus
                enum:
                  - CREATED
                  - FAILED
                  - CREDENTIAL_UPDATED
                example: CREDENTIAL_UPDATED
              deviceId:
                description: Unique identifier of the device.
                type: string
                example: id04
        failedCreationList:
          description: An array with details of the failed device credentials.
          type: array
          items:
            type: object
            properties:
              bulkNewDeviceStatus:
                description: The device credentials creation status.
                type: string
                title: NewDeviceStatus
                enum:
                  - CREATED
                  - FAILED
                  - CREDENTIAL_UPDATED
                example: FAILED
              deviceId:
                description: Unique identifier of the device.
                type: string
                example: id5
              failureReason:
                description: Reason for the failure.
                type: string
                example: Could not update the device
              line:
                description: Line where the failure occurred.
                type: string
                example: 'DeviceInfo{id=''id5'', credentials=''credentials3'', tenant=''t00000003''}'
    bulkOperation:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/desc_self'
        id:
          description: Unique identifier of this bulk operation.
          type: string
          readOnly: true
        groupId:
          description: |
            Identifies the target group on which this operation should be performed.
            >**&#9432; Info:** `groupId` and `failedParentId` are mutually exclusive. Use only one of them in your request.
          type: string
        failedParentId:
          description: |
            Identifies the failed bulk operation from which the failed operations should be rescheduled.
            >**&#9432; Info:** `groupId` and `failedParentId` are mutually exclusive. Use only one of them in your request.
          type: string
        startDate:
          description: Date and time when the operations of this bulk operation should be created.
          type: string
          format: date-time
        creationRamp:
          description: Delay between every operation creation in seconds.
          type: number
          format: float
        operationPrototype:
          description: Operation to be executed for every device in a group.
          type: object
        status:
          description: 'The status of this bulk operation, in context of the execution of all its single operations.'
          type: string
          readOnly: true
          enum:
            - ACTIVE
            - IN_PROGRESS
            - COMPLETED
            - DELETED
        generalStatus:
          description: The general status of this bulk operation. The general status is visible for end users and they can filter and evaluate bulk operations by this status.
          type: string
          readOnly: true
          enum:
            - SCHEDULED
            - EXECUTING
            - EXECUTING_WITH_ERRORS
            - SUCCESSFUL
            - FAILED
            - CANCELED
        progress:
          description: Contains information about the number of processed operations.
          type: object
          readOnly: true
          properties:
            pending:
              description: Number of pending operations.
              type: integer
            failed:
              description: Number of failed operations.
              type: integer
            executing:
              description: Number of operations being executed.
              type: integer
            successful:
              description: Number of operations successfully processed.
              type: integer
            all:
              description: Total number of processed operations.
              type: integer
      example:
        self: 'https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/1237'
        id: '1237'
        groupId: '12359'
        failedParentId: '1236'
        startDate: '2022-05-01T22:21:22'
        creationRamp: 15
        operationPrototype:
          description: Restart device
          c8y_Restart: {}
        status: IN_PROGRESS
        generalStatus: EXECUTING
        progress:
          pending: 0
          failed: 0
          executing: 0
          successful: 0
          all: 1
    currentUser:
      description: The current user.
      type: object
      properties:
        effectiveRoles:
          description: A list of user roles.
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/role'
        email:
          description: The user's email address.
          type: string
          format: email
        firstName:
          description: The user's first name.
          type: string
        id:
          description: A unique identifier for this user.
          type: string
          example: '123'
          readOnly: true
        lastName:
          description: The user's last name.
          type: string
        lastPasswordChange:
          description: 'The date and time when the user''s password was last changed, in [ISO 8601 datetime format](https://www.w3.org/TR/NOTE-datetime).'
          type: string
          format: date-time
          example: '2020-06-09T09:48:40.008Z'
          readOnly: true
        password:
          description: The user's password. Only Latin1 characters are allowed.
          type: string
          format: password
          writeOnly: true
          minLength: 6
          maxLength: 32
        phone:
          description: The user's phone number.
          type: string
          format: phone
        self:
          $ref: '#/components/schemas/desc_self'
        shouldResetPassword:
          description: Indicates if the user should reset the password on the next login.
          type: boolean
          readOnly: true
        twoFactorAuthenticationEnabled:
          description: Indicates if the user has to use two-factor authentication to log in.
          type: boolean
          default: false
          readOnly: true
        userName:
          description: The user's username. It can have a maximum of 1000 characters.
          type: string
        devicePermissions:
          $ref: '#/components/schemas/desc_user_devicepermissions'
      example:
        self: 'https://<TENANT_DOMAIN>/user/currentUser'
        id: jdoe
        firstName: John
        lastName: Doe
        userName: jdoe
        phone: +1-541-754-3010
        email: johndoe@example.com
        lastPasswordChange: '2020-06-09T09:48:40.008Z'
        shouldResetPassword: false
        effectiveRoles:
          - id: ROLE_ALARM_ADMIN
            name: ROLE_ALARM_ADMIN
            self: 'https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN'
        twoFactorAuthenticationEnabled: false
        devicePermissions: {}
    customProperties:
      description: An object with a list of custom properties.
      type: object
      properties:
        language:
          description: The preferred language to be used in the platform.
          type: string
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of custom properties as a list of key-value pairs, for example, `"property": "value"`.
        x-additionalPropertiesName: customProperties
      example:
        language: en
        userOrigin: BASIC
    deviceControlApiResource:
      type: object
      properties:
        operations:
          description: Collection of all operations.
          type: object
          properties:
            self:
              $ref: '#/components/schemas/desc_self'
            operations:
              description: An array containing the registered operations.
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/operationReference'
        operationsByStatus:
          description: Read-only collection of all operations with a particular status.
          type: string
        operationsByAgentId:
          description: Read-only collection of all operations targeting a particular agent.
          type: string
        operationsByAgentIdAndStatus:
          description: Read-only collection of all operations targeting a particular agent and with a particular status.
          type: string
        operationsByDeviceId:
          description: Read-only collection of all operations to be executed on a particular device.
          type: string
        operationsByDeviceIdAndStatus:
          description: 'Read-only collection of all operations with a particular status, that should be executed on a particular device.'
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        operations:
          self: 'https://<TENANT_DOMAIN>/devicecontrol/operations'
          operations: []
        operationsByStatus: 'https://<TENANT_DOMAIN>/devicecontrol/operations?status={status}'
        operationsByAgentId: 'https://<TENANT_DOMAIN>/devicecontrol/operations?agentId={agentId}'
        operationsByAgentIdAndStatus: 'https://<TENANT_DOMAIN>/devicecontrol/operations?agentId={agentId}&status={status}'
        operationsByDeviceId: 'https://<TENANT_DOMAIN>/devicecontrol/operations?deviceId={deviceId}'
        operationsByDeviceIdAndStatus: 'https://<TENANT_DOMAIN>/devicecontrol/operations?deviceId={deviceId}&status={status}'
        self: 'https://<TENANT_DOMAIN>/devicecontrol'
    deviceCredentials:
      type: object
      properties:
        id:
          description: The external ID of the device.
          type: string
        password:
          description: Password of these device credentials.
          type: string
          format: password
          readOnly: true
        self:
          $ref: '#/components/schemas/desc_self'
        tenantId:
          description: Tenant ID for these device credentials.
          type: string
          readOnly: true
        username:
          description: Username of these device credentials.
          type: string
          readOnly: true
        securityToken:
          writeOnly: true
          type: string
          description: |
            Security token which is required and verified against during device request acceptance.
            See [Security token policy](https://www.cumulocity.com/docs/device-management-application/registering-devices/#security-token-policy) for more details on configuration.
            See [Update specific new device request status](#operation/putNewDeviceRequestResource) for details on submitting token upon device acceptance.
      example:
        id: '129129'
        self: 'https://<TENANT_DOMAIN>/devicecontrol/deviceCredentials/129129'
        tenantId: t07007007
        username: device_129129
        password: 5ecur3_p455w0rd
    eventsApiResource:
      type: object
      properties:
        events:
          description: Collection of all events
          type: object
          properties:
            self:
              $ref: '#/components/schemas/desc_self'
            events:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/event'
        eventsForSource:
          description: 'Read-only collection of all events for a specific source object. The placeholder {source} must be a unique ID of an object in the inventory.'
          type: string
        eventsForSourceAndType:
          description: Read-only collection of all events of a particular type and a specific source object.
          type: string
        eventsForType:
          description: Read-only collection of all events of a particular type.
          type: string
        eventsForFragmentType:
          description: Read-only collection of all events containing a particular fragment type.
          type: string
        eventsForTime:
          description: Read-only collection of all events for a particular time range.
          type: string
        eventsForSourceAndTime:
          description: Read-only collection of all events for a specific source object in a particular time range.
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        events:
          self: 'https://<TENANT_DOMAIN>/event/events'
          events: []
        eventsForSource: 'https://<TENANT_DOMAIN>/event/events?source={source}'
        eventsForSourceAndType: 'https://<TENANT_DOMAIN>/event/events?source={source}&type={type}'
        eventsForType: 'https://<TENANT_DOMAIN>/event/events?type={type}'
        eventsForFragmentType: 'https://<TENANT_DOMAIN>/event/events?fragmentType={fragmentType}'
        eventsForTime: 'https://<TENANT_DOMAIN>/event/events?dateFrom={dateFrom}&dateTo={dateTo}'
        eventsForSourceAndTime: 'https://<TENANT_DOMAIN>/event/events?source={source}&dateFrom={dateFrom}&dateTo={dateTo}'
        self: 'https://<TENANT_DOMAIN>/event'
    externalId:
      type: object
      required:
        - externalId
        - type
      properties:
        externalId:
          description: The identifier used in the external system that Cumulocity interfaces with.
          type: string
        managedObject:
          type: object
          description: The managed object linked to the external ID.
          readOnly: true
          properties:
            id:
              $ref: '#/components/schemas/desc_objectId'
            self:
              $ref: '#/components/schemas/desc_self'
        self:
          $ref: '#/components/schemas/desc_self'
        type:
          description: The type of the external identifier.
          type: string
      example:
        externalId: simulator_145074_1
        managedObject:
          id: '251982'
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/251982'
        self: 'https://<TENANT_DOMAIN>/identity/externalIds/c8y_Serial/simulator_145074_1'
        type: c8y_Serial
    externalIds:
      type: object
      properties:
        externalIds:
          description: An array containing the details of all external IDs (if any).
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/externalId'
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        externalIds:
          - externalId: simulator_145074_1
            managedObject:
              id: '251982'
              self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/251982'
            self: 'https://<TENANT_DOMAIN>/identity/externalIds/c8y_Serial/simulator_145074_1'
            type: c8y_Serial
        self: 'https://<TENANT_DOMAIN>/identity/globalIds/251982/externalIds'
    event:
      type: object
      properties:
        creationTime:
          description: The date and time when the event was created.
          type: string
          format: date-time
          readOnly: true
        lastUpdated:
          description: The date and time when the event was last updated.
          type: string
          format: date-time
          readOnly: true
        id:
          description: Unique identifier of the event.
          type: string
          readOnly: true
        self:
          $ref: '#/components/schemas/desc_self'
        source:
          description: The managed object to which the event is associated.
          type: object
          properties:
            id:
              $ref: '#/components/schemas/desc_objectId'
            self:
              $ref: '#/components/schemas/desc_self'
        text:
          description: Description of the event.
          type: string
        time:
          description: The date and time when the event is updated.
          type: string
          format: date-time
        type:
          description: Identifies the type of this event.
          type: string
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties are known as custom fragments and can be of any type, for example, object or string. Each custom fragment is identified by a unique name.

          Review [Getting started > Technical concepts > Cumulocity's domain model > Inventory > Fragments > Naming conventions of fragments](https://www.cumulocity.com/docs/concepts/domain-model/#naming-conventions-of-fragments) in the Cumulocity user documentation as there are characters that can not be used when naming custom fragments.
        x-additionalPropertiesName: customFragments
      example:
        creationTime: '2020-03-19T12:16:31.586Z'
        lastUpdated: '2020-03-20T13:46:11.526Z'
        id: '20200301'
        self: 'https://<TENANT_DOMAIN>/event/events/20200301'
        source:
          id: '251982'
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/251982'
        text: Location update.
        time: '2020-03-19T00:00:00.000Z'
        type: c8y_LocationUpdate
    featureToggle:
      type: object
      properties:
        key:
          description: A unique key of the feature toggle.
          type: string
        phase:
          description: Current phase of feature toggle rollout.
          type: string
          enum:
            - IN_DEVELOPMENT
            - PRIVATE_PREVIEW
            - PUBLIC_PREVIEW
            - GENERALLY_AVAILABLE
        active:
          description: Current value of the feature toggle marking whether the feature is active or not.
          type: boolean
        strategy:
          description: 'The source of the feature toggle value - either it''s feature toggle definition provided default, or per tenant provided override.'
          type: string
          enum:
            - DEFAULT
            - TENANT
    featureTogglesList:
      type: array
      readOnly: true
      items:
        $ref: '#/components/schemas/featureToggle'
    featureToggleValue:
      type: object
      properties:
        active:
          description: Current value of the feature toggle marking whether the feature is active or not.
          type: boolean
    tenantFeatureToggleValue:
      type: object
      properties:
        tenantId:
          description: Identifier of a tenant this feature toggle value is for.
          type: string
        active:
          description: Current value of the feature toggle marking whether the feature is active or not.
          type: boolean
    tenantFeatureToggleValuesList:
      type: array
      readOnly: true
      items:
        $ref: '#/components/schemas/tenantFeatureToggleValue'
    group:
      type: object
      required:
        - name
      properties:
        applications:
          description: A list of applications.
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/application'
        customProperties:
          $ref: '#/components/schemas/customProperties'
        description:
          description: A description of the group.
          type: string
        devicePermissions:
          $ref: '#/components/schemas/desc_user_devicepermissions'
        id:
          description: A unique identifier for this group.
          type: integer
          readOnly: true
        name:
          description: The name of the group.
          type: string
          minLength: 1
        roles:
          description: An object containing user roles for this group.
          type: object
          readOnly: true
          properties:
            self:
              $ref: '#/components/schemas/desc_self'
            references:
              description: A list of user role references.
              type: array
              items:
                $ref: '#/components/schemas/roleReference'
            statistics:
              $ref: '#/components/schemas/pageStatistics'
        self:
          $ref: '#/components/schemas/desc_self'
        users:
          description: The list of users in this group.
          type: object
          readOnly: true
          properties:
            self:
              $ref: '#/components/schemas/desc_self'
            references:
              type: array
              description: The list of users in this group.
              items:
                $ref: '#/components/schemas/user'
      example:
        id: 2
        name: Global Watchers
        description: Can watch all events
        self: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups/2'
        roles:
          self: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles'
          references: []
        users:
          self: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/users'
          references: []
        applications: []
        customProperties: {}
        devicePermissions:
          '647100':
            - 'MANAGED_OBJECT:*:ADMIN'
    identityApiResource:
      type: object
      properties:
        externalId:
          description: 'Single external ID, represented by the type and the value of the external ID.'
          type: string
          format: uri
        externalIdsOfGlobalId:
          description: Represents a collection of external IDs for a specified global ID.
          type: string
          format: uri
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        externalId: 'https://<TENANT_DOMAIN>/identity/externalIds/{type}/{externaId}'
        externalIdsOfGlobalId: 'https://<TENANT_DOMAIN>/identity/globalIds/{managedObjectId}/externalIds'
        self: 'https://<TENANT_DOMAIN>/identity'
    inventoryApiResource:
      type: object
      properties:
        managedObjectsForFragmentType:
          description: 'Read-only collection of all managed objects with a particular fragment type or capability (placeholder {fragmentType}).'
          type: string
        managedObjectsForType:
          description: 'Read-only collection of all managed objects of a particular type (placeholder {type}).'
          type: string
        managedObjectsForListOfIds:
          description: 'Read-only collection of managed objects fetched for a given list of ids, for example, “ids=41,43,68”.'
          type: string
        managedObjects:
          description: Collection of all managed objects
          type: object
          properties:
            references:
              description: An array containing the referenced managed objects.
              type: array
              minItems: 0
              items:
                $ref: '#/components/schemas/managedObject'
            self:
              $ref: '#/components/schemas/desc_self'
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        managedObjectsForFragmentType: 'https://<TENANT_DOMAIN>/inventory/managedObjects?fragmentType={fragmentType}'
        managedObjectsForType: 'https://<TENANT_DOMAIN>/inventory/managedObjects?type={type}'
        managedObjectsForListOfIds: 'https://<TENANT_DOMAIN>/inventory/managedObjects?ids={ids}'
        managedObjects:
          references: []
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects'
        self: 'https://<TENANT_DOMAIN>/inventory'
    binaryInfo:
      description: Contains information about the file.
      type: object
      properties:
        name:
          description: Name of the binary object.
          type: string
          example: HelloWorld
        type:
          description: Media type of the file.
          type: string
          example: text/plain
    eventBinary:
      type: object
      properties:
        name:
          description: 'Name of the attachment. If it is not provided in the request, it will be set as the event ID.'
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
        source:
          description: Unique identifier of the event.
          type: string
          readOnly: true
        type:
          description: Media type of the attachment.
          type: string
      example:
        name: hello.txt
        self: 'https://<TENANT_DOMAIN>/event/events/102522209/binaries'
        source: '102522209'
        type: text/plain
    inventoryAssignmentReference:
      type: object
      description: An inventory role reference.
      properties:
        roles:
          description: An array of roles that are assigned to the managed object for the user.
          type: array
          items:
            type: object
            properties:
              id:
                description: A unique identifier for this inventory role.
                type: integer
                example: 4
    inventoryAssignment:
      type: object
      description: An inventory assignment.
      properties:
        id:
          description: A unique identifier for this inventory assignment.
          type: integer
          example: 1
          readOnly: true
        managedObject:
          description: A unique identifier for the managed object for which the roles are assigned.
          type: string
          example: '1105'
        roles:
          description: An array of roles that are assigned to the managed object for the user.
          type: array
          items:
            $ref: '#/components/schemas/inventoryRole'
        self:
          description: A URL linking to this resource.
          type: string
          format: uri
          readOnly: true
          example: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/roles/inventory/1'
    inventoryRole:
      description: An inventory role.
      type: object
      properties:
        description:
          description: A description for this inventory role.
          type: string
          example: Can restart devices.
        id:
          description: A unique identifier for this inventory role.
          type: integer
          readOnly: true
          example: 4
        name:
          description: The name of this inventory role.
          type: string
          example: 'Operations: Restart Device'
        permissions:
          description: A set of permissions for this inventory role.
          type: array
          items:
            $ref: '#/components/schemas/inventoryRolePermission'
        self:
          description: A URL linking to this resource.
          type: string
          format: uri
          readOnly: true
          example: 'https://<TENANT_DOMAIN>/user/inventoryroles/4'
    inventoryRolePermission:
      description: A permission object of an inventory role.
      type: object
      properties:
        id:
          description: A unique identifier for this permission.
          type: integer
          readOnly: true
        permission:
          description: The permission level.
          type: string
          enum:
            - ADMIN
            - READ
            - '*'
        scope:
          description: The scope of this permission.
          type: string
          enum:
            - ALARM
            - AUDIT
            - EVENT
            - MANAGED_OBJECT
            - MEASUREMENT
            - OPERATION
            - '*'
        type:
          description: 'The type of this permission. It can be the name of a fragment, for example, `c8y_Restart`.'
          type: string
      example:
        id: 7
        permission: ADMIN
        scope: OPERATION
        type: c8y_Restart
    binary:
      type: object
      properties:
        c8y_IsBinary:
          description: Fragment to identify this managed object as a file.
          type: object
        contentType:
          description: Media type of the file.
          type: string
        id:
          $ref: '#/components/schemas/desc_objectId'
        lastUpdated:
          description: Date and time of the file's last update.
          type: string
          format: date-time
          readOnly: true
        length:
          description: Size of the file in bytes.
          type: integer
        name:
          description: Name of the managed object. It is set from the `object` contained in the payload.
          type: string
        owner:
          description: Username of the owner of the file.
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
        type:
          description: Type of the managed object. It is set from the `object` contained in the payload.
          type: string
      example:
        c8y_IsBinary: {}
        contentType: text/plain
        id: '123153092'
        lastUpdated: '2020-10-15T22:15:17.267Z'
        length: 365
        name: HelloWorld
        owner: manga
        self: 'https://<TENANT_DOMAIN>/inventory/binaries/123153092'
        type: text/plain
    managedObject:
      type: object
      properties:
        creationTime:
          description: The date and time when the object was created.
          type: string
          format: date-time
          readOnly: true
        id:
          description: Unique identifier of the object.
          type: string
          readOnly: true
        lastUpdated:
          description: The date and time when the object was updated for the last time.
          type: string
          format: date-time
          readOnly: true
        name:
          $ref: '#/components/schemas/desc_objectName'
        owner:
          description: Username of the device's owner.
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
        type:
          description: 'The fragment type can be interpreted as _device class_, this means, devices with the same type can receive the same types of configuration, software, firmware and operations. The type value is indexed and is therefore used for queries.'
          type: string
        childAdditions:
          $ref: '#/components/schemas/objectChildAdditions'
        childAssets:
          $ref: '#/components/schemas/objectChildAssets'
        childDevices:
          $ref: '#/components/schemas/objectChildDevices'
        additionParents:
          $ref: '#/components/schemas/objectAdditionParents'
        assetParents:
          $ref: '#/components/schemas/objectAssetParents'
        deviceParents:
          $ref: '#/components/schemas/objectDeviceParents'
        c8y_IsDevice:
          description: A fragment which identifies this managed object as a device.
          type: object
        c8y_LatestMeasurements:
          $ref: '#/components/schemas/c8y_LatestMeasurements'
        c8y_IsDeviceGroup:
          description: A fragment which identifies this managed object as a device group.
          type: object
        c8y_DeviceTypes:
          type: array
          description: 'This fragment must be added in order to publish sample commands for a subset of devices sharing the same device type. If the fragment is present, the list of sample commands for a device type will be extended with the sample commands for the `c8y_DeviceTypes`. New sample commands created from the user interface will be created in the context of the `c8y_DeviceTypes`.'
          items:
            type: string
        c8y_SupportedOperations:
          type: array
          description: 'Lists the operations that are available for a particular device, so that applications can trigger the operations.'
          items:
            type: string
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties are known as custom fragments and can be of any type, for example, object or string. Each custom fragment is identified by a unique name.

          Review [Getting started > Technical concepts > Cumulocity's domain model > Inventory > Fragments > Naming conventions of fragments](https://www.cumulocity.com/docs/concepts/domain-model/#naming-conventions-of-fragments) in the Cumulocity user documentation as there are characters that can not be used when naming custom fragments.
        x-additionalPropertiesName: customFragments
      example:
        creationTime: '2017-12-12T22:09:06.881+01:00'
        id: '51994'
        lastUpdated: '2018-07-19T12:01:50.731Z'
        name: My tracking device
        owner: manga
        self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/51994'
        c8y_IsDevice: {}
        c8y_DeviceTypes:
          - deviceSubsetType
        c8y_SupportedOperations:
          - c8y_Restart
        c8y_LatestMeasurements:
          c8y_Temperature:
            T:
              value: 10
              unit: C
              time: '2020-06-09T09:48:40.008Z'
        childAdditions:
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/51994/childAdditions'
          references: []
        childAssets:
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/51994/childAssets'
          references: []
        childDevices:
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/51994/childDevices'
          references: []
        additionParents:
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/51994/additionParents'
          references: []
        assetParents:
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/51994/assetParents'
          references: []
        deviceParents:
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/51994/deviceParents'
          references: []
    managedObjectAvailability:
      type: object
      properties:
        deviceId:
          description: Identifier of the target device.
          type: string
        externalId:
          description: The identifier used in the external system that Cumulocity interfaces with.
          type: string
        lastMessage:
          type: string
          format: date-time
          description: The time when the device sent the last message to Cumulocity.
          example: '20130-03-19T00:00:00.000Z'
        interval:
          type: integer
          description: Required interval of monitored device
        dataStatus:
          $ref: '#/components/schemas/c8y_AvailabilityDataStatus'
        connectionStatus:
          $ref: '#/components/schemas/c8y_AvailabilityConnectionStatus'
    LatestMeasurementFragment:
      type: object
      readOnly: true
      description: |
        The read only fragment which contains the latest measurements series reported by the device.
        > **⚠️ Feature Preview:** The feature is part of the Latest Measurement feature which is still under public feature preview.
      additionalProperties:
        $ref: '#/components/schemas/LatestMeasurementValue'
    LatestMeasurementValue:
      type: object
      readOnly: true
      description: |
        The read only fragment which contains the latest measurements series values reported by the device.
        > **⚠️ Feature Preview:** The feature is part of the Latest Measurement feature which is still under public feature preview.
      required:
        - value
      properties:
        unit:
          description: The unit of the measurement series.
          type: string
          minLength: 1
          example: C
        time:
          description: The time of the measurement series.
          type: string
          format: date-time
          example: '2020-06-09T09:48:40.008Z'
        value:
          description: The value of the individual measurement.
          type: number
          example: 100
    c8y_LatestMeasurements:
      type: object
      readOnly: true
      description: |
        The read only fragment which contains the latest measurements reported by the device.
        The returned optionally only if the query parameter `withLatestValues=true` is used.
        > **⚠️ Feature Preview:** The feature is part of the Latest Measurement feature which is still under public feature preview.
      additionalProperties:
        $ref: '#/components/schemas/LatestMeasurementFragment'
      example:
        c8y_Temperature:
          T:
            value: 10
            unit: C
            time: '2020-06-09T09:48:40.008Z'
    managedObjectReferenceTuple:
      type: object
      properties:
        managedObject:
          description: Details of the referenced managed object.
          type: object
          properties:
            id:
              $ref: '#/components/schemas/desc_objectId'
            name:
              $ref: '#/components/schemas/desc_objectName'
            self:
              $ref: '#/components/schemas/desc_self'
        self:
          $ref: '#/components/schemas/desc_self'
    measurement:
      type: object
      required:
        - source
        - type
        - time
      properties:
        id:
          description: Unique identifier of the measurement.
          type: string
          readOnly: true
        self:
          $ref: '#/components/schemas/desc_self'
        source:
          description: The managed object to which the measurement is associated.
          type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/desc_objectId'
            self:
              $ref: '#/components/schemas/desc_self'
        time:
          description: The date and time when the measurement is created.
          type: string
          format: date-time
        type:
          description: Identifies the type of this measurement.
          type: string
        c8y_Steam:
          $ref: '#/components/schemas/c8y_Steam'
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties are known as custom fragments and can be of any type, for example, object or string. Each custom fragment is identified by a unique name.

          Review [Getting started > Technical concepts > Cumulocity's domain model > Inventory > Fragments > Naming conventions of fragments](https://www.cumulocity.com/docs/concepts/domain-model/#naming-conventions-of-fragments) in the Cumulocity user documentation as there are characters that can not be used when naming custom fragments.
        x-additionalPropertiesName: customFragments
      example:
        id: '20200301'
        self: 'https://<TENANT_DOMAIN>/measurement/measurements/20200301'
        source:
          id: '251982'
          self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/251982'
        time: '2020-03-19T12:03:27.845Z'
        type: c8y_TemperatureMeasurement
        c8y_Steam:
          Temperature:
            unit: C
            value: 100
    c8y_Steam:
      description: A type of measurement fragment.
      type: object
      properties:
        Temperature:
          type: object
          required:
            - value
          properties:
            unit:
              description: The unit of the measurement.
              type: string
              minLength: 1
              example: C
            value:
              description: The value of the individual measurement.
              type: number
              example: 100
    measurementApiResource:
      type: object
      properties:
        measurements:
          description: Collection of all measurements
          type: object
          properties:
            measurements:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/measurement'
              example: null
            self:
              $ref: '#/components/schemas/desc_self'
        measurementsForSource:
          description: 'Read-only collection of all measurements for a specific source object. The placeholder {source} must be a unique ID of an object in the inventory.'
          type: string
        measurementsForSourceAndType:
          description: Read-only collection of all measurements of a particular type and a specific source object.
          type: string
        measurementsForType:
          description: Read-only collection of all measurements of a particular type.
          type: string
        measurementsForValueFragmentType:
          description: Read-only collection of all measurements containing a particular fragment type.
          type: string
        measurementsForDate:
          description: Read-only collection of all measurements for a particular time range.
          type: string
        measurementsForSourceAndDate:
          description: Read-only collection of all measurements for a specific source object in a particular time range.
          type: string
        measurementsForDateAndFragmentType:
          description: Read-only collection of all measurements for a specific fragment type and a particular time range.
          type: string
        measurementsForSourceAndValueFragmentTypeAndValueFragmentSeries:
          description: 'Read-only collection of all measurements for a specific source object, particular fragment type and series, and an event type.'
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        measurements:
          self: 'https://<TENANT_DOMAIN>/measurement/measurements'
          measurements: []
        measurementsForSource: 'https://<TENANT_DOMAIN>/measurement/measurements?source={source}'
        measurementsForSourceAndType: 'https://<TENANT_DOMAIN>/measurement/measurements?source={source}&type={type}'
        measurementsForType: 'https://<TENANT_DOMAIN>/measurement/measurements?type={type}'
        measurementsForValueFragmentType: 'https://<TENANT_DOMAIN>/measurement/measurements?valueFragmentType={valueFragmentType}'
        measurementsForDate: 'https://<TENANT_DOMAIN>/measurement/measurements?dateFrom={dateFrom}&dateTo={dateTo}'
        measurementsForSourceAndDate: 'https://<TENANT_DOMAIN>/measurement/measurements?source={source}&dateFrom={dateFrom}&dateTo={dateTo}'
        measurementsForDateAndFragmentType: 'https://<TENANT_DOMAIN>/measurement/measurements?dateFrom={dateFrom}&dateTo={dateTo}&fragmentType={fragmentType}'
        measurementsForSourceAndValueFragmentTypeAndValueFragmentSeries: 'https://<TENANT_DOMAIN>/measurement/measurements?source={source}&valueFragmentType={valueFragmentType}&valueFragmentSeries={valueFragmentSeries}&type={type}'
        self: 'https://<TENANT_DOMAIN>/measurement'
    newDeviceRequest:
      type: object
      properties:
        id:
          description: External ID of the device.
          type: string
        groupId:
          description: ID of the group to which the device will be assigned.
          type: string
        type:
          description: Type of the device.
          type: string
        tenantId:
          description: Tenant who owns the device.
          type: string
          readOnly: true
        self:
          $ref: '#/components/schemas/desc_self'
        status:
          description: Status of this new device request.
          type: string
          enum:
            - WAITING_FOR_CONNECTION
            - PENDING_ACCEPTANCE
            - ACCEPTED
        owner:
          description: Owner of the device.
          type: string
          readOnly: true
        creationTime:
          description: Date and time when the device was created in the database.
          type: string
          format: date-time
          readOnly: true
        securityToken:
          type: string
          writeOnly: true
          description: |
            When accepting a device request, the security token is verified against the token submitted by the device when requesting credentials.
            See [Security token policy](https://www.cumulocity.com/docs/device-management-application/registering-devices/#security-token-policy) for details on configuration.
            See [Create device credentials](#operation/postDeviceCredentialsCollectionResource) for details on creating token for device registration.
            `securityToken` parameter can be added only when submitting `ACCEPTED` status.
      example:
        id: '54545454'
        self: 'https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/54545454'
        status: WAITING_FOR_CONNECTION
    objectAdditionParents:
      description: A collection of references to addition parent objects.
      type: object
      readOnly: true
      properties:
        references:
          description: An array with the references to addition parent objects.
          type: array
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          example: []
        self:
          description: Link to this resource's addition parent objects.
          type: string
          example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/additionParents'
    objectAssetParents:
      description: A collection of references to asset parent objects.
      type: object
      readOnly: true
      properties:
        references:
          description: An array with the references to asset parent objects.
          type: array
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          example: []
        self:
          description: Link to this resource's asset parent objects.
          type: string
          example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/assetParents'
    objectDeviceParents:
      description: A collection of references to device parent objects.
      type: object
      readOnly: true
      properties:
        references:
          description: An array with the references to parent objects.
          type: array
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          example: []
        self:
          description: Link to this resource's parent objects.
          type: string
          example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/deviceParents'
    objectChildAdditions:
      description: A collection of references to child additions.
      type: object
      readOnly: true
      properties:
        count:
          description: The total number of child additions. Only present if the value is greater than 0.
          type: integer
        references:
          description: An array with the references to child devices.
          type: array
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          example: []
        self:
          description: Link to this resource's child additions.
          type: string
          example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions'
    objectChildAssets:
      description: A collection of references to child assets.
      type: object
      readOnly: true
      properties:
        count:
          description: The total number of child assets. Only present if the value is greater than 0.
          type: integer
        references:
          description: An array with the references to child assets.
          type: array
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          example: []
        self:
          description: Link to this resource's child assets.
          type: string
          example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAssets'
    objectChildDevices:
      description: A collection of references to child devices.
      type: object
      readOnly: true
      properties:
        count:
          description: The total number of child devices. Only present if the value is greater than 0.
          type: integer
        references:
          description: An array with the references to child devices.
          type: array
          items:
            $ref: '#/components/schemas/managedObjectReferenceTuple'
          example: []
        self:
          description: Link to this resource's child devices.
          type: string
          example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childDevices'
    operation:
      type: object
      properties:
        bulkOperationId:
          description: Reference to a bulk operation ID if this operation was scheduled from a bulk operation.
          type: integer
          readOnly: true
        creationTime:
          description: Date and time when the operation was created in the database.
          type: string
          format: date-time
          readOnly: true
        deviceId:
          description: Identifier of the target device where the operation should be performed.
          type: string
        deviceExternalIDs:
          $ref: '#/components/schemas/externalIds'
        failureReason:
          description: Reason for the failure.
          type: string
        id:
          description: Unique identifier of this operation.
          type: string
          readOnly: true
        self:
          $ref: '#/components/schemas/desc_self'
        status:
          description: The status of the operation.
          type: string
          enum:
            - SUCCESSFUL
            - FAILED
            - EXECUTING
            - PENDING
      additionalProperties:
        description: |
          It is possible to add an arbitrary number of additional properties as a list of key-value pairs, for example, `"property1": {}`, `"property2": "value"`. These properties are known as custom fragments and can be of any type, for example, object or string. Each custom fragment is identified by a unique name.

          Review [Getting started > Technical concepts > Cumulocity's domain model > Inventory > Fragments > Naming conventions of fragments](https://www.cumulocity.com/docs/concepts/domain-model/#naming-conventions-of-fragments) in the Cumulocity user documentation as there are characters that can not be used when naming custom fragments.
        x-additionalPropertiesName: customFragments
      example:
        self: 'https://<TENANT_DOMAIN>/devicecontrol/operation/123'
        id: '123'
        creationTime: '2019-09-06T12:03:27.927+02:0'
        deviceId: '1234'
        deviceExternalIDs: {}
        bulkOperationId: 1237
        status: FAILED
        failureReason: Could not handle the operation
        com_cumulocity_model_WebCamDevice:
          name: Take a picture
          parameters:
            duration: 5s
            quality: HD
    operationReference:
      type: object
      properties:
        operation:
          description: The referenced operation.
          type: object
          properties:
            id:
              description: Unique identifier of this operation.
              type: string
              readOnly: true
            self:
              $ref: '#/components/schemas/desc_self'
        self:
          $ref: '#/components/schemas/desc_self'
    pageStatistics:
      description: Information about paging statistics.
      type: object
      readOnly: true
      properties:
        currentPage:
          description: The current page of the paginated results.
          type: integer
          minimum: 1
          example: 2
        pageSize:
          description: 'Indicates the number of objects that the collection may contain per page. The upper limit for one page is 2,000 objects.'
          type: integer
          minimum: 1
          maximum: 2000
          example: 5
        totalElements:
          description: The total number of results (elements).
          type: integer
          minimum: 0
          example: 12
        totalPages:
          description: |
            The total number of paginated results (pages).

            > **&#9432; Info:** This property is returned by default except when an operation retrieves all records where values are between an upper and lower boundary, for example, querying ranges using `dateFrom`–`dateTo`. In such cases, the query parameter `withTotalPages=true` should be used to include the total number of pages (at the expense of slightly slower performance).
          type: integer
          minimum: 0
          example: 3
    passwordChange:
      type: object
      required:
        - currentUserPassword
        - newPassword
      properties:
        currentUserPassword:
          description: The current password of the user performing the request.
          type: string
          format: password
          writeOnly: true
          example: SecretP@@sword!_
        newPassword:
          description: The new password to be set for the user performing the request.
          type: string
          format: password
          writeOnly: true
          example: New_SecretP@@sword!_
    retentionRule:
      type: object
      properties:
        dataType:
          description: The data type(s) to which the rule is applied.
          type: string
          enum:
            - ALARM
            - AUDIT
            - BULK_OPERATION
            - EVENT
            - MEASUREMENT
            - OPERATION
            - '*'
          default: '*'
        editable:
          description: Indicates whether the rule is editable or not. It can be updated only by the Management tenant.
          type: boolean
          default: true
        fragmentType:
          description: 'The fragment type(s) to which the rule is applied. Used by the data types EVENT, MEASUREMENT, OPERATION and BULK_OPERATION.'
          type: string
          default: '*'
        id:
          description: Unique identifier of the retention rule.
          type: string
          readOnly: true
        maximumAge:
          description: Maximum age expressed in number of days.
          type: integer
        self:
          $ref: '#/components/schemas/desc_self'
        source:
          description: The source(s) to which the rule is applied. Used by all data types.
          type: string
          default: '*'
        type:
          description: 'The type(s) to which the rule is applied. Used by the data types ALARM, AUDIT, EVENT and MEASUREMENT.'
          type: string
          default: '*'
      example:
        dataType: ALARM
        editable: true
        fragmentType: '*'
        id: '1569'
        maximumAge: 20
        self: 'https://<TENANT_DOMAIN>/retention/retentions/1569'
        source: '*'
        type: '*'
    role:
      description: A user role.
      type: object
      properties:
        id:
          description: A unique identifier for this user role.
          type: string
        name:
          description: The name of this user role.
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        id: ROLE_ALARM_ADMIN
        name: ROLE_ALARM_ADMIN
        self: 'https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN'
    userApiResource:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/desc_self'
        users:
          description: Collection of all users belonging to a given tenant.
          type: string
        userByName:
          description: Reference to a resource of type user.
          type: string
        currentUser:
          description: Reference to the resource of the logged in user.
          type: string
        groups:
          description: Collection of all users belonging to a given tenant.
          type: string
        groupByName:
          description: Reference to a resource of type group.
          type: string
        roles:
          description: Collection of all roles.
          type: string
      example:
        self: 'https://<TENANT_DOMAIN>/user'
        users: 'https://<TENANT_DOMAIN>/user/{tenantId}/users'
        userByName: 'https://<TENANT_DOMAIN>/user/{tenantId}/userByName/{username}'
        currentUser: 'https://<TENANT_DOMAIN>/user/currentUser'
        groups: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups'
        groupByName: 'https://<TENANT_DOMAIN>/user/{tenantId}/groupByName/{groupName}'
        roles: 'https://<TENANT_DOMAIN>/user/roles'
    user:
      type: object
      properties:
        applications:
          type: array
          description: A list of applications for this user.
          readOnly: true
          items:
            $ref: '#/components/schemas/application'
        customProperties:
          $ref: '#/components/schemas/customProperties'
        displayName:
          description: The user's display name in Cumulocity.
          type: string
        email:
          description: The user's email address.
          type: string
          format: email
        enabled:
          description: Indicates whether the user is enabled or not. Disabled users cannot log in or perform API requests.
          type: boolean
          default: true
        firstName:
          description: The user's first name.
          type: string
        groups:
          description: An object with a list of user groups.
          type: object
          readOnly: true
          properties:
            self:
              $ref: '#/components/schemas/desc_self'
            references:
              description: A list of user group references.
              type: array
              items:
                $ref: '#/components/schemas/groupReference'
              example: []
            statistics:
              $ref: '#/components/schemas/pageStatistics'
        id:
          description: A unique identifier for this user.
          type: string
          readOnly: true
        lastName:
          description: The user's last name.
          type: string
        lastPasswordChange:
          description: 'The date and time when the user''s password was last changed, in [ISO 8601 datetime format](https://www.w3.org/TR/NOTE-datetime).'
          type: string
          format: date-time
          readOnly: true
        newsletter:
          description: Indicates whether the user is subscribed to the newsletter or not.
          type: boolean
        owner:
          description: 'Identifier of the parent user. If present, indicates that a user belongs to a user hierarchy by pointing to its direct ancestor. Can only be set by users with role USER_MANAGEMENT_ADMIN during user creation. Otherwise it''s assigned automatically.'
          type: string
          readOnly: true
        password:
          description: |
            The user's password. Only Latin1 characters are allowed.

            If you do not specify a password when creating a new user with a POST request, it must contain the property `sendPasswordResetEmail` with a value of `true`.
          type: string
          format: password
          writeOnly: true
          minLength: 6
          maxLength: 32
        passwordStrength:
          description: 'Indicates the password strength. The value can be GREEN, YELLOW or RED for decreasing password strengths.'
          type: string
          enum:
            - GREEN
            - YELLOW
            - RED
          readOnly: true
        phone:
          description: The user's phone number.
          type: string
          format: phone
        roles:
          description: An object with a list of user roles.
          type: object
          readOnly: true
          properties:
            self:
              $ref: '#/components/schemas/desc_self'
            references:
              description: A list of user role references.
              type: array
              items:
                $ref: '#/components/schemas/roleReference'
            statistics:
              $ref: '#/components/schemas/pageStatistics'
        self:
          $ref: '#/components/schemas/desc_self'
        sendPasswordResetEmail:
          description: |
            When set to `true`, this field will cause Cumulocity to send a password reset email to the email address specified.

            If there is no password specified when creating a new user with a POST request, this must be specified and it must be set to `true`.
          type: boolean
          writeOnly: true
        shouldResetPassword:
          description: Indicates if the user should reset the password on the next login.
          type: boolean
          readOnly: true
        twoFactorAuthenticationEnabled:
          description: Indicates if the user has to use two-factor authentication to log in.
          type: boolean
          default: false
          readOnly: true
        userName:
          description: The user's username. It can have a maximum of 1000 characters.
          type: string
        devicePermissions:
          $ref: '#/components/schemas/desc_user_devicepermissions'
      example:
        self: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe'
        id: jdoe
        firstName: John
        lastName: Doe
        userName: jdoe
        phone: +1-541-754-3010
        displayName: John Doe
        email: johndoe@example.com
        lastPasswordChange: '2020-06-09T09:48:40.008Z'
        passwordStrength: GREEN
        shouldResetPassword: false
        twoFactorAuthenticationEnabled: false
        customProperties: {}
        effectiveRoles:
          self: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/roles'
          references:
            - id: ROLE_ALARM_ADMIN
              name: ROLE_ALARM_ADMIN
              self: 'https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN'
        enabled: true
        groups:
          self: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/groups'
          references: []
        applications: []
        devicePermissions:
          '647100':
            - 'MANAGED_OBJECT:*:READ'
    userTfaData:
      type: object
      properties:
        lastTfaRequestTime:
          description: Latest date and time when the user has used two-factor authentication to log in.
          type: string
          format: date-time
          readOnly: true
        strategy:
          description: Two-factor authentication strategy.
          type: string
          enum:
            - SMS
            - TOTP
        tfaEnabled:
          description: Indicates whether the user has enabled two-factor authentication or not.
          type: boolean
        tfaEnforced:
          description: Indicates whether two-factor authentication is enforced by the tenant admin or not.
          type: boolean
      example:
        tfaEnabled: false
        tfaEnforced: false
        strategy: TOTP
        lastTfaRequestTime: '2022-08-01T20:00:00.123Z'
    tenantTfaData:
      type: object
      properties:
        enabledOnSystemLevel:
          description: Indicates whether two-factor authentication is enabled on system level or not.
          type: boolean
          readOnly: true
        enabledOnTenantLevel:
          description: Indicates whether two-factor authentication is enabled on tenant level or not.
          type: boolean
          readOnly: true
        enforcedOnSystemLevel:
          description: Indicates whether two-factor authentication is enforced on system level or not.
          type: boolean
          readOnly: true
        enforcedUsersGroup:
          description: Two-factor authentication is enforced for the specified group.
          type: string
          readOnly: true
        strategy:
          description: Two-factor authentication strategy.
          type: string
          readOnly: true
          enum:
            - SMS
            - TOTP
        totpEnforcedOnTenantLevel:
          description: Indicates whether two-factor authentication is enforced on tenant level or not.
          type: boolean
          readOnly: true
      example:
        enabledOnSystemLevel: false
        enabledOnTenantLevel: true
        totpEnforcedOnTenantLevel: true
        enforcedOnSystemLevel: false
        enforcedUsersGroup: admins
        strategy: TOTP
    tenantTfaStrategy:
      type: object
      required:
        - strategy
      properties:
        strategy:
          description: Two-factor authentication strategy.
          type: string
          enum:
            - SMS
            - TOTP
      example:
        strategy: TOTP
    currentUserTotpSecretActivity:
      type: object
      required:
        - isActive
      properties:
        isActive:
          description: Indicates whether the two-factor authentication secret is active.
          type: boolean
          example: true
    currentUserTotpSecret:
      type: object
      properties:
        rawSecret:
          description: Secret used by two-factor authentication applications to generate the TFA codes.
          type: string
          readOnly: true
        secretQrUrl:
          description: URL used to set the two-factor authentication secret for the TFA application.
          type: string
          format: uri
          readOnly: true
      example:
        rawSecret: 5XLQP7HIKZBDH6ZZ
        secretQrUrl: 'https://chart.googleapis.com/chart?chs=200x200&chld=M%7C0&cht=qr&chl=otpauth%3A%2F%2Ftotp%2Fcumulocity.default.svc.cluster.local%3Aadmin%3Fsecret%3D5XLQP7HIKZBDH6ZZ%26issuer%3Dcumulocity.default.svc.cluster.local'
    currentUserTotpCode:
      type: object
      required:
        - code
      properties:
        code:
          description: Two-factor authentication code entered by the user to log in to the platform.
          type: string
          example: '123456'
    tenantApiResource:
      type: object
      properties:
        options:
          description: Collection of tenant options
          type: object
          properties:
            self:
              $ref: '#/components/schemas/desc_self'
            options:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/option'
        self:
          $ref: '#/components/schemas/desc_self'
        tenants:
          description: Collection of subtenants
          type: object
          properties:
            self:
              $ref: '#/components/schemas/desc_self'
            tenants:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/tenant'
        tenantApplications:
          description: Retrieves subscribed applications.
          type: string
        tenantApplicationForId:
          description: Represents an individual application reference that can be viewed.
          type: string
        tenantForId:
          description: Represents an individual tenant that can be viewed.
          type: string
        tenantOptionsForCategory:
          description: Represents a category of tenant options.
          type: string
        tenantOptionForCategoryAndKey:
          description: Retrieves a key of the category of tenant options.
          type: string
        tenantSystemOptions:
          description: Retrieves the tenant system options.
          type: string
        tenantSystemOptionsForCategoryAndKey:
          description: Retrieves the tenant system options based on category and key.
          type: string
      example:
        self: 'https://<TENANT_DOMAIN>/tenant'
        options:
          self: 'https://<TENANT_DOMAIN>/tenant/options'
          options: []
        tenants:
          self: 'https://<TENANT_DOMAIN>/tenant/tenants'
          tenants: []
        tenantApplications: 'https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications'
        tenantApplicationForId: 'https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}/applications/{applicationId}'
        tenantForId: 'https://<TENANT_DOMAIN>/tenant/tenants/{tenantId}'
        tenantOptionsForCategory: 'https://<TENANT_DOMAIN>/tenant/options/{category}'
        tenantOptionForCategoryAndKey: 'https://<TENANT_DOMAIN>/tenant/options/{category}/{key}'
        tenantSystemOptions: 'https://<TENANT_DOMAIN>/tenant/system/options'
        tenantSystemOptionsForCategoryAndKey: 'https://<TENANT_DOMAIN>/tenant/system/options/{category}/{key}'
    tenant:
      type: object
      properties:
        adminEmail:
          description: Email address of the tenant's administrator.
          type: string
          format: email
        adminName:
          description: |
            Username of the tenant's administrator.
            > **&#9432; Info:** When it is provided in the request body, also `adminEmail` and `adminPass` must be provided.
          type: string
          minLength: 1
          maxLength: 50
        adminPass:
          description: Password of the tenant's administrator.
          type: string
          format: password
          maxLength: 32
          writeOnly: true
        allowCreateTenants:
          description: Indicates if this tenant can create subtenants.
          type: boolean
          default: false
          readOnly: true
        applications:
          description: Collection of the subscribed applications.
          type: object
          readOnly: true
          properties:
            references:
              description: An array containing all subscribed applications.
              type: array
              items:
                $ref: '#/components/schemas/application'
            self:
              $ref: '#/components/schemas/desc_self'
        company:
          description: Tenant's company name.
          type: string
          minLength: 1
          maxLength: 256
        contactName:
          description: Name of the contact person.
          type: string
          minLength: 1
          maxLength: 30
        contactPhone:
          description: 'Phone number of the contact person, provided in the international format, for example, +48 123 456 7890.'
          type: string
          format: phone
        creationTime:
          description: The date and time when the tenant was created.
          type: string
          format: date-time
          readOnly: true
        customProperties:
          $ref: '#/components/schemas/customProperties'
        domain:
          description: URL of the tenant's domain. The domain name permits only the use of alphanumeric characters separated by dots `.` and hyphens `-`.
          type: string
          format: hostname
          minLength: 1
          maxLength: 256
        id:
          $ref: '#/components/schemas/desc_tenant_id'
        ownedApplications:
          description: Collection of the owned applications.
          type: object
          readOnly: true
          properties:
            references:
              description: An array containing all owned applications (only applications with availability MARKET).
              type: array
              items:
                $ref: '#/components/schemas/application'
            self:
              $ref: '#/components/schemas/desc_self'
        parent:
          description: ID of the parent tenant.
          type: string
          readOnly: true
        self:
          $ref: '#/components/schemas/desc_self'
        status:
          description: Current status of the tenant.
          type: string
          readOnly: true
          enum:
            - ACTIVE
            - SUSPENDED
          default: ACTIVE
      example:
        id: t07007007
        self: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007'
        adminEmail: john@doe.com
        adminName: johndoe
        allowCreateTenants: false
        applications:
          self: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007/applications'
          references: []
        company: ACME AG
        contactName: John Doe
        contactPhone: +52 333 567 1234
        creationTime: '2020-05-02T20:00:29.907Z'
        customProperties: {}
        domain: mytenant.cumulocity.com
        ownedApplications:
          self: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007/applications'
          references: []
        parent: t1511681
        status: ACTIVE
    option:
      description: A tuple storing tenant configuration.
      type: object
      properties:
        category:
          description: Name of the option category.
          type: string
          minLength: 1
        key:
          description: A unique identifier for this option.
          type: string
          minLength: 1
        value:
          description: Value of this option.
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        category: alarm.type.mapping
        key: temp_too_high
        value: CRITICAL|temperature too high
        self: 'https://<TENANT_DOMAIN>/tenant/options/alarm.type.mapping/temp_too_high'
    authConfigAccess:
      type: object
      properties:
        onlyManagementTenantAccess:
          description: Indicates whether the configuration is only accessible to the management tenant.
          type: boolean
          default: false
          example: false
    authConfig:
      description: Parameters determining the authentication process.
      type: object
      required:
        - type
        - providerName
      properties:
        accessTokenToUserDataMapping:
          description: SSO specific. Describes the fields in the access token from the external server containing user information.
          type: object
          properties:
            emailClaimName:
              description: The name of the field containing the user's email.
              type: string
              format: email
            firstNameClaimName:
              description: The name of the field containing the user's first name.
              type: string
            lastNameClaimName:
              description: The name of the field containing the user's last name.
              type: string
            phoneNumberClaimName:
              description: The name of the field containing the user's phone number.
              type: string
              format: phone
        audience:
          description: SSO specific. Token audience.
          type: string
          format: uri
        authorizationRequest:
          allOf:
            - $ref: '#/components/schemas/RequestRepresentation'
            - description: SSO specific. Request to the external authorization server used by the Cumulocity platform to obtain an authorization code.
        authenticationRestrictions:
          $ref: '#/components/schemas/BasicAuthenticationRestrictions'
        buttonName:
          description: SSO specific. Information for the UI about the name displayed on the external server login button.
          type: string
        clientId:
          description: SSO specific. The identifier of the Cumulocity tenant on the external authorization server.
          type: string
        grantType:
          description: The authentication configuration grant type identifier.
          type: string
          enum:
            - AUTHORIZATION_CODE
            - PASSWORD
        id:
          description: Unique identifier of this login option.
          type: string
        issuer:
          description: SSO specific. External token issuer.
          type: string
          format: uri
        logoutRequest:
          allOf:
            - $ref: '#/components/schemas/RequestRepresentation'
            - description: SSO specific. Request to the external authorization server used by the Cumulocity platform to logout the user.
        onlyManagementTenantAccess:
          description: Indicates whether the configuration is only accessible to the management tenant.
          type: boolean
        onNewUser:
          description: SSO specific. Describes the process of internal user creation during login with the external authorization server.
          type: object
          properties:
            dynamicMapping:
              description: Modern version of configuration of default groups and applications. This ensures backward compatibility.
              type: object
              properties:
                configuration:
                  description: Configuration of the mapping.
                  type: object
                  properties:
                    mapRolesOnlyForNewUser:
                      description: Indicates whether the mapping should be evaluated always or only during the first external login when the internal user is created.
                      type: boolean
                    manageRolesOnlyFromAccessMapping:
                      description: 'If set to `true`, dynamic access mapping is only managed for global roles, applications and inventory roles which are listed in the configuration. Others remain unchanged.'
                      type: boolean
                    mapFromIdToken:
                      description: 'If set to `true`, dynamic access mapping is performed using the claims from the id_token; otherwise, it is based on the access_token.'
                      type: boolean
                mappings:
                  description: Represents rules used to assign groups and applications.
                  type: array
                  items:
                    description: Represents information of mapping access to groups and applications.
                    type: object
                    properties:
                      when:
                        $ref: '#/components/schemas/JSONPredicateRepresentation'
                      thenApplications:
                        description: List of the applications' identifiers.
                        type: array
                        items:
                          type: integer
                      thenGroups:
                        description: List of the groups' identifiers.
                        type: array
                        items:
                          type: integer
                inventoryMappings:
                  description: Represents rules used to assign inventory roles.
                  type: array
                  items:
                    description: Represents information of mapping access to inventory roles.
                    type: object
                    properties:
                      when:
                        $ref: '#/components/schemas/JSONPredicateRepresentation'
                      thenInventoryRoles:
                        description: List of the OAuth inventory assignments.
                        type: array
                        items:
                          description: Represents inventory roles for a specific device group.
                          type: object
                          properties:
                            managedObject:
                              description: A unique identifier for the managed object for which the roles are assigned.
                              type: string
                            roleIds:
                              description: List of the inventory roles' identifiers.
                              type: array
                              items:
                                type: integer
        providerName:
          description: The name of the authentication provider.
          type: string
        redirectToPlatform:
          description: SSO specific. URL used for redirecting to the Cumulocity platform. Do not set or leave it empty to allow SSO flow to be controlled by client (UI) applications.
          type: string
          format: uri
        refreshRequest:
          allOf:
            - $ref: '#/components/schemas/RequestRepresentation'
            - description: SSO specific. Request to the external authorization server used by the Cumulocity platform to obtain a refresh token.
        self:
          $ref: '#/components/schemas/desc_self'
        sessionConfiguration:
          $ref: '#/components/schemas/OAuthSessionConfiguration'
        signatureVerificationConfig:
          type: object
          description: SSO specific and authorization server dependent. Describes the method of access token signature verification on the Cumulocity platform.
          properties:
            aad:
              description: AAD signature verification configuration.
              type: object
              properties:
                publicKeyDiscoveryUrl:
                  description: URL used to retrieve the public key used for signature verification.
                  type: string
                  format: uri
            adfsManifest:
              description: ADFS manifest signature verification configuration.
              type: object
              properties:
                manifestUrl:
                  description: The URI to the manifest resource.
                  type: string
                  format: uri
            jwks:
              description: The address of the endpoint which is used to retrieve the public key used to verify the JWT access token signature.
              type: object
              properties:
                jwksUrl:
                  description: The URI to the public key resource.
                  type: string
                  format: uri
            manual:
              description: Describes the process of verification of JWT access token with the public keys embedded in the provided X.509 certificates.
              type: object
              properties:
                certIdField:
                  description: The name of the field in the JWT access token containing the certificate identifier.
                  type: string
                certIdFromField:
                  description: Indicates whether the certificate identifier should be read from the JWT access token.
                  type: boolean
                certificates:
                  description: Details of the certificates.
                  type: object
                  properties:
                    alg:
                      description: The signing algorithm of the JWT access token.
                      type: string
                      enum:
                        - RSA
                        - PCKS
                    publicKey:
                      description: The public key certificate.
                      type: string
                    validFrom:
                      description: The validity start date of the certificate.
                      type: string
                      format: date-time
                    validTill:
                      description: The expiry date of the certificate.
                      type: string
                      format: date-time
        template:
          description: SSO specific. Template name used by the UI.
          type: string
        tokenRequest:
          allOf:
            - $ref: '#/components/schemas/RequestRepresentation'
            - description: SSO specific. Request to the external authorization server used by the Cumulocity platform to obtain an access token.
        type:
          description: The authentication configuration type. Note that the value is case insensitive.
          type: string
          enum:
            - BASIC
            - OAUTH2
            - OAUTH2_INTERNAL
        useIdToken:
          description: 'If set to `true`, user data and the userId are retrieved using the claims from the id_token; otherwise, they are based on the access_token.'
          type: boolean
        userIdConfig:
          type: object
          description: SSO specific. Points to the field in the obtained JWT access token that should be used as the username in the Cumulocity platform.
          properties:
            constantValue:
              description: Used only when `useConstantValue` is set to `true`.
              type: string
            jwtField:
              description: The name of the field containing the JWT.
              type: string
            useConstantValue:
              description: 'Not recommended. If set to `true`, all SSO users will share one account in the Cumulocity platform.'
              type: boolean
        userManagementSource:
          description: Indicates whether user data are managed internally by the Cumulocity platform or by an external server. Note that the value is case insensitive.
          type: string
          enum:
            - INTERNAL
            - REMOTE
        visibleOnLoginPage:
          description: Information for the UI if the respective authentication form should be visible for the user.
          type: boolean
        externalTokenConfig:
          type: object
          description: A configuration for authentication with an access token from the authorization server.
          properties:
            enabled:
              description: Indicates whether authentication is enabled or disabled.
              type: boolean
            userOrAppIdConfig:
              description: Points to the claim of the access token from the authorization server that must be used as the username in the Cumulocity platform.
              type: object
              properties:
                constantValue:
                  description: Used only if `useConstantValue` is set to `true`.
                  type: string
                jwtField:
                  description: The name of the field containing the JWT.
                  type: string
                useConstantValue:
                  description: 'Not recommended. If set to `true`, all users share a single account in the Cumulocity platform.'
                  type: boolean
            validationRequired:
              description: 'If set to `true`, the access token is validated against the authorization server by way of introspection or user info request.'
              type: boolean
            validationMethod:
              description: The method of validation of the access token.
              type: string
              enum:
                - INTROSPECTION
                - USERINFO
            tokenValidationRequest:
              description: Request to the external authorization server used by the Cumulocity platform to validate the access token.
              $ref: '#/components/schemas/RequestRepresentation'
            accessTokenValidityCheckIntervalInMinutes:
              description: The frequency (in Minutes) in which Cumulocity sends a validation request to authorization server. The recommended frequency is 1 minute.
              type: integer
      example:
        self: 'https://<TENANT_DOMAIN>/tenant/loginOptions/924997e5-863c-4532-96f9-cbe6dc5f8902'
        userManagementSource: INTERNAL
        type: OAUTH2_INTERNAL
        sessionConfiguration:
          absoluteTimeoutMillis: 7200000
          renewalTimeoutMillis: 3600000
          userAgentValidationRequired: false
          maximumNumberOfParallelSessions: 3
        id: 924997e5-863c-4532-96f9-cbe6dc5f8902
        providerName: Cumulocity
        visibleOnLoginPage: true
        grantType: PASSWORD
        onlyManagementTenantAccess: false
    loginForm:
      type: object
      properties:
        code:
          description: Used in case of SSO login. A code received from the external authentication server is exchanged to an internal access token.
          type: string
          example: MIIFezCCA2OgAwIBAgIUNU2ZnXIdu9aq+O7x2emLTgXgQEowDQYJKoZIhvc
        grant_type:
          description: Dependent on the authentication type. PASSWORD is used for OAI-Secure.
          type: string
          enum:
            - PASSWORD
            - AUTHORIZATION_CODE
          example: PASSWORD
        password:
          description: Used in case of OAI-Secure authentication.
          type: string
          example: Str0ngPassw0rd!2
        tfa_code:
          description: 'Current TFA code, sent by the user, if a TFA code is required to log in. Used in case of OAI-Secure authentication.'
          type: string
          example: '123433'
        username:
          description: Used in case of OAI-Secure authentication.
          type: string
          example: Admin
    JSONPredicateRepresentation:
      description: 'Represents a predicate for verification. It acts as a condition which is necessary to assign a user to the given groups, permit access to the specified applications or to assign specific inventory roles to device groups.'
      type: object
      properties:
        childPredicates:
          description: Nested predicates.
          type: array
          items:
            $ref: '#/components/schemas/JSONPredicateRepresentation'
          example: []
        operator:
          description: Operator executed on the parameter from the JWT access token claim pointed by `parameterPath` and the provided parameter `value`.
          type: string
          enum:
            - EQ
            - NEQ
            - GT
            - LT
            - GTE
            - LTE
            - IN
            - AND
            - OR
          example: AND
        parameterPath:
          description: Path to the claim from the JWT access token from the external authorization server.
          type: string
          example: group
        value:
          description: Given value used for parameter verification.
          type: string
          example: '2'
    RequestRepresentation:
      type: object
      properties:
        body:
          description: Body of the request.
          type: string
        headers:
          description: Headers of the request.
          type: object
          additionalProperties:
            description: |
              It is possible to add an arbitrary number of headers as a list of key-value string pairs, for example, `"header": "value"`.
            type: string
            x-additionalPropertiesName: requestHeaders
        method:
          description: HTTP request method.
          type: string
          enum:
            - GET
            - POST
        operation:
          description: Requested operation.
          type: string
          enum:
            - EXECUTE
            - REDIRECT
        requestParams:
          description: Parameters of the request.
          type: object
          additionalProperties:
            description: |
              It is possible to add an arbitrary number of parameters as a list of key-value string pairs, for example, `"parameter": "value"`.
            type: string
            x-additionalPropertiesName: requestParameters
        url:
          description: Target of the request described as a URL.
          type: string
          format: uri
    childOperationsAddOne:
      type: object
      required:
        - managedObject
      properties:
        managedObject:
          type: object
          required:
            - id
          properties:
            id:
              description: Unique identifier of the object.
              type: string
              example: <childId>
    childOperationsAddMultiple:
      type: object
      required:
        - references
      properties:
        references:
          description: An array containing the IDs of the managed objects (children).
          type: array
          nullable: false
          items:
            type: object
            properties:
              managedObject:
                type: object
                required:
                  - id
                properties:
                  id:
                    $ref: '#/components/schemas/desc_objectId'
          example:
            - managedObject:
                id: '128'
            - managedObject:
                id: '129'
    ApplicationReferenceCollection:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        references:
          description: An array containing all subscribed applications.
          type: array
          items:
            $ref: '#/components/schemas/application'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        prev: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007/applications?pageSize=5&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007/applications?pageSize=5&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007/applications?pageSize=5&currentPage=3'
        statistics:
          totalPages: 3
          currentPage: 2
          pageSize: 5
          totalElements: 10
        references:
          - availability: PRIVATE
            contextPath: myapplication
            id: '20200301'
            key: my-application-key
            name: my-application
            owner:
              self: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007'
              tenant:
                id: t07007007
            self: 'https://<TENANT_DOMAIN>/application/applications/20200301'
            type: HOSTED
    UserRoleCollection:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        roles:
          description: An array of user roles.
          type: array
          items:
            $ref: '#/components/schemas/role'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        prev: 'https://<TENANT_DOMAIN>/user/roles?pageSize=1&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/user/roles?pageSize=1&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/user/roles?pageSize=1&currentPage=3'
        roles:
          - id: ROLE_ALARM_ADMIN
            name: ROLE_ALARM_ADMIN
            self: 'https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN'
        statistics:
          totalPages: 3
          currentPage: 2
          pageSize: 1
    roleReference:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/role'
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        self: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe/roles/ROLE_ALARM_ADMIN'
        role:
          id: ROLE_ALARM_ADMIN
          name: ROLE_ALARM_ADMIN
          self: 'https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN'
    groupReference:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/group'
        self:
          $ref: '#/components/schemas/desc_self'
    RoleReferenceCollection:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        references:
          $ref: '#/components/schemas/roleReference'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        prev: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles?pageSize=5&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles?pageSize=5&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles?pageSize=5&currentPage=3'
        references:
          - self: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups/2/roles/ROLE_ALARM_ADMIN'
            role:
              id: ROLE_ALARM_ADMIN
              name: ROLE_ALARM_ADMIN
              self: 'https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN'
        statistics:
          total: 3
          currentPage: 2
          pageSize: 5
    InventoryRoleCollection:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        roles:
          description: An array of inventory roles.
          type: array
          items:
            $ref: '#/components/schemas/inventoryRole'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        prev: 'https://<TENANT_DOMAIN>/user/inventoryroles?pageSize=1&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/user/inventoryroles?pageSize=1&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/user/inventoryroles?pageSize=1&currentPage=3'
        roles:
          - description: Can restart devices.
            id: 4
            name: 'Operations: Restart Device'
            permissions:
              - id: 7
                permission: ADMIN
                scope: OPERATION
                type: c8y_Restart
            self: 'https://<TENANT_DOMAIN>/user/inventoryroles/4'
        statistics:
          totalPages: 3
          currentPage: 2
          pageSize: 1
    InventoryAssignmentCollection:
      type: object
      properties:
        self:
          allOf:
            - $ref: '#/components/schemas/desc_self'
            - example: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/roles/inventory'
        inventoryAssignments:
          description: An array of inventory assignments.
          type: array
          items:
            $ref: '#/components/schemas/inventoryAssignment'
    NewDeviceRequestCollection:
      type: object
      properties:
        newDeviceRequests:
          description: An array of new device requests.
          type: array
          items:
            $ref: '#/components/schemas/newDeviceRequest'
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        prev: 'https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests?pageSize=1&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests?pageSize=1&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests?pageSize=1&currentPage=3'
        newDeviceRequests:
          - id: '54545454'
            self: 'https://<TENANT_DOMAIN>/devicecontrol/newDeviceRequests/54545454'
            status: WAITING_FOR_CONNECTION
        statistics:
          total: 3
          currentPage: 2
          pageSize: 1
    TenantCollection:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        tenants:
          description: An array containing the results (subtenants) of the request.
          type: array
          items:
            $ref: '#/components/schemas/tenant'
      example:
        self: 'https://<TENANT_DOMAIN>/tenant/tenants?pageSize=1'
        tenants: []
        statistics:
          currentPage: 1
          pageSize: 1
          totalElements: 0
    CurrentTenant:
      type: object
      properties:
        allowCreateTenants:
          description: Indicates if this tenant can create subtenants.
          type: boolean
          default: false
        applications:
          description: Collection of the subscribed applications.
          type: object
          properties:
            references:
              description: An array containing all subscribed applications.
              type: array
              items:
                $ref: '#/components/schemas/application'
        customProperties:
          $ref: '#/components/schemas/customProperties'
        domainName:
          description: 'URL of the tenant''s domain. The domain name permits only the use of alphanumeric characters separated by dots `.`, hyphens `-` and underscores `_`.'
          type: string
          format: hostname
          minLength: 1
          maxLength: 256
        name:
          $ref: '#/components/schemas/desc_tenant_id'
        parent:
          description: ID of the parent tenant.
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        allowCreateTenants: false
        customProperties: {}
        domainName: mytenant.cumulocity.com
        name: t07007007
        self: 'https://<TENANT_DOMAIN>/currentTenant'
        applications:
          references: []
    UserCollection:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        users:
          description: An array of users.
          type: array
          items:
            $ref: '#/components/schemas/user'
      example:
        self: 'https://<TENANT_DOMAIN>/user/{tenantId}/users?pageSize=5&currentPage=1'
        users:
          - self: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe'
            firstName: John
            lastName: Doe
            userName: jdoe
            id: jdoe
            displayName: John Doe
            phone: +1-541-754-3010
            email: johndoe@example.com
            lastPasswordChange: '2020-06-09T09:48:40.008Z'
            shouldResetPassword: false
            passwordStrength: GREEN
            enabled: true
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
    UserReferenceCollection:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        references:
          description: An array of user references.
          type: array
          items:
            $ref: '#/components/schemas/userReference'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        self: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users?pageSize=5&currentPage=1'
        references:
          - self: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/jdoe'
            user:
              self: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe'
              firstName: John
              lastName: Doe
              userName: jdoe
              id: jdoe
              displayName: John Doe
              phone: +1-541-754-3010
              email: johndoe@example.com
              newsletter: true
              lastPasswordChange: '2020-06-09T09:48:40.008Z'
              shouldResetPassword: false
              passwordStrength: GREEN
              enabled: true
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
    userReference:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/desc_self'
        user:
          $ref: '#/components/schemas/user'
      example:
        self: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups/{groupId}/users/jdoe'
        user:
          self: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe'
          firstName: John
          lastName: Doe
          userName: jdoe
          id: jdoe
          displayName: John Doe
          phone: +1-541-754-3010
          email: johndoe@example.com
          newsletter: true
          lastPasswordChange: '2020-06-09T09:48:40.008Z'
          shouldResetPassword: false
          passwordStrength: GREEN
          enabled: true
    BulkOperationCollection:
      type: object
      properties:
        bulkOperations:
          description: An array of bulk operations.
          type: array
          items:
            $ref: '#/components/schemas/bulkOperation'
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        self: 'https://<TENANT_DOMAIN>/devicecontrol/bulkoperations?pageSize=5&currentPage=1'
        bulkOperations:
          - self: 'https://<TENANT_DOMAIN>/devicecontrol/bulkoperations/1237'
            id: '1237'
            groupId: '12359'
            startDate: '2022-05-01T22:21:22'
            creationRamp: 15
            operationPrototype:
              description: Restart device
              c8y_Restart: {}
            status: IN_PROGRESS
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
    PlatformApiResource:
      type: object
      properties:
        self:
          allOf:
            - $ref: '#/components/schemas/desc_self'
            - example: 'https://<TENANT_DOMAIN>/platform'
        alarm:
          $ref: '#/components/schemas/alarmsApiResource'
        audit:
          $ref: '#/components/schemas/auditApiResource'
        deviceControl:
          $ref: '#/components/schemas/deviceControlApiResource'
        event:
          $ref: '#/components/schemas/eventsApiResource'
        identity:
          $ref: '#/components/schemas/identityApiResource'
        inventory:
          $ref: '#/components/schemas/inventoryApiResource'
        measurement:
          $ref: '#/components/schemas/measurementApiResource'
        tenant:
          $ref: '#/components/schemas/tenantApiResource'
        user:
          $ref: '#/components/schemas/userApiResource'
    EventCollection:
      type: object
      properties:
        events:
          description: An array containing the results (events) of the request.
          type: array
          items:
            $ref: '#/components/schemas/event'
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        self: 'https://<TENANT_DOMAIN>/event/events?pageSize=5&currentPage=1'
        events:
          - creationTime: '2020-03-19T12:16:31.586Z'
            lastUpdated: '2020-03-20T13:46:11.526Z'
            id: '20200301'
            self: 'https://<TENANT_DOMAIN>/event/events/20200301'
            source:
              id: '251982'
              self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/251982'
            text: Location update.
            time: '2020-03-19T00:00:00.000Z'
            type: c8y_LocationUpdate
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
    UserGroupCollection:
      type: object
      properties:
        self:
          allOf:
            - $ref: '#/components/schemas/desc_self'
            - example: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups?pageSize=5&currentPage=2'
        groups:
          description: An array of user groups.
          type: array
          items:
            $ref: '#/components/schemas/group'
        prev:
          allOf:
            - $ref: '#/components/schemas/desc_prevPage'
            - example: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups?pageSize=5&currentPage=1'
        next:
          allOf:
            - $ref: '#/components/schemas/desc_nextPage'
            - example: 'https://<TENANT_DOMAIN>/user/{tenantId}/groups?pageSize=5&currentPage=3'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
    GroupReferenceCollection:
      type: object
      properties:
        self:
          allOf:
            - $ref: '#/components/schemas/desc_self'
            - example: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/groups?pageSize=5&currentPage=2'
        references:
          description: An array of group references.
          type: array
          items:
            $ref: '#/components/schemas/groupReference'
        prev:
          allOf:
            - $ref: '#/components/schemas/desc_prevPage'
            - example: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/groups?pageSize=5&currentPage=1'
        next:
          allOf:
            - $ref: '#/components/schemas/desc_nextPage'
            - example: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/{userId}/groups?pageSize=5&currentPage=3'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
    RetentionRuleCollection:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        retentionRules:
          description: An array containing the results (retention rules) of the request.
          type: array
          items:
            $ref: '#/components/schemas/retentionRule'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        prev: 'https://<TENANT_DOMAIN>/retention/retentions?pageSize=1&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/retention/retentions?pageSize=1&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/retention/retentions?pageSize=1&currentPage=3'
        retentionRules:
          - dataType: ALARM
            editable: true
            fragmentType: '*'
            id: '1569'
            maximumAge: 20
            self: 'https://<TENANT_DOMAIN>/retention/retentions/1569'
            source: '*'
            type: '*'
        statistics:
          totalPages: 3
          pageSize: 1
          currentPage: 2
    BinaryCollection:
      type: object
      properties:
        managedObjects:
          description: An array containing the results (managed objects) of the request.
          type: array
          items:
            $ref: '#/components/schemas/binary'
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        self: 'https://<TENANT_DOMAIN>/inventory/binaries?pageSize=5&currentPage=1'
        managedObjects:
          - c8y_IsBinary: {}
            contentType: text/plain
            id: '123153092'
            lastUpdated: '2020-10-15T22:15:17.267Z'
            length: 365
            name: HelloWorld
            owner: manga
            self: 'https://<TENANT_DOMAIN>/inventory/binaries/123153092'
            type: text/plain
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
    ManagedObjectCollection:
      type: object
      properties:
        managedObjects:
          description: An array containing the results (managed objects) of the request.
          type: array
          items:
            $ref: '#/components/schemas/managedObject'
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        self: 'https://<TENANT_DOMAIN>/inventory/managedObjects?pageSize=5&currentPage=1'
        managedObjects:
          - creationTime: '2017-12-12T22:09:06.881+01:00'
            id: '51994'
            lastUpdated: '2018-07-19T12:01:50.731Z'
            name: My tracking device
            owner: manga
            self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/51994'
            c8y_IsDevice: {}
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
    ManagedObjectReferenceCollection:
      type: object
      properties:
        prev:
          allOf:
            - $ref: '#/components/schemas/desc_prevPage'
            - example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions?pageSize=5&currentPage=1'
        self:
          allOf:
            - $ref: '#/components/schemas/desc_self'
            - example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions?pageSize=5&currentPage=2'
        next:
          allOf:
            - $ref: '#/components/schemas/desc_nextPage'
            - example: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/childAdditions?pageSize=5&currentPage=3'
        references:
          description: An array containing the details of all children (if any).
          type: array
          minItems: 0
          items:
            type: object
            properties:
              managedObject:
                $ref: '#/components/schemas/managedObject'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
    ManagedObjectReference:
      type: object
      properties:
        managedObject:
          $ref: '#/components/schemas/managedObject'
        self:
          $ref: '#/components/schemas/desc_self'
    OperationCollection:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        operations:
          description: An array of operations.
          type: array
          items:
            $ref: '#/components/schemas/operation'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        self: 'https://<TENANT_DOMAIN>/devicecontrol/operations?pageSize=5&currentPage=1'
        operations:
          - self: 'https://<TENANT_DOMAIN>/devicecontrol/operation/1234'
            id: '1234'
            creationTime: '2021-09-06T12:03:27.927+02:0'
            deviceId: '4398'
            deviceExternalIDs: {}
            status: FAILED
            failureReason: Could not handle the operation
        statistics:
          totalPages: 1
          pageSize: 5
          currentPage: 1
    ApplicationCollection:
      type: object
      properties:
        applications:
          description: An array of applications.
          type: array
          items:
            $ref: '#/components/schemas/application'
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        prev: 'https://<TENANT_DOMAIN>/application/applications?pageSize=1&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/application/applications?pageSize=1&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/application/applications?pageSize=1&currentPage=3'
        applications:
          - availability: PRIVATE
            contextPath: myapplication
            id: '20200301'
            key: my-application-key
            name: my-application
            owner:
              self: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007'
              tenant:
                id: t07007007
            self: 'https://<TENANT_DOMAIN>/application/applications/20200301'
            type: HOSTED
        statistics:
          totalPages: 10
          pageSize: 1
          currentPage: 2
    ApplicationVersionCollection:
      type: object
      properties:
        versions:
          description: An array of application versions.
          type: array
          items:
            $ref: '#/components/schemas/ApplicationVersion'
      example:
        versions:
          - version: '1.0'
            binaryId: '8276135'
            tags:
              - tag-1
              - latest
    ApplicationVersion:
      type: object
      properties:
        version:
          description: Unique identifier of the version.
          type: string
        binaryId:
          description: Unique identifier of the binary file assigned to the version.
          type: string
        tag:
          description: Tag assigned to the version. Version tags must be unique across all versions and version fields of application versions.
          type: array
          items:
            type: string
      example:
        version: '1.0'
        binaryId: '315165'
        tags:
          - tag-1
          - latest
    ApplicationVersionTag:
      type: object
      required:
        - tags
      properties:
        tags:
          description: Tag assigned to the version. Version tags must be unique across all versions and version fields of application versions.
          type: array
          items:
            type: string
          example:
            - tag-1
            - latest
    SupportedMeasurements:
      type: object
      properties:
        c8y_SupportedMeasurements:
          description: An array containing all supported measurements of the specified managed object.
          type: array
          items:
            type: string
          example:
            - c8y_MemoryMeasurement
            - c8y_CPUMeasurement
    SupportedSeries:
      type: object
      properties:
        c8y_SupportedSeries:
          description: An array containing all supported measurement series of the specified device.
          type: array
          items:
            type: string
          example:
            - c8y_MemoryMeasurement.Total
            - c8y_CPUMeasurement.Workload
            - c8y_MemoryMeasurement.Used
    ManagedObjectUser:
      type: object
      properties:
        enabled:
          description: Specifies if the device's owner is enabled or not.
          type: boolean
        self:
          $ref: '#/components/schemas/desc_self'
        userName:
          description: The username of the device's owner.
          type: string
          minLength: 1
          readOnly: true
      example:
        self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/{id}/user'
        userName: manga
        enabled: true
    MeasurementSeries:
      type: object
      properties:
        values:
          description: 'Each property contained here is a date taken from the measurement and it contains an array of objects specifying `min` and `max` pair of values. Each pair corresponds to a single series object in the `series` array. If there is no aggregation used, `min` is equal to `max` in every pair.'
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/MeasurementSeriesValue'
          example:
            '2020-12-04T17:33:01.538+01:00':
              - min: 13.37
                max: 13.37
        series:
          description: An array containing the type of series and units.
          type: array
          items:
            $ref: '#/components/schemas/measurementFragmentSeries'
          example:
            - unit: m/s2
              name: acceleration
              type: c8y_AccelerationMeasurement
        truncated:
          description: 'If there were more than 5000 values, the final result was truncated.'
          type: boolean
          example: false
    MeasurementSeriesValue:
      type: object
      properties:
        min:
          type: number
        max:
          type: number
    measurementFragmentSeries:
      type: object
      properties:
        unit:
          description: The unit of the measurement.
          type: string
        name:
          description: The name of the measurement.
          type: string
        type:
          description: The type of measurement.
          type: string
    AlarmCollection:
      type: object
      properties:
        alarms:
          description: An array containing the results (alarms) of the request.
          type: array
          items:
            $ref: '#/components/schemas/alarm'
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        prev: 'https://<TENANT_DOMAIN>/alarm/alarms?pageSize=1&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/alarm/alarms?pageSize=1&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/alarm/alarms?pageSize=1&currentPage=3'
        alarms:
          - count: 1
            creationTime: '2020-03-19T12:16:31.586Z'
            lastUpdated: '2020-03-20T13:41:39.678Z'
            id: '20200301'
            self: 'https://<TENANT_DOMAIN>/alarm/alarms/20200301'
            severity: MAJOR
            source:
              id: '251982'
              name: My tracking device
              self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/251982'
            status: ACTIVE
            text: No data received from the device within the required interval.
            time: '2020-03-19T00:00:00.000Z'
            type: c8y_UnavailabilityAlarm
        statistics:
          totalPages: 10
          pageSize: 1
          currentPage: 2
    ApplicationApiResource:
      type: object
      properties:
        applications:
          description: Collection of all applications..
          type: string
        applicationById:
          description: A reference to a resource of type Application.
          type: string
        applicationsByName:
          description: Read-only collection of all applications with a particular name.
          type: string
        applicationsByTenant:
          description: Read-only collection of all applications subscribed by a particular tenant.
          type: string
        applicationsByOwner:
          description: Read-only collection of all applications owned by a particular tenant.
          type: string
        applicationsByUser:
          description: Read-only collection of all applications owned by a particular user.
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
      example:
        applications: 'https://<TENANT_DOMAIN>/application/applications'
        applicationById: 'https://<TENANT_DOMAIN>/application/applications/{id}'
        applicationsByName: 'https://<TENANT_DOMAIN>/application/applicationsByName/{name}'
        applicationsByTenant: 'https://<TENANT_DOMAIN>/application/applicationsByTenant/{tenantId}'
        applicationsByOwner: 'https://<TENANT_DOMAIN>/application/applicationsByOwner/{tenantId}'
        applicationsByUser: 'https://<TENANT_DOMAIN>/application/applicationsByUser/{username}'
        self: 'https://<TENANT_DOMAIN>/application'
    ApplicationBinaries:
      type: object
      properties:
        attachments:
          description: An array of attachments.
          type: array
          items:
            type: object
            properties:
              contextPath:
                description: The application context path.
                type: string
                example: tracking
              created:
                description: The date and time when the attachment was created.
                type: string
                format: date-time
                example: '2020-09-09T13:23:57.744Z'
              description:
                description: A description for the attachment.
                type: string
                example: Sample description
              downloadUrl:
                description: A download URL for the attachment.
                type: string
                example: 'http://example.com'
              id:
                description: The ID of the attachment.
                type: string
                example: '30874797'
              length:
                description: 'The length of the attachment, in bytes.'
                type: integer
                example: 5262152
              name:
                description: The name of the attachment.
                type: string
                example: tracking.zip
    ApplicationUserCollection:
      type: object
      properties:
        users:
          description: A list of users who are subscribed to the current application.
          type: array
          items:
            description: A user who is subscribed to the current application.
            type: object
            properties:
              name:
                description: The username.
                type: string
                example: service_hello_world
              password:
                description: The user password.
                type: string
                format: password
                example: s3cr3tp4ssw0rd
              tenant:
                description: The user tenant.
                type: string
                example: t0700700777777
    MeasurementCollection:
      type: object
      required:
        - measurements
      properties:
        measurements:
          description: An array containing the measurements of the request.
          type: array
          items:
            $ref: '#/components/schemas/measurement'
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/pageStatistics'
      example:
        prev: 'https://<TENANT_DOMAIN>/measurement/measurements?pageSize=1&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/measurement/measurements?pageSize=1&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/measurement/measurements?pageSize=1&currentPage=3'
        measurements:
          - id: '20200301'
            self: 'https://<TENANT_DOMAIN>/measurement/measurements/20200301'
            source:
              id: '251982'
              self: 'https://<TENANT_DOMAIN>/inventory/managedObjects/251982'
            time: '2020-03-19T12:03:27.845Z'
            type: c8y_TemperatureMeasurement
            c8y_Steam:
              Temperature:
                unit: C
                value: 100
        statistics:
          totalPages: 10
          pageSize: 1
          currentPage: 2
    BootstrapUser:
      type: object
      properties:
        name:
          type: string
          description: The bootstrap user tenant username.
          example: servicebootstrap_thermo-micro
        password:
          type: string
          description: The bootstrap user tenant password.
          format: password
          example: 9IK31Y4zqnmgQqEC1JmMI1E95Cc7yi6j
        tenant:
          type: string
          description: The bootstrap user tenant ID.
          example: t07007007
    SubscribedApplicationReference:
      type: object
      required:
        - application
      properties:
        application:
          description: The application to be subscribed to.
          type: object
          required:
            - self
          properties:
            self:
              type: string
              description: A URL linking to this resource.
              example: 'https://<TENANT_DOMAIN>/application/applications/20200301'
    ApplicationReference:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/desc_self'
        application:
          $ref: '#/components/schemas/application'
    SubscribedRole:
      type: object
      properties:
        role:
          type: object
          description: An object with a role reference URL.
          properties:
            self:
              type: string
              description: A URL linking to this resource.
              example: 'https://<TENANT_DOMAIN>/user/roles/ROLE_ALARM_ADMIN'
    SubscribedUser:
      type: object
      properties:
        user:
          type: object
          description: An object with a user reference URL.
          properties:
            self:
              type: string
              description: A URL linking to this resource.
              example: 'https://<TENANT_DOMAIN>/user/{tenantId}/users/jdoe'
    TenantUsageStatisticsCollection:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        usageStatistics:
          description: An array containing the tenant usage statistics.
          type: array
          items:
            $ref: '#/components/schemas/DailyUsageStatistics'
      example:
        prev: 'https://<TENANT_DOMAIN>/tenant/statistics?pageSize=1&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/tenant/statistics?pageSize=1&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/tenant/statistics?pageSize=1&currentPage=3'
        usageStatistics:
          - alarmsCreatedCount: 0
            alarmsUpdatedCount: 0
            day: '2020-01-21T00:00:00.000Z'
            deviceCount: 1
            deviceEndpointCount: 1
            deviceRequestCount: 1
            deviceWithChildrenCount: 1
            eventsCreatedCount: 0
            eventsUpdatedCount: 0
            inventoriesCreatedCount: 2
            inventoriesUpdatedCount: 0
            measurementsCreatedCount: 0
            operationsCreatedCount: 1
            operationsUpdatedCount: 0
            requestCount: 127
            resources:
              cpu: 0
              memory: 0
              usedBy: []
            self: 'http://<TENANT_DOMAIN>/tenant/statistics/5563820_20210121'
            storageSize: 39339
            subscribedApplications:
              - report-agent
              - devicemanagement
              - administration
              - device-simulator
            totalResourceCreateAndUpdateCount: 2
        statistics:
          totalPages: 10
          pageSize: 1
          currentPage: 2
    DailyUsageStatistics:
      description: Daily usage statistics.
      type: object
      properties:
        alarmsCreatedCount:
          description: Number of created alarms.
          type: integer
          minimum: 0
        alarmsUpdatedCount:
          description: Number of updates made to the alarms.
          type: integer
          minimum: 0
        day:
          description: Date of this usage statistics object.
          type: string
          format: date-time
        deviceCount:
          description: 'Number of devices in the tenant identified by the fragment `c8y_IsDevice`. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
        deviceEndpointCount:
          description: 'Number of devices which do not have child devices. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
        deviceRequestCount:
          description: |
            Number of requests that were issued only by devices against the tenant. Updated every 5 minutes. The following requests are not included:

            * Requests made to <kbd>/user</kbd>, <kbd>/tenant</kbd> and <kbd>/application</kbd> APIs
            * Application related requests (with `X-Cumulocity-Application-Key` header)
          type: integer
          minimum: 0
        deviceWithChildrenCount:
          description: 'Number of devices with children. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
        eventsCreatedCount:
          description: Number of created events.
          type: integer
          minimum: 0
        eventsUpdatedCount:
          description: Number of updates made to the events.
          type: integer
          minimum: 0
        inventoriesCreatedCount:
          description: Number of created managed objects.
          type: integer
          minimum: 0
        inventoriesUpdatedCount:
          description: Number of updates made to the managed objects.
          type: integer
          minimum: 0
        measurementsCreatedCount:
          description: |
            Number of created measurements.

            > **&#9432; Info:** Bulk creation of measurements is handled in a way that each measurement is counted individually.
          type: integer
          minimum: 0
        operationsCreatedCount:
          description: Number of created operations.
          type: integer
          minimum: 0
        operationsUpdatedCount:
          description: Number of updates made to the operations.
          type: integer
          minimum: 0
        requestCount:
          description: |
            Number of requests that were made against the tenant. Updated every 5 minutes. The following requests are not included:

            *  Internal SmartREST requests used to resolve templates
            *  Internal SLA monitoring requests
            *  Calls to any <kbd>/health</kbd> endpoint
            *  Device bootstrap process requests related to configuring and retrieving device credentials
            *  Microservice SDK internal calls for applications and subscriptions
          type: integer
          minimum: 0
        resources:
          $ref: '#/components/schemas/UsageStatisticsResources'
        self:
          $ref: '#/components/schemas/desc_self'
        storageSize:
          description: 'Database storage in use, specified in bytes. It is affected by your retention rules and by the regularly running database optimization functions in Cumulocity. If the size decreases, it does not necessarily mean that data was deleted. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
        subscribedApplications:
          description: 'Names of the tenant subscribed applications. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: array
          items:
            type: string
        totalResourceCreateAndUpdateCount:
          description: Sum of all inbound transfers.
          type: integer
          minimum: 0
      example:
        alarmsCreatedCount: 0
        alarmsUpdatedCount: 0
        day: '2020-01-21T00:00:00.000Z'
        deviceCount: 1
        deviceEndpointCount: 1
        deviceRequestCount: 1
        deviceWithChildrenCount: 1
        eventsCreatedCount: 0
        eventsUpdatedCount: 0
        inventoriesCreatedCount: 2
        inventoriesUpdatedCount: 0
        measurementsCreatedCount: 0
        operationsCreatedCount: 2
        operationsUpdatedCount: 1
        requestCount: 127
        resources:
          cpu: 0
          memory: 0
          usedBy: []
        self: 'http://<TENANT_DOMAIN>/tenant/statistics/5563820_20210121'
        storageSize: 39339
        subscribedApplications:
          - report-agent
          - devicemanagement
          - administration
          - device-simulator
        totalResourceCreateAndUpdateCount: 2
    SummaryTenantUsageStatistics:
      description: Summary of the usage statistics.
      type: object
      properties:
        alarmsCreatedCount:
          description: Number of created alarms.
          type: integer
          minimum: 0
          example: 0
        alarmsUpdatedCount:
          description: Number of updates made to the alarms.
          type: integer
          minimum: 0
          example: 0
        day:
          description: Date of this usage statistics summary.
          type: string
          format: date-time
          example: '2021-09-09T00:00:00.000Z'
        deviceCount:
          description: 'Number of devices in the tenant identified by the fragment `c8y_IsDevice`. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
          example: 5
        deviceEndpointCount:
          description: 'Number of devices which do not have child devices. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
          example: 4
        deviceRequestCount:
          description: |
            Number of requests that were issued only by devices against the tenant. Updated every 5 minutes. The following requests are not included:

            * Requests made to <kbd>/user</kbd>, <kbd>/tenant</kbd> and <kbd>/application</kbd> APIs
            * Application related requests (with `X-Cumulocity-Application-Key` header)
          type: integer
          minimum: 0
          example: 546
        deviceWithChildrenCount:
          description: 'Number of devices with children. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
          example: 5
        eventsCreatedCount:
          description: Number of created events.
          type: integer
          minimum: 0
          example: 0
        eventsUpdatedCount:
          description: Number of updates made to the events.
          type: integer
          minimum: 0
          example: 0
        inventoriesCreatedCount:
          description: Number of created managed objects.
          type: integer
          minimum: 0
          example: 6
        inventoriesUpdatedCount:
          description: Number of updates made to the managed objects.
          type: integer
          minimum: 0
          example: 4
        measurementsCreatedCount:
          description: |
            Number of created measurements.

            > **&#9432; Info:** Bulk creation of measurements is handled in a way that each measurement is counted individually.
          type: integer
          minimum: 0
          example: 1
        operationsCreatedCount:
          description: Number of created operations.
          type: integer
          minimum: 0
          example: 3
        operationsUpdatedCount:
          description: Number of updates made to the operations.
          type: integer
          minimum: 0
          example: 2
        requestCount:
          description: |
            Number of requests that were made against the tenant. Updated every 5 minutes. The following requests are not included:

            *  Internal SmartREST requests used to resolve templates
            *  Internal SLA monitoring requests
            *  Calls to any <kbd>/health</kbd> endpoint
            *  Device bootstrap process requests related to configuring and retrieving device credentials
            *  Microservice SDK internal calls for applications and subscriptions
          type: integer
          minimum: 0
          example: 2355
        resources:
          $ref: '#/components/schemas/UsageStatisticsResources'
        storageSize:
          description: 'Database storage in use, specified in bytes. It is affected by your retention rules and by the regularly running database optimization functions in Cumulocity. If the size decreases, it does not necessarily mean that data was deleted. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
          example: 34231
        subscribedApplications:
          description: 'Names of the tenant subscribed applications. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: array
          items:
            type: string
          example:
            - report-agent
            - devicemanagement
            - administration
            - device-simulator
        totalResourceCreateAndUpdateCount:
          description: Sum of all inbound transfers.
          type: integer
          minimum: 0
          example: 11
    SummaryAllTenantsUsageStatisticsCollection:
      description: Collection of all tenants usage statistics summaries.
      type: array
      items:
        $ref: '#/components/schemas/SummaryAllTenantsUsageStatistics'
    SummaryAllTenantsUsageStatistics:
      type: object
      properties:
        alarmsCreatedCount:
          description: Number of created alarms.
          type: integer
          minimum: 0
          example: 0
        alarmsUpdatedCount:
          description: Number of updates made to the alarms.
          type: integer
          minimum: 0
          example: 0
        creationTime:
          description: Date and time of the tenant's creation.
          type: string
          format: date-time
          example: '2020-11-26T12:38:51.443Z'
        deviceCount:
          description: 'Number of devices in the tenant identified by the fragment `c8y_IsDevice`. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
          example: 5
        deviceEndpointCount:
          description: 'Number of devices which do not have child devices. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
          example: 4
        deviceRequestCount:
          description: |
            Number of requests that were issued only by devices against the tenant. Updated every 5 minutes. The following requests are not included:

            * Requests made to <kbd>/user</kbd>, <kbd>/tenant</kbd> and <kbd>/application</kbd> APIs
            * Application related requests (with `X-Cumulocity-Application-Key` header)
          type: integer
          minimum: 0
          example: 546
        deviceWithChildrenCount:
          description: 'Number of devices with children. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
          example: 5
        externalReference:
          description: Tenant external reference.
          type: string
          example: ''
        eventsCreatedCount:
          description: Number of created events.
          type: integer
          minimum: 0
          example: 0
        eventsUpdatedCount:
          description: Number of updates made to the events.
          type: integer
          minimum: 0
          example: 0
        inventoriesCreatedCount:
          description: Number of created managed objects.
          type: integer
          minimum: 0
          example: 6
        inventoriesUpdatedCount:
          description: Number of updates made to the managed objects.
          type: integer
          minimum: 0
          example: 4
        measurementsCreatedCount:
          description: |
            Number of created measurements.

            > **&#9432; Info:** Bulk creation of measurements is handled in a way that each measurement is counted individually.
          type: integer
          minimum: 0
          example: 1
        operationsCreatedCount:
          description: Number of created operations.
          type: integer
          minimum: 0
          example: 3
        operationsUpdatedCount:
          description: Number of updates made to the operations.
          type: integer
          minimum: 0
          example: 2
        parentTenantId:
          description: ID of the parent tenant.
          type: string
          readOnly: true
          example: management
        peakDeviceCount:
          description: Peak value of `deviceCount` calculated for the requested time period of the summary.
          type: integer
          example: 5
        peakDeviceWithChildrenCount:
          description: Peak value of `deviceWithChildrenCount` calculated for the requested time period of the summary.
          type: integer
          example: 5
        peakStorageSize:
          description: 'Peak value of used storage size in bytes, calculated for the requested time period of the summary.'
          type: integer
          example: 43084
        requestCount:
          description: |
            Number of requests that were made against the tenant. Updated every 5 minutes. The following requests are not included:

            *  Internal SmartREST requests used to resolve templates
            *  Internal SLA monitoring requests
            *  Calls to any <kbd>/health</kbd> endpoint
            *  Device bootstrap process requests related to configuring and retrieving device credentials
            *  Microservice SDK internal calls for applications and subscriptions
          type: integer
          minimum: 0
          example: 2355
        resources:
          $ref: '#/components/schemas/UsageStatisticsResources'
        storageSize:
          description: 'Database storage in use, specified in bytes. It is affected by your retention rules and by the regularly running database optimization functions in Cumulocity. If the size decreases, it does not necessarily mean that data was deleted. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: integer
          minimum: 0
          example: 34231
        subscribedApplications:
          description: 'Names of the tenant subscribed applications. Updated only three times a day starting at 8:57, 16:57 and 23:57.'
          type: array
          items:
            type: string
          example:
            - report-agent
            - devicemanagement
            - administration
            - device-simulator
        tenantCompany:
          description: The tenant's company name.
          type: string
          minLength: 1
          maxLength: 256
          example: ACME AG
        tenantCustomProperties:
          $ref: '#/components/schemas/customProperties'
        tenantDomain:
          description: 'URL of the tenant''s domain. The domain name permits only the use of alphanumeric characters separated by dots `.`, hyphens `-` and underscores `_`.'
          type: string
          format: hostname
          minLength: 1
          maxLength: 256
          example: mytenant.cumulocity.com
        tenantId:
          $ref: '#/components/schemas/desc_tenant_id'
        totalResourceCreateAndUpdateCount:
          description: Sum of all inbound transfers.
          type: integer
          minimum: 0
          example: 11
    UsageStatisticsResources:
      description: Resources usage for each subscribed microservice application.
      type: object
      properties:
        cpu:
          description: 'Total number of CPU usage for tenant microservices, specified in CPU milliseconds (1000m = 1 CPU).'
          type: integer
          minimum: 0
        memory:
          description: 'Total number of memory usage for tenant microservices, specified in MB.'
          type: integer
          minimum: 0
        usedBy:
          description: Collection of resources usage for each microservice.
          type: array
          items:
            $ref: '#/components/schemas/UsageStatisticsResourcesUsedBy'
      example:
        cpu: 0
        memory: 0
        usedBy: []
    UsageStatisticsResourcesUsedBy:
      type: object
      properties:
        cause:
          description: Reason for calculating statistics of the specified microservice.
          type: string
          minLength: 1
        cpu:
          description: Number of CPU usage for a single microservice.
          type: integer
          minimum: 0
        memory:
          description: Number of memory usage for a single microservice.
          type: integer
          minimum: 0
        name:
          description: Name of the microservice.
          type: string
          minLength: 1
    DeviceStatistics:
      description: Statistics of a specific device (identified by an ID).
      type: object
      properties:
        count:
          description: 'Sum of measurements, events and alarms created and updated for the specified device.'
          type: integer
          minimum: 0
        deviceId:
          description: Unique identifier of the device.
          type: string
          minLength: 1
        deviceParents:
          description: List of unique identifiers of parents for the corresponding device. Available only with monthly data.
          type: array
          nullable: true
          items:
            description: Unique identifier of a parent.
            type: string
        deviceType:
          description: Value of the `type` field from the corresponding device. Available only with monthly data.
          type: string
    DeviceStatisticsCollection:
      description: Statistics of the tenant devices.
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          description: An array containing the tenant device statistics.
          type: array
          items:
            $ref: '#/components/schemas/DeviceStatistics'
    TenantUsageStatisticsFileCollection:
      description: Statistics files metadata.
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        statisticsFiles:
          description: An array containing the usage statistics files metadata.
          type: array
          items:
            $ref: '#/components/schemas/StatisticsFile'
      example:
        prev: 'https://<TENANT_DOMAIN>/tenant/statistics/files?pageSize=1&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/tenant/statistics/files?pageSize=1&currentPage=2'
        next: 'https://<TENANT_DOMAIN>/tenant/statistics/files?pageSize=1&currentPage=3'
        statistics:
          pageSize: 1
          currentPage: 2
          totalPages: 3
        statisticsFiles:
          - id: '62'
            instanceName: cumulocity.default.svc.cluster.local
            generationDate: '2020-04-03T03:43:27.203Z'
            dateFrom: '2020-03-01T00:00:00.000Z'
            dateTo: '2020-03-31T00:00:00.000Z'
            type: REAL
    StatisticsFile:
      description: Statistics file metadata.
      type: object
      properties:
        id:
          description: Unique identifier of the file.
          type: string
        instanceName:
          description: Domain name where the statistics file come from.
          type: string
        generationDate:
          description: File generation date.
          type: string
          format: date-time
        dateFrom:
          description: Start date or date and time of the statistics attached in the file.
          type: string
          format: date-time
        dateTo:
          description: End date or date and time of the statistics attached in the file.
          type: string
          format: date-time
        type:
          description: |
            The type of statistics:
            * REAL - generated by the system on the first day of the month and including statistics from the previous month.
            * TEST - generated by the user with a time range specified in the query parameters (`dateFrom`, `dateTo`).
          type: string
          enum:
            - REAL
            - TEST
      example:
        id: '62'
        instanceName: cumulocity.default.svc.cluster.local
        generationDate: '2020-06-14T11:43:27.203Z'
        dateFrom: '2020-03-01T00:00:00.000Z'
        dateTo: '2020-03-19T00:00:00.000Z'
        type: TEST
    rangeStatisticsFile:
      type: object
      required:
        - dateFrom
        - dateTo
      properties:
        dateFrom:
          description: Statistics generation start date.
          type: string
          format: date-time
          example: '2020-03-01'
        dateTo:
          description: Statistics generation end date.
          type: string
          format: date-time
          example: '2020-03-19'
    LoginOptionCollection:
      description: All available login options of the tenant.
      type: object
      properties:
        loginOptions:
          description: An array containing the available login options.
          type: array
          items:
            $ref: '#/components/schemas/LoginOption'
        self:
          $ref: '#/components/schemas/desc_self'
    OptionCollection:
      description: All available options of the tenant.
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        options:
          description: An array containing the available options.
          type: array
          items:
            $ref: '#/components/schemas/option'
      example:
        self: 'https://<TENANT_DOMAIN>/tenant/options?pageSize=5&currentPage=2'
        options:
          - self: 'https://<TENANT_DOMAIN>/tenant/options/password/limit.validity'
            category: password
            key: limit.validity
            value": '0'
          - self: 'https://<TENANT_DOMAIN>/tenant/options/password/strength.validity'
            category: password
            key: strength.validity
            value": 'false'
        statistics:
          totalPages: 1
          currentPage: 1
          pageSize: 5
    CategoryOptions:
      type: object
      additionalProperties:
        description: 'It is possible to specify an arbitrary number of existing options as a list of key-value pairs, for example, `"key1": "value1"`, `"key2": "value2"`.'
        x-additionalPropertiesName: keyValuePairs
      example:
        temp_too_high: '120'
        temp_too_low": '0'
    CategoryKeyOption:
      type: object
      properties:
        value:
          description: The value of this option.
          type: string
          example: CRITICAL|temperature too high
    LoginOption:
      description: Login option properties.
      type: object
      properties:
        authenticationRestrictions:
          $ref: '#/components/schemas/BasicAuthenticationRestrictions'
        enforceStrength:
          description: Indicates if password strength is enforced.
          type: boolean
        grantType:
          description: The grant type of the OAuth configuration.
          enum:
            - PASSWORD
            - AUTHORIZATION_CODE
          type: string
        greenMinLength:
          description: Minimum length for the password when the strength validation is enforced.
          type: integer
        id:
          description: Unique identifier of this login option.
          type: string
        initRequest:
          description: A URL linking to the token generating endpoint.
          type: string
        loginRedirectDomain:
          description: The tenant domain.
          type: string
        self:
          $ref: '#/components/schemas/desc_self'
        sessionConfiguration:
          $ref: '#/components/schemas/OAuthSessionConfiguration'
        strengthValidity:
          description: Enforce password strength validation on subtenant level. `enforceStrength` enforces it on all tenants in the platform.
          type: boolean
        tfaStrategy:
          description: 'Two-factor authentication being used by this login option. TFA supported: SMS and TOTP.'
          type: string
        type:
          description: 'The type of authentication. See [Authentication](#section/Authentication) for more details.'
          type: string
        userManagementSource:
          description: Specifies if the users are managed internally by Cumulocity (`INTERNAL`) or if the users data are managed by a external system (`REMOTE`).
          type: string
        visibleOnLoginPage:
          description: Indicates if this login option is available in the login page (only for SSO).
          type: boolean
        _type:
          description: The type of authentication.
          deprecated: true
          type: string
    OAuthSessionConfiguration:
      description: 'The session configuration properties are only available for OAI-Secure. See [Platform administration > Authentication > Basic settings > OAI Secure session configuration ](https://www.cumulocity.com/docs/authentication/basic-settings/#oai-secure-session-configuration) in the Cumulocity user documentation.'
      type: object
      properties:
        absoluteTimeoutMillis:
          description: Maximum session duration (in milliseconds) during which a user does not have to login again.
          type: integer
        maximumNumberOfParallelSessions:
          description: Maximum number of parallel sessions for one user.
          type: integer
        renewalTimeoutMillis:
          description: Amount of time before a token expires (in milliseconds) during which the token may be renewed.
          type: integer
        userAgentValidationRequired:
          description: Switch to turn additional user agent verification on or off during the session.
          type: boolean
    BasicAuthenticationRestrictions:
      description: For basic authentication case only.
      type: object
      properties:
        forbiddenClients:
          description: List of types of clients which are not allowed to use basic authentication. Currently the only supported option is WEB_BROWSERS.
          type: array
          items:
            type: string
        forbiddenUserAgents:
          description: 'List of user agents, passed in `User-Agent` HTTP header, which are blocked if basic authentication is used.'
          type: array
          items:
            type: string
        trustedUserAgents:
          description: 'List of user agents, passed in `User-Agent` HTTP header, which are allowed to use basic authentication.'
          type: array
          items:
            type: string
    accessToken:
      description: OAI-Secure access token.
      type: object
      properties:
        access_token:
          description: Access token generated by the Cumulocity platform.
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJhZGY0ODI3Yi00ZjZjLTRiMTktYTJmYy0x...S-04HPk3G5OezjCP8oQUAIG87wd-fHyJ2oKSuetWFWpUSBPzJzl_73_3yauIlplHorlSoQ
    SystemOptionCollection:
      description: All available system options of the tenant.
      type: object
      properties:
        options:
          description: An array containing the predefined system options.
          type: array
          items:
            $ref: '#/components/schemas/systemOption'
    systemOption:
      description: A tuple storing tenant configuration.
      type: object
      properties:
        category:
          description: Name of the system option category.
          type: string
          example: password
        key:
          description: A unique identifier for this system option.
          type: string
          example: enforce.strength
        value:
          description: Value of this system option.
          type: string
          example: false
    realtimeNotification:
      type: object
      required:
        - channel
      properties:
        advice:
          description: Configuration parameters for the current connect message.
          type: object
          properties:
            interval:
              description: 'Period (milliseconds) after which the server will close the session, if it doesn''t received the next connect message from the client. Overrides server default settings for current request-response conversation.'
              type: integer
              minimum: 0
            timeout:
              description: Interval (milliseconds) between the sending of the connect message and the response from the server. Overrides server default settings for the current request-response conversation.
              type: integer
              minimum: 0
        channel:
          description: The channel name as a URI.
          type: string
          enum:
            - /meta/handshake
            - /meta/subscribe
            - /meta/unsubscribe
            - /meta/connect
            - /meta/disconnect
        clientId:
          description: Unique client ID generated by the server during handshake. Required for all other operations.
          type: string
          readOnly: true
        connectionType:
          description: Selected connection type.
          type: string
        data:
          description: List of notifications from the channel.
          type: object
          nullable: true
          readOnly: true
        error:
          description: Operation failure reason (only present if the operation was not successful).
          type: string
          readOnly: true
        ext:
          description: Authentication object passed to handshake (only over WebSockets).
          type: object
          properties:
            com.cumulocity.authn:
              type: object
              properties:
                token:
                  description: Base64 encoded credentials.
                  type: string
                  format: Base64
                tfa:
                  description: Optional two factor authentication token.
                  type: string
                xsrfToken:
                  description: Required for OAuth authentication.
                  type: string
            systemOfUnits:
              description: The system of units to use.
              type: string
              enum:
                - imperial
                - metric
        id:
          description: ID of the message passed in a request. Required to match the response message.
          type: string
        minimumVersion:
          description: Minimum server-side Bayeux protocol version required by the client (in a request) or minimum client-side Bayeux protocol version required by the server (in a response).
          type: string
        subscription:
          description: 'Name of the channel to subscribe to. Subscription channels are available for [Alarms](#tag/Alarm-notification-API), [Device control](#tag/Device-control-notification-API), [Events](#tag/Event-notification-API), [Inventory](#tag/Inventory-notification-API) and [Measurements](#tag/Measurement-notification-API).'
          type: string
        successful:
          description: Indicates if the operation was successful.
          type: boolean
          readOnly: true
        supportedConnectionTypes:
          description: 'Connection types supported by both client and server, that is, intersection between client and server options.'
          type: array
          items:
            type: string
        version:
          description: |
            [Bayeux protocol](https://docs.cometd.org/current/reference/#_concepts_bayeux_protocol) version used by the client (in a request) or server (in a response).
          type: string
      example:
        - channel: /meta/handshake
          clientId: 69wzith4teyensmz6zyk516um4yum0mvp
          minimumVersion: '1.0'
          successful: true
          supportedConnectionTypes:
            - long-polling
            - smartrest-long-polling
            - websocket
          version: '1.0'
    NotificationApiResource:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/desc_self'
        notificationSubscriptions:
          description: Collection of all notification subscriptions.
          type: object
          properties:
            self:
              $ref: '#/components/schemas/desc_self'
            subscriptions:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/NotificationSubscription'
        notificationSubscriptionsBySource:
          description: 'Read-only collection of all notification subscriptions for a specific source object. The placeholder {source} must be a unique ID of an object in the inventory.'
          type: string
        notificationSubscriptionsBySourceAndContext:
          description: Read-only collection of all notification subscriptions of a particular context and a specific source object.
          type: string
        notificationSubscriptionsByContext:
          description: Read-only collection of all notification subscriptions of a particular context.
          type: string
      example:
        notificationSubscriptions:
          self: 'https://<TENANT_DOMAIN>/notification2/subscriptions'
          subscriptions: null
        notificationSubscriptionsBySource: 'https://<TENANT_DOMAIN>/notification2/subscriptions?source={source}'
        notificationSubscriptionsBySourceAndContext: 'https://<TENANT_DOMAIN>/notification2/subscriptions?source={source}&context={context}'
        notificationSubscriptionsByContext: 'https://<TENANT_DOMAIN>/notification2/subscriptions?context={context}'
        self: 'https://<TENANT_DOMAIN>/notification2'
    NotificationTokenClaims:
      type: object
      required:
        - subscriber
        - subscription
      properties:
        expiresInMinutes:
          type: integer
          description: The token expiration duration.
          default: 1440
        subscriber:
          type: string
          description: The subscriber name which the client wishes to be identified with.
        subscription:
          type: string
          description: The subscription name. This value must match the same that was used when the subscription was created.
        type:
          type: string
          description: The subscription type. Currently the only supported type is `notification` .Other types may be added in future.
          default: notification
          enum:
            - notification
        signed:
          type: boolean
          description: 'If `true`, the token will be securely signed by the Cumulocity platform.'
          default: true
        shared:
          type: boolean
          description: 'If `true`, indicates that the token is used to create a shared consumer on the subscription.'
          default: false
        nonPersistent:
          type: boolean
          description: 'If `true`, indicates that the created token refers to the non-persistent variant of the named subscription.'
          default: false
    NotificationToken:
      type: object
      properties:
        token:
          type: string
          description: JWT (JSON Web Token) access token.
          example: eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ0ZXN0U3Vic2NyaWJlciIsInRvcGljIjoibWFuYWdlbWVudC9yZWxub3RpZi90ZXN0U3Vic2NyaXB0aW9uIiwianRpIjoiZGRiNDRhNjQtMDQzMC00ODUxLWJmMGYtYjI4YWViN2JhNDYwIiwiaWF0IjoxNjMwNDA0NTk3LCJleHAiOjE2MzA0MDk5OTd9.Q56PSRp1HYWw2CjutzV1X9Qhtck0VLLy1GKVqN7kRqYoSpLuDJ0-6Kk_XvvT4NI-xRvu8ZwkWePK-hXLgZmpfs10n54rzLiF195dYnME3r2NuEopkCIIaiqKn6--gxxs0USKgRZ6rmeAKGbdc0bJVBQy_RURyrxPYSG2hYJKflwIKzVkyUsrTPbHRH5Sr_Ip35m7wb9YrYjLTWIYuYSwHqYnX3siBfjY6XSwrIgWJRT-YmYfRJ9LyaMyVdLAuwMQbz5fsytkrzIH7TEyWHK3B0nNIpNOawbjB9d1wFauGhtQ2GcDjiz3lXPLtSnt5pLBA_MzEQGSHXR6mz6ObaYpQQ
    NotificationSubscription:
      type: object
      required:
        - context
        - subscription
      properties:
        context:
          description: |
            The context within which the subscription is to be processed.
            > **&#9432; Info:** If the value is `mo` (managed object), then `source` must also be provided in the request body.
          type: string
          minLength: 1
          enum:
            - mo
            - tenant
        fragmentsToCopy:
          description: 'Transforms the data to *only* include specified custom fragments. Each custom fragment is identified by a unique name. If nothing is specified here, the data is forwarded as-is.'
          type: array
          items:
            type: string
        id:
          description: Unique identifier of the subscription.
          type: string
          readOnly: true
        self:
          $ref: '#/components/schemas/desc_self'
        source:
          description: The managed object to which the subscription is associated.
          type: object
          properties:
            id:
              $ref: '#/components/schemas/desc_objectId'
            name:
              $ref: '#/components/schemas/desc_objectName'
            self:
              $ref: '#/components/schemas/desc_self'
        subscription:
          type: string
          description: The subscription name. Each subscription is identified by a unique name within a specific context.
          pattern: '^[a-zA-Z0-9]+$'
          minLength: 1
        subscriptionFilter:
          description: Applicable filters to the subscription.
          type: object
          properties:
            apis:
              type: array
              description: |
                For the `mo` (managed object) context, notifications from the `alarms`, `alarmsWithChildren`, `events`, `eventsWithChildren`, `managedobjects` (Inventory), `measurements` and `operations` (Device control) APIs can be subscribed to.
                The `alarmsWithChildren` and `eventsWithChildren` APIs subscribe to alarms and events respectively from the managed object identified by the `source.id` field, and all of its descendant managed objects.

                For the `tenant` context, notifications from the `alarms`, `events`, `managedobjects` (Inventory), and `operations` APIs can be subscribed to.

                For all contexts, the `*` (wildcard) value can be used to subscribe to notifications from all of the available APIs in that context.

                > **&#9432; Info:** The wildcard `*` cannot be used in conjunction with other values.
              items:
                type: string
                enum:
                  - alarms
                  - alarmsWithChildren
                  - events
                  - eventsWithChildren
                  - managedobjects
                  - measurements
                  - operations
                  - '*'
            typeFilter:
              type: string
              description: |
                Used to match the `type` property of the data. This must either be a string to match one specific type exactly, or be an `or` OData expression, allowing the filter to match any one of a number of types.

                > **&#9432; Info:** The use of a `type` attribute is assumed, for example when using only a string literal `'c8y_Temperature'` (or using `c8y_Temperature`, as quotes can be omitted when matching a single type) it is equivalent to a `type eq 'c8y_Temperature'` OData expression.

                > **&#9432; Info:** Currently only the `or` operator is allowed when using an OData expression. Example usage is `'c8y_Temperature' or 'c8y_Pressure'` which will match all the data with types `c8y_Temperature` or `c8y_Pressure`.
        nonPersistent:
          description: 'Indicates whether the messages for this subscription are persistent or non-persistent, meaning they can be lost if consumer is not connected.'
          type: boolean
          default: false
      example:
        id: '102700509'
        self: 'http://<TENANT_DOMAIN>/notification2/subscriptions/102700509'
        source:
          name: Test Device
          self: 'http://<TENANT_DOMAIN>/inventory/managedObjects/251982'
          id: '251982'
        context: mo
        subscription: testSubscription
        subscriptionFilter:
          apis:
            - measurements
            - events
          typeFilter: '''c8y_Speed'' or ''c8y_LocationUpdate'''
        fragmentsToCopy:
          - c8y_MaxSpeedMeasurement
          - c8y_Position
        nonPersistent: false
    NotificationSubscriptionCollection:
      type: object
      properties:
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
        subscriptions:
          description: An array containing the subscriptions of the request.
          type: array
          items:
            $ref: '#/components/schemas/NotificationSubscription'
      example:
        self: 'https://<TENANT_DOMAIN>/notification2/subscriptions?pageSize=5&currentPage=1'
        subscriptions:
          - id: '102700509'
            self: 'http://<TENANT_DOMAIN>/notification2/subscriptions/102700509'
            source:
              name: Test Device
              self: 'http://<TENANT_DOMAIN>/inventory/managedObjects/251982'
              id: '251982'
            context: mo
            subscription: testSubscription
            subscriptionFilter:
              apis:
                - measurements
                - events
              typeFilter: '''c8y_Speed'' or ''c8y_LocationUpdate'''
            fragmentsToCopy:
              - c8y_MaxSpeedMeasurement
              - c8y_Position
            nonPersistent: false
        statistics:
          totalPages: 1
          currentPage: 1
          pageSize: 5
    UploadedTrustedCertificate:
      type: object
      required:
        - certInPemFormat
        - status
      properties:
        autoRegistrationEnabled:
          description: Indicates whether the automatic device registration is enabled or not.
          type: boolean
          default: false
        certInPemFormat:
          description: Trusted certificate in PEM format.
          type: string
        name:
          description: Name of the certificate.
          type: string
        status:
          description: Indicates if the certificate is active and can be used by the device to establish a connection to the Cumulocity platform.
          type: string
          enum:
            - ENABLED
            - DISABLED
          example: ENABLED
    UploadedTrustedCertificateCollection:
      type: object
      description: A collection of uploaded trusted certificates.
      properties:
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/UploadedTrustedCertificate'
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
    VerifyCertificateChain:
      type: object
      properties:
        successfullyValidated:
          description: The result of validating the certificate chain.
          type: boolean
          readOnly: true
        tenantId:
          description: The tenant ID used for validation.
          type: string
          readOnly: true
        issuer:
          description: The name of the organization which signed the certificate.
          type: string
          readOnly: true
        subject:
          description: The name of the organization to which the certificate belongs.
          type: string
          readOnly: true
      example:
        successfullyValidated: true
        tenantId: t07007007
        subject: 'CN=iotdevice0001,O=device,ST=PL,C=EU'
        issuer: 'CN=CertificateName, OU=Dusseldorf, O=Cumulocity, C=DE'
    UpdateCRLEntries:
      description: A list of serial numbers.
      type: object
      properties:
        crls:
          type: array
          items:
            $ref: '#/components/schemas/CRLEntry'
    CRLEntry:
      type: object
      required:
        - serialNumberInHex
      properties:
        serialNumberInHex:
          description: Revoked certificate serial number in hexadecimal.
          type: string
          example: 1000
        revocationDate:
          description: Date and time when the certificate is revoked.
          type: string
          format: date-time
          example: '2023-01-11T16:12:36.288Z'
    TrustedCertificate:
      type: object
      properties:
        algorithmName:
          description: Algorithm used to decode/encode the certificate.
          type: string
          readOnly: true
        autoRegistrationEnabled:
          description: Indicates whether the automatic device registration is enabled or not.
          type: boolean
          default: false
        certInPemFormat:
          description: Trusted certificate in PEM format.
          type: string
        fingerprint:
          description: Unique identifier of the trusted certificate.
          type: string
          readOnly: true
        issuer:
          description: The name of the organization which signed the certificate.
          type: string
          readOnly: true
        name:
          description: Name of the certificate.
          type: string
        notAfter:
          description: The end date and time of the certificate's validity.
          type: string
          format: date-time
          readOnly: true
        notBefore:
          description: The start date and time of the certificate's validity.
          type: string
          format: date-time
          readOnly: true
        proofOfPossessionValid:
          description: Indicates whether the proof of possession for the certificate was provided.
          type: boolean
          example: false
        proofOfPossessionUnsignedVerificationCode:
          description: An unsigned verification code that provides proof of possession for the certificate after signing.
          type: string
          example: 6qgyIiqnYAx+1pkSSgy1o8tNHBVFx0Xx959fWmrXfSKsgBEggyR+er6KVgag1oMrdS6L3gBLmU3wKQk83RsdHSJkWoQ/2oRt5Czyy2ViobYaG8GVjz3pEcJ/Vz8e2PjjBYFYCvlGF08pZRJMjbTUHpe6p4wBFlK2
        proofOfPossessionVerificationCodeUsableUntil:
          description: Validity of the verification code.
          type: string
          format: date-time
          example: '2024-03-19T00:00:00.000Z'
        self:
          $ref: '#/components/schemas/desc_self'
        serialNumber:
          description: The certificate's serial number.
          type: string
          readOnly: true
        status:
          description: Indicates if the certificate is active and can be used by the device to establish a connection to the Cumulocity platform.
          type: string
          enum:
            - ENABLED
            - DISABLED
          example: ENABLED
        subject:
          description: Name of the organization to which the certificate belongs.
          type: string
          readOnly: true
        version:
          description: Version of the X.509 certificate standard.
          type: integer
          readOnly: true
        tenantCertificateAuthority:
          description: Indicates whether this certificate is tenant's CA.
          type: boolean
          default: false
      example:
        algorithmName: SHA256withRSA
        version: 3
        autoRegistrationEnabled: true
        issuer: 'CN=CertificateName, OU=Dusseldorf, O=Cumulocity, C=DE'
        name: My Certificate
        fingerprint: df9c19e0433c6861fak899078b76fe56a3e7dd14
        notAfter: '2041-08-29T07:42:00.000Z'
        notBefore: '2021-09-03T07:42:00.000Z'
        serialNumber: '304307049989715896618044547121406628655049752690'
        subject: 'CN=CertificateName, OU=Dusseldorf, O=Cumulocity, C=DE'
        self: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007/trusted-certificates/df9c19e0433c6861fak899078b76fe56a3e7dd14'
        status: ENABLED
        tenantCertificateAuthority: true
        certInPemFormat: |
          MIIFezCCA2OgAwIBAgIUNU2ZnXIdu9aq+O7x2emLTgXgQEowDQYJKoZIhvcNAQEL
          BQAwRTELMAkGA1UEBhMCUEwxDzANBgNVBAoMBmluZXR1bTEPMA0GA1UECwwGbHVi
          bGluMRQwEgYDVQQDDAtiYXNpY0NvbW1vbjAeFw0yMTA5MDMwNzQyMDBaFw00MTA4
          MjkwNzQyMDBaMEUxCzAJBgNVBAYTAlBMMQ8wDQYDVQQKDAZpbmV0dW0xDzANBgNV
          BAsMBmx1YmxpbjEUMBIGA1UEAwwLYmFzaWNDb21tb24wggIiMA0GCSqGSIb3DQEB
          AQUAA4ICDwAwggIKAoICAQDEc1NevRvKaIDs5CsGbIc/ETm3gHmG3OP9Z8ULQv1y
          W1VzdjSKfgoVWVEsbhuhaRaWyIuaFh6dsWpWEcXpHkq+DiRuQGifBmUNFURZQ8Aw
          UOrQ4F10UuzulEYauYh218rGSynLnIXCO3UHXGjWX+iiXPjbesFcnLPaarmLmQU9
          AAh9MpBb3ztMzh5wRGcyVpuDxZ7e0HDBlI7hNMEqCFO/brJsILtv5q0j4JoShyWX
          NVV8tX8P+biMlyMcVoZJazBfYuYErxmxdXtORxOkfge815ltGoMI9V4YSSex3/Fv
          /PBavpF4iueqcrWQF3dhctAViPEzpMoefTu+cFtB/40wx/NHiBF5x5rjcT2s/+6W
          b9OGLxLLf84XpYlHWtucfFLzznPMiXNegfkJpU0dMuMh1GT5WNTfmcPV3LiasbI0
          GNq6mWKLgcRHX95pw16vw0CqzPnFTASztnI12mIYm6D0oQ+tHjLoPrW3fiZEeF67
          fVA8LNWJwCkzHlnnNl5HP15K+GoscyzyMKj7ViAqN+XZaCRpRqYNZGkGXB9mSVQn
          0oK6eRX8oQ4NQQW49VNoho9I8DhcCdMglMj9bhciIy2LrSwB8Sx9nB1C9wiHDbCA
          fTy1nxEJS9gUGg7LNmRxlpQFBuQ0ndq87UEUdjchvbmJD7T5ZYM0LgDopJypBsqF
          gQIDAQABo2MwYTAdBgNVHQ4EFgQUUS08257ro38KOB1a8pqYL3P2NvAwHwYDVR0j
          BBgwFoAUUS08257ro38KOB1a8pqYL3P2NvAwEgYDVR0TAQH/BAgwBgEB/wIBCjAL
          BgNVHQ8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIBAGtYjON+CFzVGRkajHK1RKZS
          J4kAfQlrXq1vG2b4jWYSLgrNw4o93xx0yLK0HVHO12juFhUrmlfhCB/iGI9iL2IO
          h7v+PQ4L5wQJWfxZNWDZpqbF3S7UyDGAFx1J3MwjIhkoPpaIB0km+sQCJxn5Vt36
          OPCKmORm4tplBHNauP9PpS418HAC9uyrew/h/0BLLaPF9BwFWk4HmSwfSFTHOvyh
          hC1G4cEzHuiadLGCPXwerCe5As9F4InvIYmQ4UxAOtnlQcnQYOowFSrMobkArGR9
          HcG1b0vWQJdzVrDU7zcRzD90ehwsXJIczOQoa/Hmb3Njlop8LyTFPjeXeoJf6PJE
          MHy08IOLvaX4UsRiKLKJ28JEhVVemBrPspHeADqmlbeBotQ6OToWFeki9qQSz5Lw
          lks/4qfRn6Xl3rmRSH8FdbK3VdIYInT7PTz5W2EBE8Ql5vneSPb9aank+9H67mB5
          GQ8uYpxcs6Qjyy62pkfejlHHHh5oqEq0b6w7YyUuMAEW0JB0WevoCS8iVl8hKbyK
          94u/PqW6lH+agw4kaMzaeMwBmppAy4JsiEKKavvP3jO6NDMc1bHt5q2+XTRPdlQY
          DVZJfXybnOvsTQv41A4zyHSaNZsH1AyhJPfFKAMPXhajm7dBCi87bamMj4NyZt8f
          PPBUaE6x9fMfuGJbcsAR
    TrustedCertificateCollection:
      type: object
      description: A collection of trusted certificates.
      properties:
        certificates:
          description: An array containing trusted certificates.
          type: array
          items:
            $ref: '#/components/schemas/TrustedCertificate'
        next:
          $ref: '#/components/schemas/desc_nextPage'
        prev:
          $ref: '#/components/schemas/desc_prevPage'
        self:
          $ref: '#/components/schemas/desc_self'
        statistics:
          $ref: '#/components/schemas/pageStatistics'
      example:
        certificates:
          - algorithmName: SHA256withRSA
            version: 3
            autoRegistrationEnabled: true
            issuer: 'CN=CertificateName, OU=Dusseldorf, O=Cumulocity, C=DE'
            name: My Certificate
            fingerprint: df9c19e0433c6861fak899078b76fe56a3e7dd14
            notAfter: '2041-08-29T07:42:00.000Z'
            notBefore: '2021-09-03T07:42:00.000Z'
            serialNumber: '304307049989715896618044547121406628655049752690'
            subject: 'CN=CertificateName, OU=Dusseldorf, O=Cumulocity, C=DE'
            self: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007/trusted-certificates/df9c19e0433c6861fak899078b76fe56a3e7dd14'
            status: ENABLED
            certInPemFormat: |
              MIIFezCCA2OgAwIBAgIUNU2ZnXIdu9aq+O7x2emLTgXgQEowDQYJKoZIhvcNAQEL
              BQAwRTELMAkGA1UEBhMCUEwxDzANBgNVBAoMBmluZXR1bTEPMA0GA1UECwwGbHVi
              bGluMRQwEgYDVQQDDAtiYXNpY0NvbW1vbjAeFw0yMTA5MDMwNzQyMDBaFw00MTA4
              MjkwNzQyMDBaMEUxCzAJBgNVBAYTAlBMMQ8wDQYDVQQKDAZpbmV0dW0xDzANBgNV
              BAsMBmx1YmxpbjEUMBIGA1UEAwwLYmFzaWNDb21tb24wggIiMA0GCSqGSIb3DQEB
              AQUAA4ICDwAwggIKAoICAQDEc1NevRvKaIDs5CsGbIc/ETm3gHmG3OP9Z8ULQv1y
              W1VzdjSKfgoVWVEsbhuhaRaWyIuaFh6dsWpWEcXpHkq+DiRuQGifBmUNFURZQ8Aw
              UOrQ4F10UuzulEYauYh218rGSynLnIXCO3UHXGjWX+iiXPjbesFcnLPaarmLmQU9
              AAh9MpBb3ztMzh5wRGcyVpuDxZ7e0HDBlI7hNMEqCFO/brJsILtv5q0j4JoShyWX
              NVV8tX8P+biMlyMcVoZJazBfYuYErxmxdXtORxOkfge815ltGoMI9V4YSSex3/Fv
              /PBavpF4iueqcrWQF3dhctAViPEzpMoefTu+cFtB/40wx/NHiBF5x5rjcT2s/+6W
              b9OGLxLLf84XpYlHWtucfFLzznPMiXNegfkJpU0dMuMh1GT5WNTfmcPV3LiasbI0
              GNq6mWKLgcRHX95pw16vw0CqzPnFTASztnI12mIYm6D0oQ+tHjLoPrW3fiZEeF67
              fVA8LNWJwCkzHlnnNl5HP15K+GoscyzyMKj7ViAqN+XZaCRpRqYNZGkGXB9mSVQn
              0oK6eRX8oQ4NQQW49VNoho9I8DhcCdMglMj9bhciIy2LrSwB8Sx9nB1C9wiHDbCA
              fTy1nxEJS9gUGg7LNmRxlpQFBuQ0ndq87UEUdjchvbmJD7T5ZYM0LgDopJypBsqF
              gQIDAQABo2MwYTAdBgNVHQ4EFgQUUS08257ro38KOB1a8pqYL3P2NvAwHwYDVR0j
              BBgwFoAUUS08257ro38KOB1a8pqYL3P2NvAwEgYDVR0TAQH/BAgwBgEB/wIBCjAL
              BgNVHQ8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIBAGtYjON+CFzVGRkajHK1RKZS
              J4kAfQlrXq1vG2b4jWYSLgrNw4o93xx0yLK0HVHO12juFhUrmlfhCB/iGI9iL2IO
              h7v+PQ4L5wQJWfxZNWDZpqbF3S7UyDGAFx1J3MwjIhkoPpaIB0km+sQCJxn5Vt36
              OPCKmORm4tplBHNauP9PpS418HAC9uyrew/h/0BLLaPF9BwFWk4HmSwfSFTHOvyh
              hC1G4cEzHuiadLGCPXwerCe5As9F4InvIYmQ4UxAOtnlQcnQYOowFSrMobkArGR9
              HcG1b0vWQJdzVrDU7zcRzD90ehwsXJIczOQoa/Hmb3Njlop8LyTFPjeXeoJf6PJE
              MHy08IOLvaX4UsRiKLKJ28JEhVVemBrPspHeADqmlbeBotQ6OToWFeki9qQSz5Lw
              lks/4qfRn6Xl3rmRSH8FdbK3VdIYInT7PTz5W2EBE8Ql5vneSPb9aank+9H67mB5
              GQ8uYpxcs6Qjyy62pkfejlHHHh5oqEq0b6w7YyUuMAEW0JB0WevoCS8iVl8hKbyK
              94u/PqW6lH+agw4kaMzaeMwBmppAy4JsiEKKavvP3jO6NDMc1bHt5q2+XTRPdlQY
              DVZJfXybnOvsTQv41A4zyHSaNZsH1AyhJPfFKAMPXhajm7dBCi87bamMj4NyZt8f
              PPBUaE6x9fMfuGJbcsAR
        next: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007/trusted-certificates?pageSize=1&currentPage=3'
        prev: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007/trusted-certificates?pageSize=1&currentPage=1'
        self: 'https://<TENANT_DOMAIN>/tenant/tenants/t07007007/trusted-certificates?pageSize=1&currentPage=2'
        statistics:
          currentPage: 2
          pageSize: 1
    UploadedTrustedCertSignedVerificationCode:
      type: object
      description: The signed verification code to prove the user's possession of the certificate.
      required:
        - proofOfPossessionSignedVerificationCode
      properties:
        proofOfPossessionSignedVerificationCode:
          description: A signed verification code that proves the right to use the certificate.
          type: string
          example: 6qgyIiqnYAx+1pkSSgy1o8tNHBVFkWoQ/2oRt5Czyy2ViobYaG8GVjz3pEcJ/Vz8e2PjjBYFYCvlGF08pZRJMjbTUHpe6p4wBFlK2
    NotificationSubscriptionResult:
      type: object
      properties:
        result:
          description: The status of the notification subscription deletion.
          type: string
          enum:
            - DONE
            - SCHEDULED
    desc_objectId:
      title: ObjectId
      description: Unique identifier of the object.
      type: string
      minLength: 1
    desc_objectName:
      title: ObjectName
      description: Human-readable name that is used for representing the object in user interfaces.
      type: string
    desc_self:
      title: SelfURL
      description: A URL linking to this resource.
      type: string
      format: uri
      readOnly: true
    desc_prevPage:
      title: PreviousPageURL
      description: 'A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] to a potential previous page of managed objects.'
      type: string
      readOnly: true
    desc_nextPage:
      title: NextPageURL
      description: 'A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] to a potential next page of managed objects.'
      type: string
      readOnly: true
    desc_user_devicepermissions:
      title: DevicePermissions
      description: An object with a list of the user's device permissions.
      type: object
      deprecated: true
      additionalProperties:
        type: array
        items:
          type: string
      example:
        '647100':
          - 'MANAGED_OBJECT:*:ADMIN'
    desc_tenant_id:
      title: TenantId
      description: Unique identifier of a Cumulocity tenant.
      type: string
      minLength: 2
      maxLength: 32
      readOnly: true
      example: t07007007
    c8y_Hardware:
      description: 'Contains basic hardware information for a device, such as make and serial number. Often, the hardware serial number is printed on the board of the device or on an asset tag on the device to uniquely identify the device within all devices of the same make.'
      type: object
      properties:
        model:
          type: string
          description: A text identifier of the device's hardware model.
          example: BCM2708
        revision:
          type: string
          description: A text identifier of the hardware revision.
          example: 000e
        serialNumber:
          type: string
          description: The hardware serial number of the device.
          example: 00000000e2f5ad4d
    c8y_Firmware:
      description: 'Contains information on a device''s firmware. In the inventory, `c8y_Firmware` represents the currently installed firmware on the device. As part of an operation, `c8y_Firmware` requests the device to install the indicated firmware. To enable firmware installation through the user interface, add `c8y_Firmware` to the list of supported operations.'
      type: object
      properties:
        name:
          type: string
          description: Name of the firmware.
          example: raspberrypi-bootloader
        version:
          type: string
          description: A version identifier of the firmware.
          example: 1.20140107-1
        url:
          type: string
          format: uri
          description: A URI linking to the location to download the firmware from.
          example: 'https://example.com/support/firmware-download'
    c8y_Mobile:
      description: 'Holds basic connectivity-related information, such as the equipment identifier of the modem (IMEI) in the device. This identifier is globally unique and often used to identify a mobile device.'
      type: object
      required:
        - imei
        - cellId
        - iccid
      properties:
        imei:
          type: string
          description: The equipment identifier (IMEI) of the modem in the device.
        cellId:
          type: string
          description: The identifier of the cell in the mobile network that the device is currently connected with.
        iccid:
          type: string
          description: The identifier of the SIM card that is currently in the device (often printed on the card).
      additionalProperties:
        type: string
        x-additionalPropertiesName: customFragments
        description: |
          Other possible values are: `c8y_Mobile.imsi`, `c8y_Mobile.currentOperator`, `c8y_Mobile.currentBand`, `c8y_Mobile.connType`, `c8y_Mobile.rssi`, `c8y_Mobile.ecn0`, `c8y_Mobile.rcsp`, `c8y_Mobile.mnc`, `c8y_Mobile.lac` and `c8y_Mobile.msisdn`.
      example:
        imei: '358901048995390'
        cellId: 15DFAC
        iccid: '89430301901300001342'
    c8y_CellInfo:
      description: 'Provides detailed information about the closest mobile cell towers. When the functionality is activated, the location of the device is determined based on this fragment, in order to track the device whereabouts when GPS tracking is not available.'
      type: object
      required:
        - cellTowers
      properties:
        radioType:
          type: string
          description: The radio type of this cell tower.
        cellTowers:
          type: array
          description: Detailed information about the neighboring cell towers.
          items:
            $ref: '#/components/schemas/c8y_CellTower'
      example:
        radioType: gsm
        cellTowers:
          - mobileCountryCode: 240
            mobileNetworkCode: 1
            locationAreaCode: 3012
            cellId: 11950
    c8y_CellTower:
      description: Detailed information about a neighbouring cell tower.
      type: object
      required:
        - mobileCountryCode
        - mobileNetworkCode
        - locationAreaCode
        - cellId
      properties:
        radioType:
          type: string
          description: The radio type of this cell tower. Can also be put directly in root JSON element if all cellTowers have same radioType.
        mobileCountryCode:
          type: number
          description: The Mobile Country Code (MCC).
        mobileNetworkCode:
          type: number
          description: 'The Mobile Network Code (MNC) for GSM, WCDMA and LTE. The SystemID (sid) for CDMA.'
        locationAreaCode:
          type: number
          description: 'The Location Area Code (LAC) for GSM, WCDMA and LTE. The Network ID for CDMA.'
        cellId:
          type: number
          description: 'The Cell ID (CID) for GSM, WCDMA and LTE. The base station ID for CDMA.'
        timingAdvance:
          type: number
          description: The timing advance value for this cell tower when available.
        signalStrength:
          type: number
          description: The signal strength for this cell tower in dBm.
        primaryScramblingCode:
          type: number
          description: The primary scrambling code for WCDMA and physical CellId for LTE.
        serving:
          type: number
          description: 'Specify with 0/1 if the cell is serving or not. If not specified, the first cell is assumed to be serving.'
    c8y_Configuration:
      description: |
        Text configuration fragment that allows you to configure parameters and initial settings of your device.

        In the inventory, `c8y_Configuration` represents the currently active configuration on the device. As part of an operation, `c8y_Configuration` requests the device to switch the transmitted configuration to the currently active one. To enable configuration through the user interface, add `c8y_Configuration` to the list of supported operations.
      type: object
      properties:
        config:
          description: 'A text in a device-specific format, representing the configuration of the device.'
          type: string
    c8y_RequiredAvailability:
      description: |
        Devices can be monitored for availability by adding a `c8y_RequiredAvailability` fragment to the device.

        Devices that have not sent any message in the response interval are considered disconnected. The response interval can have a value between `-32768` and `32767` and any values out of range will be shrunk to the range borders. Such devices are marked as unavailable and an unavailability alarm is raised.
      type: object
      properties:
        responseInterval:
          type: integer
    c8y_Availability:
      description: The availability information computed by Cumulocity is stored in fragments `c8y_Availability` of the device.
      type: object
      properties:
        status:
          $ref: '#/components/schemas/c8y_AvailabilityDataStatus'
        lastMessage:
          type: string
          format: date-time
          description: The time when the device sent the last message to Cumulocity.
          example: '20130-03-19T00:00:00.000Z'
    c8y_Connection:
      description: The connection information computed by Cumulocity is stored in fragments `c8y_Connection` of the device.
      type: object
      properties:
        status:
          $ref: '#/components/schemas/c8y_AvailabilityConnectionStatus'
    c8y_AvailabilityDataStatus:
      description: 'The current status of availability, one of `AVAILABLE`, `UNAVAILABLE`, `MAINTENANCE`.'
      type: string
      enum:
        - AVAILABLE
        - MAINTENANCE
        - UNAVAILABLE
    c8y_AvailabilityConnectionStatus:
      description: 'The current status of connection, one of `CONNECTED`, `DISCONNECTED`, `MAINTENANCE`.'
      type: string
      enum:
        - CONNECTED
        - DISCONNECTED
        - MAINTENANCE
    c8y_ActiveAlarmsStatus:
      description: The number of currently active and acknowledged alarms is stored in this fragment.
      type: object
      properties:
        critical:
          type: integer
          example: 1
        major:
          type: integer
          example: 1
        minor:
          type: integer
          example: 1
        warning:
          type: integer
          example: 1
    c8y_CommunicationMode:
      description: 'In order to send commands as text messages to devices, the devices must be put into SMS mode. To indicate that it supports SMS mode, a device needs to add the fragment `c8y_CommunicationMode` with a mode property of `SMS`.'
      type: object
      properties:
        mode:
          type: string
          example: SMS
    c8y_Command:
      description: 'To carry out interactive sessions with a device, use the `c8y_Command` fragment. If this fragment is in the list of supported operations for a device, a tab `Shell` will be shown. Using the `Shell` tab, the user can send commands in an arbitrary, device-specific syntax to the device. The command is sent to the device in a property `text`.'
      type: object
      properties:
        type:
          type: string
          description: The command sent to the device.
          example: get uboot.sn
        result:
          type: string
          description: 'To communicate the results of a particular command, the device adds a property `result`.'
          example: '165711141901401'
    c8y_TemperatureSensor:
      description: 'A temperature sensor reports the temperature in degrees Celsius (C). In a managed object, a temperature sensor is modeled as a simple empty fragment.'
      type: object
      example: {}
    c8y_TemperatureMeasurement:
      description: Measurement of the temperature.
      type: object
      properties:
        T:
          allOf:
            - $ref: '#/components/schemas/c8y_MeasurementValue'
            - description: Measured temperature in degrees Celsius (C).
      example:
        T:
          value: 23
          unit: C
    c8y_MotionSensor:
      description: 'A motion sensor detects motion. Simple motion sensors may just detect if there is motion or not, based on some predefined threshold. More complicated motion sensors (such as police speed radars) can measure the actual speed of the motion. It is assumed in the model that only the speed towards or away from the sensor is measured. The unit for this sensor type are kilometres per hour (km/h). In a managed object, a motion sensor is modeled as a simple empty fragment.'
      type: object
      example: {}
    c8y_MotionMeasurement:
      description: Measurement of the motion sensor.
      type: object
      properties:
        motionDetected:
          type: object
          description: Boolean value indicating if motion has been detected (non-zero value) or not (zero value).
          properties:
            value:
              type: number
            type:
              type: string
        speed:
          allOf:
            - $ref: '#/components/schemas/c8y_MeasurementValue'
            - description: Measured speed towards (+ve) or away (-ve) from the sensor.
      example:
        motionDetected:
          value: 1
          type: BOOLEAN
        speed:
          value: -63.2
          unit: km/h
    c8y_AccelerationSensor:
      description: 'An acceleration sensor, or accelerometer, is a device that measures acceleration along an axis. This sensor model does not define the direction of that axis. The units for this sensor type are metres per second per second (m/s2). In a managed object, an acceleration sensor is modeled as a simple empty fragment.'
      type: object
      example: {}
    c8y_AccelerationMeasurement:
      description: Measurement of the acceleration sensor.
      type: object
      properties:
        acceleration:
          allOf:
            - $ref: '#/components/schemas/c8y_MeasurementValue'
            - description: Measured acceleration along the sensor axis (direction of the sensor axis is not defined in this measurement).
      example:
        acceleration:
          value: 8.36
          unit: m/s2
    c8y_LightSensor:
      description: 'A light sensor measures the intensity of light. In a managed object, a light sensor is modeled as a simple empty fragment.'
      type: object
      example: {}
    c8y_LightMeasurement:
      description: |
        Light is measured with two main alternative sets of units.

        Radiometry consists of measurements of light power at all wavelengths, while photometry measures light with wavelength weighted with respect to a standardized model of human brightness perception. Photometry is useful, for example, to quantify illumination (lighting) intended for human use.
      type: object
      properties:
        e:
          allOf:
            - $ref: '#/components/schemas/c8y_MeasurementValue'
            - description: Photometrical light measurement.
      example:
        e:
          value: 8.36
          unit: lux
    c8y_HumiditySensor:
      description: 'A humidity sensor measures the amount of water vapour in the air. In a managed object, a humidity sensor is modeled as a simple empty fragment.'
      type: object
      example: {}
    c8y_HumidityMeasurement:
      description: |
        There are three main measurements of humidity; absolute, relative and specific.

        Absolute humidity is the water content of air. Relative humidity, expressed as a percentage, measures the current absolute humidity relative to the maximum for that temperature. Specific humidity is a ratio of the water vapour content of the mixture to the total air content on a mass basis.
      type: object
      properties:
        h:
          allOf:
            - $ref: '#/components/schemas/c8y_MeasurementValue'
            - description: Relative humidity measurement.
      example:
        h:
          value: 13.37
          unit: '%RH'
    c8y_MoistureSensor:
      description: 'A moisture sensor measures the water content of a substance. In a managed object, a moisture sensor is modeled as a simple empty fragment.'
      type: object
      example: {}
    c8y_MoistureMeasurement:
      description: |
        There are three main measurements of moisture; absolute, relative and specific.

        Absolute moisture is the absolute water content of a substance. Relative moisture, expressed as a percentage, measures the current absolute moisture relative to the maximum for that temperature. Specific humidity is a ratio of the water vapour content of the mixture to the total substance content on a mass basis.
      type: object
      properties:
        moisture:
          allOf:
            - $ref: '#/components/schemas/c8y_MeasurementValue'
            - description: Relative moisture measurement.
      example:
        moisture:
          value: 13.37
          unit: '%'
    c8y_DistanceSensor:
      description: 'A distance sensor measures the distance between itself and the closest object in a certain direction. In a managed object, a distance sensor is modeled as a simple empty fragment.'
      type: object
      example: {}
    c8y_DistanceMeasurement:
      description: Measurement of the distance.
      type: object
      properties:
        distance:
          allOf:
            - $ref: '#/components/schemas/c8y_MeasurementValue'
            - description: Distance measurement.
      example:
        distance:
          value: 13.37
          unit: mm
    c8y_SinglePhaseElectricitySensor:
      description: 'In a managed object, a single phase electricity meter is modeled as a simple empty fragment.'
      type: object
      example: {}
    c8y_SinglePhaseEnergyMeasurement:
      description: Measurement of the single phase energy meter.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/c8y_MeasurementValue'
      example:
        A+:
          value: 123
          unit: kWh
        A-:
          value: 2
          unit: kWh
        P+:
          value: 56
          unit: W
        P-:
          value: 0
          unit: W
    c8y_ThreePhaseElectricitySensor:
      description: 'In a managed object, a three phase electricity meter is modeled as a simple empty fragment.'
      type: object
      example: {}
    c8y_ThreePhaseEnergyMeasurement:
      description: Measurement of the three phase energy meter.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/c8y_MeasurementValue'
      example:
        A+:
          value: 435
          unit: kWh
        A-:
          value: 23
          unit: kWh
        P+:
          value: 657
          unit: W
        P-:
          value: 0
          unit: W
        'A+:1':
          value: 123
          unit: kWh
        'A-:1':
          value: 2
          unit: kWh
        'P+:1':
          value: 56
          unit: W
        'P-:1':
          value: 0
          unit: W
        'A+:2':
          value: 231
          unit: kWh
        'A-:2':
          value: 23
          unit: kWh
        'P+:2':
          value: 516
          unit: W
        'P-:2':
          value: 2
          unit: W
        'A+:3':
          value: 1423
          unit: kWh
        'A-:3':
          value: 422
          unit: kWh
        'P+:3':
          value: 16
          unit: W
        'P-:3':
          value: 9
          unit: W
        Ri+:
          value: 231
          unit: kVArh
        Ri-:
          value: 23
          unit: kVArh
        Rc+:
          value: 342
          unit: kVArh
        Rc-:
          value: 43
          unit: kVArh
        Qi+:
          value: 234
          unit: kVAr
        Qi-:
          value: 645
          unit: kVAr
        Qc+:
          value: 76
          unit: kVAr
        Qc-:
          value: 34
          unit: kVAr
    c8y_CurrentSensor:
      description: 'A current sensor measures the current flowing through it. In a managed object, a current sensor is modeled as a simple empty fragment.'
      type: object
      example: {}
    c8y_CurrentMeasurement:
      description: Current measurement.
      type: object
      properties:
        current:
          allOf:
            - $ref: '#/components/schemas/c8y_MeasurementValue'
            - description: Current measurement.
      example:
        current:
          value: 13.37
          unit: A
    c8y_VoltageMeasurement:
      description: A voltage sensor measures the voltage difference between two points in an electric circuit.
      type: object
      properties:
        voltage:
          allOf:
            - $ref: '#/components/schemas/c8y_MeasurementValue'
            - description: Voltage measurement.
      example:
        voltage:
          value: 13.37
          unit: V
    c8y_MeasurementValue:
      description: A measurement is a value with a unit.
      type: object
      properties:
        value:
          type: number
        unit:
          type: string
    c8y_Position:
      description: |
        Reports the geographical location of an asset in terms of latitude, longitude and altitude.

        Altitude is given in meters. To report the current location of an asset or a device, `c8y_Position` is added to the managed object representing the asset or device. To trace the position of an asset or a device, `c8y_Position` is sent as part of an event of type `c8y_LocationUpdate`.
      type: object
      properties:
        alt:
          type: number
          description: In meters.
        lng:
          type: number
        lat:
          type: number
        trackingProtocol:
          type: string
          description: Describes in which protocol the tracking context of a positioning report was sent.
        reportReason:
          type: string
          description: Describes why the tracking context of a positioning report was sent.
      example:
        alt: 67
        lng: 6.15173
        lat: 51.211977
        trackingProtocol: TELIC
        reportReason: Time Event
    c8y_Agent:
      description: The term "agent" refers to the piece of software that connects a device with Cumulocity.
      type: object
      required:
        - name
        - version
      properties:
        name:
          description: The name of the agent.
          type: string
        version:
          description: The version of the agent.
          type: string
        url:
          description: 'The URL of the agent, for example, its code repository.'
          type: string
          format: uri
    com_cumulocity_model_Agent:
      description: 'An empty fragment stored in the device managed object using the inventory API endpoints. It declares that the device is able to receive operations extended capabilities. This fragment is optional. If not present, the extended capabilities will not be certified.'
      type: object
      example: {}
    c8y_SupportedChildDeviceTypes:
      description: Cumulocity uses the concept of child device types to distinguish the capabilities of child devices behind a gateway device.
      type: array
      items:
        description: Child device types can be freely named.
        type: string
      example:
        - Analog
        - Canbus
        - OPCUA
        - Sigfox
    c8y_LogfileRequest:
      description: Request a device to send a log file and view it in Cumulocity's log viewer.
      type: object
      properties:
        logFile:
          description: Indicates the log file to select.
          type: string
        dateFrom:
          description: Start date and time of log entries in the log file to be sent.
          type: string
          format: date-time
        dateTo:
          description: End date and time of log entries in the log file to be sent.
          type: string
          format: date-time
        searchText:
          description: Provide a text that needs to be present in the log entry.
          type: string
        maximumLines:
          description: Upper limit of the number of lines that should be sent to Cumulocity after filtering.
          type: integer
        file:
          description: A link to the log file request.
          type: string
          format: uri
          readOnly: true
      example:
        logFile: syslog
        dateFrom: '2022-01-01T00:00:00.000Z'
        dateTo: '2022-01-30T23:59:59.999Z'
        searchText: sms
        maximumLines: 1000
        file: 'https://<TENANT_DOMAIN>/inventory/binaries/30761423'
    c8y_SupportedLogs:
      description: Specify which logs are available on the device.
      type: array
      items:
        description: Type of log.
        type: string
      example:
        - syslog
        - dmesg
    c8y_SoftwareList:
      description: Currently installed software on the device in the managed object accessible via the inventory API endpoints.
      type: array
      items:
        description: Details of the installed software.
        type: object
        properties:
          name:
            description: The name of the software.
            type: string
          version:
            description: The version of the software.
            type: string
          url:
            description: 'The URL of the software, for example, its code repository.'
            type: string
            format: uri
    c8y_Profile:
      description: 'Device capability to manage device profiles. Device profiles represent a combination of a firmware version, one or multiple software packages and one or multiple configuration files which can be deployed on a device.'
      type: object
      properties:
        profileName:
          description: The name of the profile.
          type: string
        profileId:
          description: The ID of the profile.
          type: string
        profileExecuted:
          description: Indicates whether the profile has been executed.
          type: boolean
      example:
        profileName: Device_Profile_1
        profileId: '1694'
        profileExecuted: true
    c8y_Network:
      description: 'Device capability to either display or display and manage the WAN, LAN, and DHCP settings.'
      type: object
      properties:
        c8y_LAN:
          description: Local network information.
          type: object
          properties:
            netmask:
              description: Subnet mask configured for the network interface.
              type: string
            ip:
              description: IP address configured for the network interface.
              type: string
            name:
              description: Identifier for the network interface.
              type: string
            enabled:
              description: Indicator showing if the interface is enabled.
              type: integer
            mac:
              description: MAC address of the network interface.
              type: string
        c8y_WAN:
          description: Mobile internet connectivity interface status.
          type: object
          properties:
            password:
              description: SIM connectivity password.
              type: string
            simStatus:
              description: SIM connection status.
              type: string
            authType:
              description: Authentication type used by the SIM connectivity.
              type: string
            apn:
              description: APN used for internet access.
              type: string
            username:
              description: SIM connectivity username.
              type: string
        c8y_DHCP:
          description: Information for DHCP server status.
          type: object
          properties:
            dns1:
              description: First configured DNS server.
              type: string
            dns2:
              description: Second configured DNS server.
              type: string
            domainName:
              description: Domain name configured for the device.
              type: string
            addressRange:
              description: IP address range.
              type: object
              properties:
                start:
                  description: Start of address range assigned to DHCP clients.
                  type: string
                end:
                  description: End of address range assigned to DHCP clients.
                  type: string
            enabled:
              description: Indicator showing if the DHCP server is enabled.
              type: integer
    DevicePermissionOwners:
      description: A list of device permissions.
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/user'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/group'
    UpdatedDevicePermissions:
      description: A list of device permissions.
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              userName:
                type: string
                example: some-username
              devicePermissions:
                $ref: '#/components/schemas/desc_user_devicepermissions'
        groups:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 1
              devicePermissions:
                $ref: '#/components/schemas/desc_user_devicepermissions'
  securitySchemes:
    Basic:
      type: http
      scheme: basic
      description: |
        The authorization header is formed as `Basic <Base64(<tenantID>/<c8yuser>:<password>)>`. For instance, if your tenantID, username and password are **t0071234**, **testuser** and **secret123** respectively, you can generate the Base64 string with the following command:

        ```shell
        $ echo -n t0071234/testuser:secret123 | base64
        ```

        and your authorization header would look like this:

        ```
        "Authorization": "Basic dDAwNzEyMzQvdGVzdHVzZXI6c2VjcmV0MTIz"
        ```
    OAI-Secure:
      type: http
      scheme: bearer
      description: |
        This is the recommended authorization method because it provides high security using authorization tokens to prove the identity of the user, and it is the default login mode on creating new tenants. This mode is an enhancement of the previous OAuth Internal authentication (available prior to 10.13.0).

        For more details about OAI-Secure authentication, see [Platform administration > Authentication > Basic settings > Login settings](https://www.cumulocity.com/docs/authentication/basic-settings/#login-settings) in the Cumulocity user documentation.
    SSO:
      type: oauth2
      description: |
        The login with SSO requires a correct configuration on the [Cumulocity side](https://www.cumulocity.com/docs/authentication/sso/). With the configuration, an additional button is available on the Login page. After clicking the button, the user is redirected to authenticate with the configured authorization server. On successful login, the user is redirected to Cumulocity.

        Authentication details are exchanged using cookies. There are two parts to it, the first is the authentication cookie that is handled automatically by the Cumulocity platform. The second is the XSRF-TOKEN cookie. When a client receives the cookie, it should take the value and put it in the X-XSRF-TOKEN request header in all subsequent requests.

        The flow of authenticating with authentication code grant is as follows:

        ![Authentication flow](images/oauth-simple-flow.png)

        The first request executed by the browser is:

        ```http
        POST /tenant/loginOptions
        Host: https://<TENANT_DOMAIN>
        Content-Type: application/vnd.com.nsn.cumulocity.loginoptioncollection+json
        Accept: application/vnd.com.nsn.cumulocity.loginoptioncollection+json
        ```

        Response sample:

        ```json
        {
            "loginOptions": [
                {
                    "buttonName": "Login with oauth",
                    "grantType": "<AUTHORIZATION_CODE>",
                    "initRequest": "https://<TENANT_DOMAIN>/tenant/oauth?response_type=code&tenant_id=<TENANT_ID>",
                    "self": "https://<TENANT_DOMAIN>/tenant/loginOptions/oauth2",
                    "type": "oauth2"
                },
                ...
            ],
            "self": "http://<TENANT_DOMAIN>/tenant/loginOptions/"
        }
        ```

        The browser must invoke the request provided in the initRequest parameter.

        The initRequest initiates the redirect, in which the user is prompted for credentials. After successful login, the user is redirected back to the browser, where it must capture the code request parameter. Then the request to exchange the code for the token is as follows:

        ```http
        POST /tenant/oauth?grant_type=authorization_code&code=<CODE>
        Host: https://<TENANT_DOMAIN>
        ```

        A successful response will have no body but the following response headers:

        ```
        Set-Cookie: authorization=<TOKEN>;
        Set-Cookie: XSRF-TOKEN=<XSRF-TOKEN>;
        ```

        The authorization cookie is valid for two weeks.
      flows:
        clientCredentials:
          tokenUrl: /tenant/oauth?grant_type=authorization_code&code=<CODE>
          scopes: {}
    JWT-IAM:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        This kind of authentication substitutes the JWT authentication with OAuth2 access tokens from your Identity and Access Management (IAM).
        You can enable this in the [SSO configuration](https://www.cumulocity.com/docs/authentication/sso/).

        The HTTP header must include:

        ```
        "Authorization": "Bearer <Access token>"
        ```

        When a request with a bearer token in the header is received, Cumulocity checks if the access token is from your IAM (that is, if authentication is enabled in your SSO configuration), and verifies the authenticity of
        the token remotely against the IAM.
